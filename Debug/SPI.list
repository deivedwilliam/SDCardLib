
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000647c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08006aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000560  20000074  08006b14  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00003000  200005d4  08006b14  000205d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002212c  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d8b  00000000  00000000  000421ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000096b6  00000000  00000000  00045f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd0  00000000  00000000  0004f610  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f80  00000000  00000000  000503e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000096e0  00000000  00000000  00051360  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000064b4  00000000  00000000  0005aa40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00060ef4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ea0  00000000  00000000  00060f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006704 	.word	0x08006704

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	08006704 	.word	0x08006704

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b97a 	b.w	800068c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	468c      	mov	ip, r1
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	9e08      	ldr	r6, [sp, #32]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d151      	bne.n	8000464 <__udivmoddi4+0xb4>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d96d      	bls.n	80004a2 <__udivmoddi4+0xf2>
 80003c6:	fab2 fe82 	clz	lr, r2
 80003ca:	f1be 0f00 	cmp.w	lr, #0
 80003ce:	d00b      	beq.n	80003e8 <__udivmoddi4+0x38>
 80003d0:	f1ce 0c20 	rsb	ip, lr, #32
 80003d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80003e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80003e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80003ec:	0c25      	lsrs	r5, r4, #16
 80003ee:	fbbc f8fa 	udiv	r8, ip, sl
 80003f2:	fa1f f987 	uxth.w	r9, r7
 80003f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80003fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003fe:	fb08 f309 	mul.w	r3, r8, r9
 8000402:	42ab      	cmp	r3, r5
 8000404:	d90a      	bls.n	800041c <__udivmoddi4+0x6c>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f108 32ff 	add.w	r2, r8, #4294967295
 800040c:	f080 8123 	bcs.w	8000656 <__udivmoddi4+0x2a6>
 8000410:	42ab      	cmp	r3, r5
 8000412:	f240 8120 	bls.w	8000656 <__udivmoddi4+0x2a6>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	443d      	add	r5, r7
 800041c:	1aed      	subs	r5, r5, r3
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb5 f0fa 	udiv	r0, r5, sl
 8000424:	fb0a 5510 	mls	r5, sl, r0, r5
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb00 f909 	mul.w	r9, r0, r9
 8000430:	45a1      	cmp	r9, r4
 8000432:	d909      	bls.n	8000448 <__udivmoddi4+0x98>
 8000434:	19e4      	adds	r4, r4, r7
 8000436:	f100 33ff 	add.w	r3, r0, #4294967295
 800043a:	f080 810a 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8107 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000444:	3802      	subs	r0, #2
 8000446:	443c      	add	r4, r7
 8000448:	eba4 0409 	sub.w	r4, r4, r9
 800044c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000450:	2100      	movs	r1, #0
 8000452:	2e00      	cmp	r6, #0
 8000454:	d061      	beq.n	800051a <__udivmoddi4+0x16a>
 8000456:	fa24 f40e 	lsr.w	r4, r4, lr
 800045a:	2300      	movs	r3, #0
 800045c:	6034      	str	r4, [r6, #0]
 800045e:	6073      	str	r3, [r6, #4]
 8000460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000464:	428b      	cmp	r3, r1
 8000466:	d907      	bls.n	8000478 <__udivmoddi4+0xc8>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d054      	beq.n	8000516 <__udivmoddi4+0x166>
 800046c:	2100      	movs	r1, #0
 800046e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000472:	4608      	mov	r0, r1
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	fab3 f183 	clz	r1, r3
 800047c:	2900      	cmp	r1, #0
 800047e:	f040 808e 	bne.w	800059e <__udivmoddi4+0x1ee>
 8000482:	42ab      	cmp	r3, r5
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xdc>
 8000486:	4282      	cmp	r2, r0
 8000488:	f200 80fa 	bhi.w	8000680 <__udivmoddi4+0x2d0>
 800048c:	1a84      	subs	r4, r0, r2
 800048e:	eb65 0503 	sbc.w	r5, r5, r3
 8000492:	2001      	movs	r0, #1
 8000494:	46ac      	mov	ip, r5
 8000496:	2e00      	cmp	r6, #0
 8000498:	d03f      	beq.n	800051a <__udivmoddi4+0x16a>
 800049a:	e886 1010 	stmia.w	r6, {r4, ip}
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	b912      	cbnz	r2, 80004aa <__udivmoddi4+0xfa>
 80004a4:	2701      	movs	r7, #1
 80004a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004aa:	fab7 fe87 	clz	lr, r7
 80004ae:	f1be 0f00 	cmp.w	lr, #0
 80004b2:	d134      	bne.n	800051e <__udivmoddi4+0x16e>
 80004b4:	1beb      	subs	r3, r5, r7
 80004b6:	0c3a      	lsrs	r2, r7, #16
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	2101      	movs	r1, #1
 80004be:	fbb3 f8f2 	udiv	r8, r3, r2
 80004c2:	0c25      	lsrs	r5, r4, #16
 80004c4:	fb02 3318 	mls	r3, r2, r8, r3
 80004c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004cc:	fb0c f308 	mul.w	r3, ip, r8
 80004d0:	42ab      	cmp	r3, r5
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x134>
 80004d4:	19ed      	adds	r5, r5, r7
 80004d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x132>
 80004dc:	42ab      	cmp	r3, r5
 80004de:	f200 80d1 	bhi.w	8000684 <__udivmoddi4+0x2d4>
 80004e2:	4680      	mov	r8, r0
 80004e4:	1aed      	subs	r5, r5, r3
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80004ec:	fb02 5510 	mls	r5, r2, r0, r5
 80004f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80004f4:	fb0c fc00 	mul.w	ip, ip, r0
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x15c>
 80004fc:	19e4      	adds	r4, r4, r7
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x15a>
 8000504:	45a4      	cmp	ip, r4
 8000506:	f200 80b8 	bhi.w	800067a <__udivmoddi4+0x2ca>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 040c 	sub.w	r4, r4, ip
 8000510:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000514:	e79d      	b.n	8000452 <__udivmoddi4+0xa2>
 8000516:	4631      	mov	r1, r6
 8000518:	4630      	mov	r0, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1ce 0420 	rsb	r4, lr, #32
 8000522:	fa05 f30e 	lsl.w	r3, r5, lr
 8000526:	fa07 f70e 	lsl.w	r7, r7, lr
 800052a:	fa20 f804 	lsr.w	r8, r0, r4
 800052e:	0c3a      	lsrs	r2, r7, #16
 8000530:	fa25 f404 	lsr.w	r4, r5, r4
 8000534:	ea48 0803 	orr.w	r8, r8, r3
 8000538:	fbb4 f1f2 	udiv	r1, r4, r2
 800053c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000540:	fb02 4411 	mls	r4, r2, r1, r4
 8000544:	fa1f fc87 	uxth.w	ip, r7
 8000548:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800054c:	fb01 f30c 	mul.w	r3, r1, ip
 8000550:	42ab      	cmp	r3, r5
 8000552:	fa00 f40e 	lsl.w	r4, r0, lr
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x1bc>
 8000558:	19ed      	adds	r5, r5, r7
 800055a:	f101 30ff 	add.w	r0, r1, #4294967295
 800055e:	f080 808a 	bcs.w	8000676 <__udivmoddi4+0x2c6>
 8000562:	42ab      	cmp	r3, r5
 8000564:	f240 8087 	bls.w	8000676 <__udivmoddi4+0x2c6>
 8000568:	3902      	subs	r1, #2
 800056a:	443d      	add	r5, r7
 800056c:	1aeb      	subs	r3, r5, r3
 800056e:	fa1f f588 	uxth.w	r5, r8
 8000572:	fbb3 f0f2 	udiv	r0, r3, r2
 8000576:	fb02 3310 	mls	r3, r2, r0, r3
 800057a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800057e:	fb00 f30c 	mul.w	r3, r0, ip
 8000582:	42ab      	cmp	r3, r5
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x1e6>
 8000586:	19ed      	adds	r5, r5, r7
 8000588:	f100 38ff 	add.w	r8, r0, #4294967295
 800058c:	d26f      	bcs.n	800066e <__udivmoddi4+0x2be>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d96d      	bls.n	800066e <__udivmoddi4+0x2be>
 8000592:	3802      	subs	r0, #2
 8000594:	443d      	add	r5, r7
 8000596:	1aeb      	subs	r3, r5, r3
 8000598:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800059c:	e78f      	b.n	80004be <__udivmoddi4+0x10e>
 800059e:	f1c1 0720 	rsb	r7, r1, #32
 80005a2:	fa22 f807 	lsr.w	r8, r2, r7
 80005a6:	408b      	lsls	r3, r1
 80005a8:	fa05 f401 	lsl.w	r4, r5, r1
 80005ac:	ea48 0303 	orr.w	r3, r8, r3
 80005b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80005b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005b8:	40fd      	lsrs	r5, r7
 80005ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80005be:	fbb5 f9fc 	udiv	r9, r5, ip
 80005c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80005ca:	fa1f f883 	uxth.w	r8, r3
 80005ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005d2:	fb09 f408 	mul.w	r4, r9, r8
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	fa02 f201 	lsl.w	r2, r2, r1
 80005dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80005e0:	d908      	bls.n	80005f4 <__udivmoddi4+0x244>
 80005e2:	18ed      	adds	r5, r5, r3
 80005e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005e8:	d243      	bcs.n	8000672 <__udivmoddi4+0x2c2>
 80005ea:	42ac      	cmp	r4, r5
 80005ec:	d941      	bls.n	8000672 <__udivmoddi4+0x2c2>
 80005ee:	f1a9 0902 	sub.w	r9, r9, #2
 80005f2:	441d      	add	r5, r3
 80005f4:	1b2d      	subs	r5, r5, r4
 80005f6:	fa1f fe8e 	uxth.w	lr, lr
 80005fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80005fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000602:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000606:	fb00 f808 	mul.w	r8, r0, r8
 800060a:	45a0      	cmp	r8, r4
 800060c:	d907      	bls.n	800061e <__udivmoddi4+0x26e>
 800060e:	18e4      	adds	r4, r4, r3
 8000610:	f100 35ff 	add.w	r5, r0, #4294967295
 8000614:	d229      	bcs.n	800066a <__udivmoddi4+0x2ba>
 8000616:	45a0      	cmp	r8, r4
 8000618:	d927      	bls.n	800066a <__udivmoddi4+0x2ba>
 800061a:	3802      	subs	r0, #2
 800061c:	441c      	add	r4, r3
 800061e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000622:	eba4 0408 	sub.w	r4, r4, r8
 8000626:	fba0 8902 	umull	r8, r9, r0, r2
 800062a:	454c      	cmp	r4, r9
 800062c:	46c6      	mov	lr, r8
 800062e:	464d      	mov	r5, r9
 8000630:	d315      	bcc.n	800065e <__udivmoddi4+0x2ae>
 8000632:	d012      	beq.n	800065a <__udivmoddi4+0x2aa>
 8000634:	b156      	cbz	r6, 800064c <__udivmoddi4+0x29c>
 8000636:	ebba 030e 	subs.w	r3, sl, lr
 800063a:	eb64 0405 	sbc.w	r4, r4, r5
 800063e:	fa04 f707 	lsl.w	r7, r4, r7
 8000642:	40cb      	lsrs	r3, r1
 8000644:	431f      	orrs	r7, r3
 8000646:	40cc      	lsrs	r4, r1
 8000648:	6037      	str	r7, [r6, #0]
 800064a:	6074      	str	r4, [r6, #4]
 800064c:	2100      	movs	r1, #0
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	4618      	mov	r0, r3
 8000654:	e6f8      	b.n	8000448 <__udivmoddi4+0x98>
 8000656:	4690      	mov	r8, r2
 8000658:	e6e0      	b.n	800041c <__udivmoddi4+0x6c>
 800065a:	45c2      	cmp	sl, r8
 800065c:	d2ea      	bcs.n	8000634 <__udivmoddi4+0x284>
 800065e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000662:	eb69 0503 	sbc.w	r5, r9, r3
 8000666:	3801      	subs	r0, #1
 8000668:	e7e4      	b.n	8000634 <__udivmoddi4+0x284>
 800066a:	4628      	mov	r0, r5
 800066c:	e7d7      	b.n	800061e <__udivmoddi4+0x26e>
 800066e:	4640      	mov	r0, r8
 8000670:	e791      	b.n	8000596 <__udivmoddi4+0x1e6>
 8000672:	4681      	mov	r9, r0
 8000674:	e7be      	b.n	80005f4 <__udivmoddi4+0x244>
 8000676:	4601      	mov	r1, r0
 8000678:	e778      	b.n	800056c <__udivmoddi4+0x1bc>
 800067a:	3802      	subs	r0, #2
 800067c:	443c      	add	r4, r7
 800067e:	e745      	b.n	800050c <__udivmoddi4+0x15c>
 8000680:	4608      	mov	r0, r1
 8000682:	e708      	b.n	8000496 <__udivmoddi4+0xe6>
 8000684:	f1a8 0802 	sub.w	r8, r8, #2
 8000688:	443d      	add	r5, r7
 800068a:	e72b      	b.n	80004e4 <__udivmoddi4+0x134>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_InitTick+0x40>)
{
 8000694:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000696:	7818      	ldrb	r0, [r3, #0]
 8000698:	b908      	cbnz	r0, 800069e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800069a:	2001      	movs	r0, #1
 800069c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <HAL_InitTick+0x44>)
 80006a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80006a8:	6810      	ldr	r0, [r2, #0]
 80006aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80006ae:	f000 f8d3 	bl	8000858 <HAL_SYSTICK_Config>
 80006b2:	4604      	mov	r4, r0
 80006b4:	2800      	cmp	r0, #0
 80006b6:	d1f0      	bne.n	800069a <HAL_InitTick+0xa>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b8:	2d0f      	cmp	r5, #15
 80006ba:	d8ee      	bhi.n	800069a <HAL_InitTick+0xa>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	4602      	mov	r2, r0
 80006be:	4629      	mov	r1, r5
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f000 f880 	bl	80007c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_InitTick+0x48>)
 80006ca:	4620      	mov	r0, r4
 80006cc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006ce:	bd38      	pop	{r3, r4, r5, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_Init>:
{
 80006dc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006de:	2003      	movs	r0, #3
 80006e0:	f000 f854 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006e4:	f000 ff58 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 80006e8:	490f      	ldr	r1, [pc, #60]	; (8000728 <HAL_Init+0x4c>)
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <HAL_Init+0x50>)
 80006ec:	698b      	ldr	r3, [r1, #24]
 80006ee:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	40d8      	lsrs	r0, r3
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_Init+0x54>)
 80006fc:	6018      	str	r0, [r3, #0]
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006fe:	698b      	ldr	r3, [r1, #24]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	f003 031f 	and.w	r3, r3, #31
 800070a:	40d8      	lsrs	r0, r3
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Init+0x58>)
 800070e:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ffbd 	bl	8000690 <HAL_InitTick>
 8000716:	4604      	mov	r4, r0
 8000718:	b918      	cbnz	r0, 8000722 <HAL_Init+0x46>
  HAL_MspInit();
 800071a:	f004 fcd9 	bl	80050d0 <HAL_MspInit>
}
 800071e:	4620      	mov	r0, r4
 8000720:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000722:	2401      	movs	r4, #1
 8000724:	e7fb      	b.n	800071e <HAL_Init+0x42>
 8000726:	bf00      	nop
 8000728:	58024400 	.word	0x58024400
 800072c:	08006989 	.word	0x08006989
 8000730:	20000008 	.word	0x20000008
 8000734:	2000000c 	.word	0x2000000c

08000738 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <HAL_IncTick+0x10>)
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <HAL_IncTick+0x14>)
 800073c:	6811      	ldr	r1, [r2, #0]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	440b      	add	r3, r1
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200000ac 	.word	0x200000ac
 800074c:	20000000 	.word	0x20000000

08000750 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000750:	4b01      	ldr	r3, [pc, #4]	; (8000758 <HAL_GetTick+0x8>)
 8000752:	6818      	ldr	r0, [r3, #0]
}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000ac 	.word	0x200000ac

0800075c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800075c:	b538      	push	{r3, r4, r5, lr}
 800075e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000760:	f7ff fff6 	bl	8000750 <HAL_GetTick>
 8000764:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000766:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000768:	bf1e      	ittt	ne
 800076a:	4b04      	ldrne	r3, [pc, #16]	; (800077c <HAL_Delay+0x20>)
 800076c:	781b      	ldrbne	r3, [r3, #0]
 800076e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000770:	f7ff ffee 	bl	8000750 <HAL_GetTick>
 8000774:	1b40      	subs	r0, r0, r5
 8000776:	4284      	cmp	r4, r0
 8000778:	d8fa      	bhi.n	8000770 <HAL_Delay+0x14>
  {
  }
}
 800077a:	bd38      	pop	{r3, r4, r5, pc}
 800077c:	20000000 	.word	0x20000000

08000780 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <HAL_GetREVID+0x8>)
 8000782:	6818      	ldr	r0, [r3, #0]
}
 8000784:	0c00      	lsrs	r0, r0, #16
 8000786:	4770      	bx	lr
 8000788:	5c001000 	.word	0x5c001000

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800078c:	1ec3      	subs	r3, r0, #3
 800078e:	2b04      	cmp	r3, #4
{
 8000790:	b510      	push	{r4, lr}
 8000792:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000794:	d903      	bls.n	800079e <HAL_NVIC_SetPriorityGrouping+0x12>
 8000796:	2192      	movs	r1, #146	; 0x92
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800079a:	f004 fc91 	bl	80050c0 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a0:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a2:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ac:	041b      	lsls	r3, r3, #16
 80007ae:	0c1b      	lsrs	r3, r3, #16
 80007b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007b8:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80007ba:	60d4      	str	r4, [r2, #12]
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	bf00      	nop
 80007c0:	0800671c 	.word	0x0800671c
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007c8:	2a0f      	cmp	r2, #15
{
 80007ca:	b570      	push	{r4, r5, r6, lr}
 80007cc:	4604      	mov	r4, r0
 80007ce:	460e      	mov	r6, r1
 80007d0:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007d2:	d903      	bls.n	80007dc <HAL_NVIC_SetPriority+0x14>
 80007d4:	21aa      	movs	r1, #170	; 0xaa
 80007d6:	481d      	ldr	r0, [pc, #116]	; (800084c <HAL_NVIC_SetPriority+0x84>)
 80007d8:	f004 fc72 	bl	80050c0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007dc:	2e0f      	cmp	r6, #15
 80007de:	d903      	bls.n	80007e8 <HAL_NVIC_SetPriority+0x20>
 80007e0:	21ab      	movs	r1, #171	; 0xab
 80007e2:	481a      	ldr	r0, [pc, #104]	; (800084c <HAL_NVIC_SetPriority+0x84>)
 80007e4:	f004 fc6c 	bl	80050c0 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_NVIC_SetPriority+0x88>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ea:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	68d9      	ldr	r1, [r3, #12]
 80007ee:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f2:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	bf28      	it	cs
 80007fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	2a06      	cmp	r2, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	fa00 f203 	lsl.w	r2, r0, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000804:	bf8c      	ite	hi
 8000806:	3903      	subhi	r1, #3
 8000808:	2100      	movls	r1, #0
  if ((int32_t)(IRQn) >= 0)
 800080a:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f102 32ff 	add.w	r2, r2, #4294967295
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	fa00 f001 	lsl.w	r0, r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	ea02 0206 	and.w	r2, r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f100 30ff 	add.w	r0, r0, #4294967295
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	fa02 f201 	lsl.w	r2, r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	ea05 0500 	and.w	r5, r5, r0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	ea42 0205 	orr.w	r2, r2, r5
 8000828:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800082c:	db07      	blt.n	800083e <HAL_NVIC_SetPriority+0x76>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8000838:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
 800083c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	f004 040f 	and.w	r4, r4, #15
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_NVIC_SetPriority+0x8c>)
 8000846:	551a      	strb	r2, [r3, r4]
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	bf00      	nop
 800084c:	0800671c 	.word	0x0800671c
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	e000ed14 	.word	0xe000ed14

08000858 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	3801      	subs	r0, #1
 800085a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800085e:	d20a      	bcs.n	8000876 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	21f0      	movs	r1, #240	; 0xf0
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000866:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <HAL_GPIO_Init>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000884:	4bbd      	ldr	r3, [pc, #756]	; (8000b7c <HAL_GPIO_Init+0x2f8>)
 8000886:	4298      	cmp	r0, r3
{
 8000888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800088c:	4604      	mov	r4, r0
 800088e:	b085      	sub	sp, #20
 8000890:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000892:	d02b      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 8000894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000898:	4298      	cmp	r0, r3
 800089a:	d027      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 800089c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008a0:	4298      	cmp	r0, r3
 80008a2:	d023      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008a8:	4298      	cmp	r0, r3
 80008aa:	d01f      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008b0:	4298      	cmp	r0, r3
 80008b2:	d01b      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d017      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008c0:	4298      	cmp	r0, r3
 80008c2:	d013      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008c8:	4298      	cmp	r0, r3
 80008ca:	d00f      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008d0:	4298      	cmp	r0, r3
 80008d2:	d00b      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008d8:	4298      	cmp	r0, r3
 80008da:	d007      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008e0:	4298      	cmp	r0, r3
 80008e2:	d003      	beq.n	80008ec <HAL_GPIO_Init+0x68>
 80008e4:	21bb      	movs	r1, #187	; 0xbb
 80008e6:	48a6      	ldr	r0, [pc, #664]	; (8000b80 <HAL_GPIO_Init+0x2fc>)
 80008e8:	f004 fbea 	bl	80050c0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	b112      	cbz	r2, 80008f8 <HAL_GPIO_Init+0x74>
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	b11b      	cbz	r3, 8000900 <HAL_GPIO_Init+0x7c>
 80008f8:	21bc      	movs	r1, #188	; 0xbc
 80008fa:	48a1      	ldr	r0, [pc, #644]	; (8000b80 <HAL_GPIO_Init+0x2fc>)
 80008fc:	f004 fbe0 	bl	80050c0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000900:	686b      	ldr	r3, [r5, #4]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d917      	bls.n	8000936 <HAL_GPIO_Init+0xb2>
 8000906:	f1a3 0211 	sub.w	r2, r3, #17
 800090a:	2a01      	cmp	r2, #1
 800090c:	d913      	bls.n	8000936 <HAL_GPIO_Init+0xb2>
 800090e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000912:	499c      	ldr	r1, [pc, #624]	; (8000b84 <HAL_GPIO_Init+0x300>)
 8000914:	428a      	cmp	r2, r1
 8000916:	d00e      	beq.n	8000936 <HAL_GPIO_Init+0xb2>
 8000918:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800091c:	428b      	cmp	r3, r1
 800091e:	d00a      	beq.n	8000936 <HAL_GPIO_Init+0xb2>
 8000920:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8000924:	428a      	cmp	r2, r1
 8000926:	d006      	beq.n	8000936 <HAL_GPIO_Init+0xb2>
 8000928:	4a97      	ldr	r2, [pc, #604]	; (8000b88 <HAL_GPIO_Init+0x304>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d003      	beq.n	8000936 <HAL_GPIO_Init+0xb2>
 800092e:	21bd      	movs	r1, #189	; 0xbd
 8000930:	4893      	ldr	r0, [pc, #588]	; (8000b80 <HAL_GPIO_Init+0x2fc>)
 8000932:	f004 fbc5 	bl	80050c0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000936:	68ab      	ldr	r3, [r5, #8]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d903      	bls.n	8000944 <HAL_GPIO_Init+0xc0>
 800093c:	21be      	movs	r1, #190	; 0xbe
 800093e:	4890      	ldr	r0, [pc, #576]	; (8000b80 <HAL_GPIO_Init+0x2fc>)
 8000940:	f004 fbbe 	bl	80050c0 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000944:	f04f 0800 	mov.w	r8, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000948:	4f90      	ldr	r7, [pc, #576]	; (8000b8c <HAL_GPIO_Init+0x308>)
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800094a:	4e91      	ldr	r6, [pc, #580]	; (8000b90 <HAL_GPIO_Init+0x30c>)
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800094c:	682b      	ldr	r3, [r5, #0]
 800094e:	fa33 f208 	lsrs.w	r2, r3, r8
 8000952:	d102      	bne.n	800095a <HAL_GPIO_Init+0xd6>
      }
    }

    position++;
  }
}
 8000954:	b005      	add	sp, #20
 8000956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800095a:	f04f 0a01 	mov.w	sl, #1
 800095e:	fa0a fa08 	lsl.w	sl, sl, r8
    if (iocurrent != 0x00U)
 8000962:	ea13 090a 	ands.w	r9, r3, sl
 8000966:	f000 80f7 	beq.w	8000b58 <HAL_GPIO_Init+0x2d4>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096a:	686b      	ldr	r3, [r5, #4]
 800096c:	f023 0310 	bic.w	r3, r3, #16
 8000970:	2b02      	cmp	r3, #2
 8000972:	d145      	bne.n	8000a00 <HAL_GPIO_Init+0x17c>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000974:	4b81      	ldr	r3, [pc, #516]	; (8000b7c <HAL_GPIO_Init+0x2f8>)
 8000976:	429c      	cmp	r4, r3
 8000978:	d02b      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 800097a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800097e:	429c      	cmp	r4, r3
 8000980:	d027      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 8000982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000986:	429c      	cmp	r4, r3
 8000988:	d023      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 800098a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800098e:	429c      	cmp	r4, r3
 8000990:	d01f      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 8000992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000996:	429c      	cmp	r4, r3
 8000998:	d01b      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 800099a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800099e:	429c      	cmp	r4, r3
 80009a0:	d017      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 80009a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009a6:	429c      	cmp	r4, r3
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 80009aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009ae:	429c      	cmp	r4, r3
 80009b0:	d00f      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 80009b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d00b      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 80009ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009be:	429c      	cmp	r4, r3
 80009c0:	d007      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 80009c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009c6:	429c      	cmp	r4, r3
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x14e>
 80009ca:	21cd      	movs	r1, #205	; 0xcd
 80009cc:	486c      	ldr	r0, [pc, #432]	; (8000b80 <HAL_GPIO_Init+0x2fc>)
 80009ce:	f004 fb77 	bl	80050c0 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80009d2:	692b      	ldr	r3, [r5, #16]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d903      	bls.n	80009e0 <HAL_GPIO_Init+0x15c>
 80009d8:	21ce      	movs	r1, #206	; 0xce
 80009da:	4869      	ldr	r0, [pc, #420]	; (8000b80 <HAL_GPIO_Init+0x2fc>)
 80009dc:	f004 fb70 	bl	80050c0 <assert_failed>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009e0:	f008 0307 	and.w	r3, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 80009e4:	ea4f 02d8 	mov.w	r2, r8, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009e8:	0099      	lsls	r1, r3, #2
 80009ea:	230f      	movs	r3, #15
 80009ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80009f0:	408b      	lsls	r3, r1
        temp = GPIOx->AFR[position >> 3U];
 80009f2:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009f4:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009f8:	692b      	ldr	r3, [r5, #16]
 80009fa:	408b      	lsls	r3, r1
 80009fc:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3U] = temp;
 80009fe:	6213      	str	r3, [r2, #32]
 8000a00:	ea4f 0248 	mov.w	r2, r8, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a04:	f04f 0b03 	mov.w	fp, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a08:	686b      	ldr	r3, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a0a:	fa0b fb02 	lsl.w	fp, fp, r2
      temp = GPIOx->MODER;
 8000a0e:	6820      	ldr	r0, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a10:	f003 0103 	and.w	r1, r3, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a14:	f023 0310 	bic.w	r3, r3, #16
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a18:	ea6f 0b0b 	mvn.w	fp, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a1c:	4091      	lsls	r1, r2
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1e:	3b01      	subs	r3, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a20:	ea00 000b 	and.w	r0, r0, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a24:	2b01      	cmp	r3, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a26:	ea41 0100 	orr.w	r1, r1, r0
      GPIOx->MODER = temp;
 8000a2a:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a2c:	d81a      	bhi.n	8000a64 <HAL_GPIO_Init+0x1e0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000a2e:	68eb      	ldr	r3, [r5, #12]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d905      	bls.n	8000a40 <HAL_GPIO_Init+0x1bc>
 8000a34:	21e2      	movs	r1, #226	; 0xe2
 8000a36:	4852      	ldr	r0, [pc, #328]	; (8000b80 <HAL_GPIO_Init+0x2fc>)
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	f004 fb41 	bl	80050c0 <assert_failed>
 8000a3e:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000a40:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a42:	68eb      	ldr	r3, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a44:	ea0b 0101 	and.w	r1, fp, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	430b      	orrs	r3, r1
        GPIOx->OSPEEDR = temp;
 8000a4c:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 8000a4e:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a50:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a54:	686b      	ldr	r3, [r5, #4]
 8000a56:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a5a:	fa03 f308 	lsl.w	r3, r3, r8
 8000a5e:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OTYPER = temp;
 8000a62:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8000a64:	68e3      	ldr	r3, [r4, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a66:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a68:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6c:	68ab      	ldr	r3, [r5, #8]
 8000a6e:	fa03 f202 	lsl.w	r2, r3, r2
 8000a72:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->PUPDR = temp;
 8000a76:	60e2      	str	r2, [r4, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a78:	00c2      	lsls	r2, r0, #3
 8000a7a:	d56d      	bpl.n	8000b58 <HAL_GPIO_Init+0x2d4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a80:	f028 0103 	bic.w	r1, r8, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a84:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	f101 41b0 	add.w	r1, r1, #1476395008	; 0x58000000
 8000a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000a94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	9303      	str	r3, [sp, #12]
 8000aa2:	9b03      	ldr	r3, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000aa4:	f008 0303 	and.w	r3, r8, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000aa8:	688a      	ldr	r2, [r1, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000aaa:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8000aae:	fa0c f30e 	lsl.w	r3, ip, lr
 8000ab2:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <HAL_GPIO_Init+0x2f8>)
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	d050      	beq.n	8000b5e <HAL_GPIO_Init+0x2da>
 8000abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ac0:	429c      	cmp	r4, r3
 8000ac2:	d04e      	beq.n	8000b62 <HAL_GPIO_Init+0x2de>
 8000ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	d04c      	beq.n	8000b66 <HAL_GPIO_Init+0x2e2>
 8000acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ad0:	429c      	cmp	r4, r3
 8000ad2:	d04a      	beq.n	8000b6a <HAL_GPIO_Init+0x2e6>
 8000ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ad8:	429c      	cmp	r4, r3
 8000ada:	d048      	beq.n	8000b6e <HAL_GPIO_Init+0x2ea>
 8000adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ae0:	429c      	cmp	r4, r3
 8000ae2:	d046      	beq.n	8000b72 <HAL_GPIO_Init+0x2ee>
 8000ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ae8:	429c      	cmp	r4, r3
 8000aea:	d044      	beq.n	8000b76 <HAL_GPIO_Init+0x2f2>
 8000aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000af0:	429c      	cmp	r4, r3
 8000af2:	d04f      	beq.n	8000b94 <HAL_GPIO_Init+0x310>
 8000af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d04d      	beq.n	8000b98 <HAL_GPIO_Init+0x314>
 8000afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b00:	429c      	cmp	r4, r3
 8000b02:	bf14      	ite	ne
 8000b04:	230a      	movne	r3, #10
 8000b06:	2309      	moveq	r3, #9
 8000b08:	fa03 f30e 	lsl.w	r3, r3, lr
 8000b0c:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b10:	608b      	str	r3, [r1, #8]
        temp &= ~(iocurrent);
 8000b12:	ea6f 0109 	mvn.w	r1, r9
        temp = EXTI_CurrentCPU->IMR1;
 8000b16:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b18:	03c3      	lsls	r3, r0, #15
        temp &= ~(iocurrent);
 8000b1a:	bf54      	ite	pl
 8000b1c:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8000b1e:	ea49 0202 	orrmi.w	r2, r9, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b22:	0383      	lsls	r3, r0, #14
        temp = EXTI->RTSR1;
 8000b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 8000b28:	6032      	str	r2, [r6, #0]
        temp = EXTI_CurrentCPU->EMR1;
 8000b2a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
 8000b2c:	bf54      	ite	pl
 8000b2e:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8000b30:	ea49 0202 	orrmi.w	r2, r9, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
        EXTI_CurrentCPU->EMR1 = temp;
 8000b38:	6072      	str	r2, [r6, #4]
        temp = EXTI->RTSR1;
 8000b3a:	681a      	ldr	r2, [r3, #0]
        temp &= ~(iocurrent);
 8000b3c:	bf0c      	ite	eq
 8000b3e:	400a      	andeq	r2, r1
          temp |= iocurrent;
 8000b40:	ea49 0202 	orrne.w	r2, r9, r2
        EXTI->RTSR1 = temp;
 8000b44:	601a      	str	r2, [r3, #0]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b46:	0282      	lsls	r2, r0, #10
        temp = EXTI->FTSR1;
 8000b48:	685b      	ldr	r3, [r3, #4]
        EXTI->FTSR1 = temp;
 8000b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000b4e:	bf54      	ite	pl
 8000b50:	400b      	andpl	r3, r1
          temp |= iocurrent;
 8000b52:	ea49 0303 	orrmi.w	r3, r9, r3
        EXTI->FTSR1 = temp;
 8000b56:	6053      	str	r3, [r2, #4]
    position++;
 8000b58:	f108 0801 	add.w	r8, r8, #1
 8000b5c:	e6f6      	b.n	800094c <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e7d2      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e7d0      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b66:	2302      	movs	r3, #2
 8000b68:	e7ce      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e7cc      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b6e:	2304      	movs	r3, #4
 8000b70:	e7ca      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b72:	2305      	movs	r3, #5
 8000b74:	e7c8      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b76:	2306      	movs	r3, #6
 8000b78:	e7c6      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b7a:	bf00      	nop
 8000b7c:	58020000 	.word	0x58020000
 8000b80:	08006757 	.word	0x08006757
 8000b84:	11110000 	.word	0x11110000
 8000b88:	11220000 	.word	0x11220000
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	58000080 	.word	0x58000080
 8000b94:	2307      	movs	r3, #7
 8000b96:	e7b7      	b.n	8000b08 <HAL_GPIO_Init+0x284>
 8000b98:	2308      	movs	r3, #8
 8000b9a:	e7b5      	b.n	8000b08 <HAL_GPIO_Init+0x284>

08000b9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000ba0:	4b67      	ldr	r3, [pc, #412]	; (8000d40 <HAL_GPIO_DeInit+0x1a4>)
{
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000ba6:	4298      	cmp	r0, r3
 8000ba8:	d02c      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	d028      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bb6:	4298      	cmp	r0, r3
 8000bb8:	d024      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d020      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc6:	4298      	cmp	r0, r3
 8000bc8:	d01c      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d018      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d014      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bde:	4298      	cmp	r0, r3
 8000be0:	d010      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000be6:	4298      	cmp	r0, r3
 8000be8:	d00c      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bee:	4298      	cmp	r0, r3
 8000bf0:	d008      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bf6:	4298      	cmp	r0, r3
 8000bf8:	d004      	beq.n	8000c04 <HAL_GPIO_DeInit+0x68>
 8000bfa:	f240 113f 	movw	r1, #319	; 0x13f
 8000bfe:	4851      	ldr	r0, [pc, #324]	; (8000d44 <HAL_GPIO_DeInit+0x1a8>)
 8000c00:	f004 fa5e 	bl	80050c0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000c04:	b2ab      	uxth	r3, r5
 8000c06:	b113      	cbz	r3, 8000c0e <HAL_GPIO_DeInit+0x72>
 8000c08:	0c2b      	lsrs	r3, r5, #16
 8000c0a:	041b      	lsls	r3, r3, #16
 8000c0c:	b123      	cbz	r3, 8000c18 <HAL_GPIO_DeInit+0x7c>
 8000c0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c12:	484c      	ldr	r0, [pc, #304]	; (8000d44 <HAL_GPIO_DeInit+0x1a8>)
 8000c14:	f004 fa54 	bl	80050c0 <assert_failed>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c18:	2200      	movs	r2, #0
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8000c1a:	4e4b      	ldr	r6, [pc, #300]	; (8000d48 <HAL_GPIO_DeInit+0x1ac>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c1c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8000d4c <HAL_GPIO_DeInit+0x1b0>
 8000c20:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8000d50 <HAL_GPIO_DeInit+0x1b4>
 8000c24:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8000d54 <HAL_GPIO_DeInit+0x1b8>
  while ((GPIO_Pin >> position) != 0x00U)
 8000c28:	fa35 f302 	lsrs.w	r3, r5, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_GPIO_DeInit+0x96>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
    }

    position++;
  }
}
 8000c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8000c32:	2301      	movs	r3, #1
 8000c34:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8000c38:	ea15 010c 	ands.w	r1, r5, ip
 8000c3c:	d06b      	beq.n	8000d16 <HAL_GPIO_DeInit+0x17a>
 8000c3e:	f022 0003 	bic.w	r0, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c42:	f002 0e03 	and.w	lr, r2, #3
 8000c46:	270f      	movs	r7, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c48:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <HAL_GPIO_DeInit+0x1a4>)
 8000c4a:	f100 40b0 	add.w	r0, r0, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c4e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c52:	429c      	cmp	r4, r3
 8000c54:	f500 6080 	add.w	r0, r0, #1024	; 0x400
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c58:	fa07 f70e 	lsl.w	r7, r7, lr
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000c5c:	f8d0 8008 	ldr.w	r8, [r0, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c60:	ea08 0807 	and.w	r8, r8, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c64:	d059      	beq.n	8000d1a <HAL_GPIO_DeInit+0x17e>
 8000c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	d057      	beq.n	8000d1e <HAL_GPIO_DeInit+0x182>
 8000c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c72:	429c      	cmp	r4, r3
 8000c74:	d055      	beq.n	8000d22 <HAL_GPIO_DeInit+0x186>
 8000c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	d053      	beq.n	8000d26 <HAL_GPIO_DeInit+0x18a>
 8000c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c82:	429c      	cmp	r4, r3
 8000c84:	d051      	beq.n	8000d2a <HAL_GPIO_DeInit+0x18e>
 8000c86:	454c      	cmp	r4, r9
 8000c88:	d051      	beq.n	8000d2e <HAL_GPIO_DeInit+0x192>
 8000c8a:	4554      	cmp	r4, sl
 8000c8c:	d051      	beq.n	8000d32 <HAL_GPIO_DeInit+0x196>
 8000c8e:	455c      	cmp	r4, fp
 8000c90:	d051      	beq.n	8000d36 <HAL_GPIO_DeInit+0x19a>
 8000c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c96:	429c      	cmp	r4, r3
 8000c98:	d04f      	beq.n	8000d3a <HAL_GPIO_DeInit+0x19e>
 8000c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c9e:	429c      	cmp	r4, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2309      	moveq	r3, #9
 8000ca4:	230a      	movne	r3, #10
 8000ca6:	fa03 f30e 	lsl.w	r3, r3, lr
 8000caa:	4598      	cmp	r8, r3
 8000cac:	d112      	bne.n	8000cd4 <HAL_GPIO_DeInit+0x138>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000cae:	6883      	ldr	r3, [r0, #8]
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8000cb0:	43c9      	mvns	r1, r1
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000cb2:	ea23 0707 	bic.w	r7, r3, r7
 8000cb6:	6087      	str	r7, [r0, #8]
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8000cb8:	6833      	ldr	r3, [r6, #0]
 8000cba:	400b      	ands	r3, r1
 8000cbc:	6033      	str	r3, [r6, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8000cbe:	6873      	ldr	r3, [r6, #4]
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	6073      	str	r3, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8000cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	4008      	ands	r0, r1
 8000ccc:	6018      	str	r0, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8000cce:	6858      	ldr	r0, [r3, #4]
 8000cd0:	4001      	ands	r1, r0
 8000cd2:	6059      	str	r1, [r3, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	0053      	lsls	r3, r2, #1
 8000cd8:	6821      	ldr	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000cda:	f002 0e07 	and.w	lr, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000cde:	fa00 f303 	lsl.w	r3, r0, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000ce2:	270f      	movs	r7, #15
 8000ce4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000ce8:	4319      	orrs	r1, r3
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cea:	43db      	mvns	r3, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000cec:	fa07 f70e 	lsl.w	r7, r7, lr
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000cf0:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000cf2:	fa22 f100 	lsr.w	r1, r2, r0
 8000cf6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000cfa:	6a08      	ldr	r0, [r1, #32]
 8000cfc:	ea20 0707 	bic.w	r7, r0, r7
 8000d00:	620f      	str	r7, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d02:	68a1      	ldr	r1, [r4, #8]
 8000d04:	4019      	ands	r1, r3
 8000d06:	60a1      	str	r1, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d08:	6861      	ldr	r1, [r4, #4]
 8000d0a:	ea21 010c 	bic.w	r1, r1, ip
 8000d0e:	6061      	str	r1, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d10:	68e1      	ldr	r1, [r4, #12]
 8000d12:	400b      	ands	r3, r1
 8000d14:	60e3      	str	r3, [r4, #12]
    position++;
 8000d16:	3201      	adds	r2, #1
 8000d18:	e786      	b.n	8000c28 <HAL_GPIO_DeInit+0x8c>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e7c3      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e7c1      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e7bf      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e7bd      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e7bb      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d2e:	2305      	movs	r3, #5
 8000d30:	e7b9      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d32:	2306      	movs	r3, #6
 8000d34:	e7b7      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d36:	2307      	movs	r3, #7
 8000d38:	e7b5      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	e7b3      	b.n	8000ca6 <HAL_GPIO_DeInit+0x10a>
 8000d3e:	bf00      	nop
 8000d40:	58020000 	.word	0x58020000
 8000d44:	08006757 	.word	0x08006757
 8000d48:	58000080 	.word	0x58000080
 8000d4c:	58021400 	.word	0x58021400
 8000d50:	58021800 	.word	0x58021800
 8000d54:	58021c00 	.word	0x58021c00

08000d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d5c:	460c      	mov	r4, r1
 8000d5e:	b921      	cbnz	r1, 8000d6a <HAL_GPIO_ReadPin+0x12>
 8000d60:	f240 118d 	movw	r1, #397	; 0x18d
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <HAL_GPIO_ReadPin+0x20>)
 8000d66:	f004 f9ab 	bl	80050c0 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000d6a:	692b      	ldr	r3, [r5, #16]
 8000d6c:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d6e:	bf14      	ite	ne
 8000d70:	2001      	movne	r0, #1
 8000d72:	2000      	moveq	r0, #0
 8000d74:	bd38      	pop	{r3, r4, r5, pc}
 8000d76:	bf00      	nop
 8000d78:	08006757 	.word	0x08006757

08000d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	4605      	mov	r5, r0
 8000d80:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d82:	460c      	mov	r4, r1
 8000d84:	b921      	cbnz	r1, 8000d90 <HAL_GPIO_WritePin+0x14>
 8000d86:	f240 11ad 	movw	r1, #429	; 0x1ad
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <HAL_GPIO_WritePin+0x30>)
 8000d8c:	f004 f998 	bl	80050c0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000d90:	2e01      	cmp	r6, #1
 8000d92:	d906      	bls.n	8000da2 <HAL_GPIO_WritePin+0x26>
 8000d94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <HAL_GPIO_WritePin+0x30>)
 8000d9a:	f004 f991 	bl	80050c0 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d9e:	61ac      	str	r4, [r5, #24]
 8000da0:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d1fb      	bne.n	8000d9e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000da6:	0424      	lsls	r4, r4, #16
 8000da8:	e7f9      	b.n	8000d9e <HAL_GPIO_WritePin+0x22>
 8000daa:	bf00      	nop
 8000dac:	08006757 	.word	0x08006757

08000db0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000db4:	460c      	mov	r4, r1
 8000db6:	b921      	cbnz	r1, 8000dc2 <HAL_GPIO_TogglePin+0x12>
 8000db8:	f240 11c3 	movw	r1, #451	; 0x1c3
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <HAL_GPIO_TogglePin+0x20>)
 8000dbe:	f004 f97f 	bl	80050c0 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000dc2:	696b      	ldr	r3, [r5, #20]
 8000dc4:	ea34 0303 	bics.w	r3, r4, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dc8:	bf08      	it	eq
 8000dca:	0424      	lsleq	r4, r4, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dcc:	61ac      	str	r4, [r5, #24]
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
 8000dd0:	08006757 	.word	0x08006757

08000dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dd6:	4604      	mov	r4, r0
{
 8000dd8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d039      	beq.n	8000e52 <HAL_PCD_Init+0x7e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8000dde:	6803      	ldr	r3, [r0, #0]
 8000de0:	4a49      	ldr	r2, [pc, #292]	; (8000f08 <HAL_PCD_Init+0x134>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_PCD_Init+0x22>
 8000de6:	f5a2 2280 	sub.w	r2, r2, #262144	; 0x40000
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d003      	beq.n	8000df6 <HAL_PCD_Init+0x22>
 8000dee:	2187      	movs	r1, #135	; 0x87
 8000df0:	4846      	ldr	r0, [pc, #280]	; (8000f0c <HAL_PCD_Init+0x138>)
 8000df2:	f004 f965 	bl	80050c0 <assert_failed>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000df6:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000dfa:	6825      	ldr	r5, [r4, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e00:	b923      	cbnz	r3, 8000e0c <HAL_PCD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e02:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e06:	4620      	mov	r0, r4
 8000e08:	f004 f9fe 	bl	8005208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e0c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e0e:	466e      	mov	r6, sp
 8000e10:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e12:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8000e18:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e1a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000e1e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000e22:	bf08      	it	eq
 8000e24:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000e26:	f003 fe4e 	bl	8004ac6 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e36:	4625      	mov	r5, r4
 8000e38:	e886 0003 	stmia.w	r6, {r0, r1}
 8000e3c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000e40:	f855 0b10 	ldr.w	r0, [r5], #16
 8000e44:	f003 fdfe 	bl	8004a44 <USB_CoreInit>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	b120      	cbz	r0, 8000e56 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000e52:	2501      	movs	r5, #1
 8000e54:	e054      	b.n	8000f00 <HAL_PCD_Init+0x12c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e56:	4601      	mov	r1, r0
 8000e58:	6820      	ldr	r0, [r4, #0]
 8000e5a:	f003 fe3a 	bl	8004ad2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e5e:	4630      	mov	r0, r6
 8000e60:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e64:	261c      	movs	r6, #28
 8000e66:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	b2c2      	uxtb	r2, r0
 8000e6e:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e70:	4596      	cmp	lr, r2
 8000e72:	d81b      	bhi.n	8000eac <HAL_PCD_Init+0xd8>
 8000e74:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e76:	261c      	movs	r6, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	b2d8      	uxtb	r0, r3
 8000e7c:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e7e:	4586      	cmp	lr, r0
 8000e80:	d822      	bhi.n	8000ec8 <HAL_PCD_Init+0xf4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	466e      	mov	r6, sp
 8000e86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e90:	e886 0003 	stmia.w	r6, {r0, r1}
 8000e94:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000e98:	6820      	ldr	r0, [r4, #0]
 8000e9a:	f003 fe5b 	bl	8004b54 <USB_DevInit>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4605      	mov	r5, r0
 8000ea2:	b300      	cbz	r0, 8000ee6 <HAL_PCD_Init+0x112>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000eaa:	e7d2      	b.n	8000e52 <HAL_PCD_Init+0x7e>
    hpcd->IN_ep[i].is_in = 1U;
 8000eac:	fb06 4302 	mla	r3, r6, r2, r4
 8000eb0:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eb8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ebc:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ec0:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ec2:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ec4:	6519      	str	r1, [r3, #80]	; 0x50
 8000ec6:	e7d1      	b.n	8000e6c <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ec8:	fb06 4200 	mla	r2, r6, r0, r4
 8000ecc:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000ed0:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ed4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ed8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000edc:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ee0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000ee4:	e7c9      	b.n	8000e7a <HAL_PCD_Init+0xa6>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000ee6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000eea:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d102      	bne.n	8000efa <HAL_PCD_Init+0x126>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f000 f80b 	bl	8000f10 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000efa:	6820      	ldr	r0, [r4, #0]
 8000efc:	f003 feea 	bl	8004cd4 <USB_DevDisconnect>

  return HAL_OK;
}
 8000f00:	4628      	mov	r0, r5
 8000f02:	b00b      	add	sp, #44	; 0x2c
 8000f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40080000 	.word	0x40080000
 8000f0c:	08006790 	.word	0x08006790

08000f10 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000f10:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f12:	6802      	ldr	r2, [r0, #0]
{
 8000f14:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000f16:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000f20:	6993      	ldr	r3, [r2, #24]
 8000f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f26:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000f28:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	f043 0303 	orr.w	r3, r3, #3
 8000f32:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000f38:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8000f3a:	1e43      	subs	r3, r0, #1
{
 8000f3c:	4604      	mov	r4, r0
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d903      	bls.n	8000f4a <HAL_PWREx_ConfigSupply+0x12>
 8000f42:	21ef      	movs	r1, #239	; 0xef
 8000f44:	4812      	ldr	r0, [pc, #72]	; (8000f90 <HAL_PWREx_ConfigSupply+0x58>)
 8000f46:	f004 f8bb 	bl	80050c0 <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_PWREx_ConfigSupply+0x5c>)
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	f012 0f04 	tst.w	r2, #4
 8000f52:	461a      	mov	r2, r3
 8000f54:	d104      	bne.n	8000f60 <HAL_PWREx_ConfigSupply+0x28>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	429c      	cmp	r4, r3
 8000f5e:	d115      	bne.n	8000f8c <HAL_PWREx_ConfigSupply+0x54>
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f60:	68d0      	ldr	r0, [r2, #12]
 8000f62:	f020 0007 	bic.w	r0, r0, #7
 8000f66:	4320      	orrs	r0, r4

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <HAL_PWREx_ConfigSupply+0x5c>)
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f6a:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick();
 8000f6c:	f7ff fbf0 	bl	8000750 <HAL_GetTick>
 8000f70:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	049b      	lsls	r3, r3, #18
 8000f76:	d501      	bpl.n	8000f7c <HAL_PWREx_ConfigSupply+0x44>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8000f78:	2000      	movs	r0, #0
 8000f7a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8000f7c:	f7ff fbe8 	bl	8000750 <HAL_GetTick>
 8000f80:	1b40      	subs	r0, r0, r5
 8000f82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f86:	d9f4      	bls.n	8000f72 <HAL_PWREx_ConfigSupply+0x3a>
      return HAL_TIMEOUT;
 8000f88:	2003      	movs	r0, #3
}
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	080067c8 	.word	0x080067c8
 8000f94:	58024800 	.word	0x58024800

08000f98 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8000f98:	4a02      	ldr	r2, [pc, #8]	; (8000fa4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8000f9a:	68d3      	ldr	r3, [r2, #12]
 8000f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa0:	60d3      	str	r3, [r2, #12]
 8000fa2:	4770      	bx	lr
 8000fa4:	58024800 	.word	0x58024800

08000fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000faa:	4604      	mov	r4, r0
 8000fac:	b908      	cbnz	r0, 8000fb2 <HAL_RCC_OscConfig+0xa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fae:	2001      	movs	r0, #1
 8000fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	b133      	cbz	r3, 8000fc4 <HAL_RCC_OscConfig+0x1c>
 8000fb6:	069d      	lsls	r5, r3, #26
 8000fb8:	d104      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x1c>
 8000fba:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000fbe:	48aa      	ldr	r0, [pc, #680]	; (8001268 <HAL_RCC_OscConfig+0x2c0>)
 8000fc0:	f004 f87e 	bl	80050c0 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	07d8      	lsls	r0, r3, #31
 8000fc8:	d455      	bmi.n	8001076 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	0799      	lsls	r1, r3, #30
 8000fce:	f100 80af 	bmi.w	8001130 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	06da      	lsls	r2, r3, #27
 8000fd6:	d534      	bpl.n	8001042 <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8000fd8:	69e3      	ldr	r3, [r4, #28]
 8000fda:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8000fde:	d004      	beq.n	8000fea <HAL_RCC_OscConfig+0x42>
 8000fe0:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8000fe4:	48a0      	ldr	r0, [pc, #640]	; (8001268 <HAL_RCC_OscConfig+0x2c0>)
 8000fe6:	f004 f86b 	bl	80050c0 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8000fea:	6a23      	ldr	r3, [r4, #32]
 8000fec:	2b1f      	cmp	r3, #31
 8000fee:	d904      	bls.n	8000ffa <HAL_RCC_OscConfig+0x52>
 8000ff0:	f240 11fb 	movw	r1, #507	; 0x1fb
 8000ff4:	489c      	ldr	r0, [pc, #624]	; (8001268 <HAL_RCC_OscConfig+0x2c0>)
 8000ff6:	f004 f863 	bl	80050c0 <assert_failed>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ffa:	4b9c      	ldr	r3, [pc, #624]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
 8000ffc:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ffe:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001000:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001004:	2a08      	cmp	r2, #8
 8001006:	d007      	beq.n	8001018 <HAL_RCC_OscConfig+0x70>
 8001008:	2a18      	cmp	r2, #24
 800100a:	f040 8104 	bne.w	8001216 <HAL_RCC_OscConfig+0x26e>
 800100e:	f001 0203 	and.w	r2, r1, #3
 8001012:	2a01      	cmp	r2, #1
 8001014:	f040 80ff 	bne.w	8001216 <HAL_RCC_OscConfig+0x26e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	05db      	lsls	r3, r3, #23
 800101c:	d502      	bpl.n	8001024 <HAL_RCC_OscConfig+0x7c>
 800101e:	69e3      	ldr	r3, [r4, #28]
 8001020:	2b80      	cmp	r3, #128	; 0x80
 8001022:	d1c4      	bne.n	8000fae <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001024:	f7ff fbac 	bl	8000780 <HAL_GetREVID>
 8001028:	f241 0303 	movw	r3, #4099	; 0x1003
 800102c:	4a8f      	ldr	r2, [pc, #572]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
 800102e:	4298      	cmp	r0, r3
 8001030:	6a21      	ldr	r1, [r4, #32]
 8001032:	f200 80e9 	bhi.w	8001208 <HAL_RCC_OscConfig+0x260>
 8001036:	6853      	ldr	r3, [r2, #4]
 8001038:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800103c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8001040:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	0719      	lsls	r1, r3, #28
 8001046:	f100 8126 	bmi.w	8001296 <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	069a      	lsls	r2, r3, #26
 800104e:	f100 814f 	bmi.w	80012f0 <HAL_RCC_OscConfig+0x348>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	075d      	lsls	r5, r3, #29
 8001056:	f100 8178 	bmi.w	800134a <HAL_RCC_OscConfig+0x3a2>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800105a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800105c:	2b02      	cmp	r3, #2
 800105e:	d904      	bls.n	800106a <HAL_RCC_OscConfig+0xc2>
 8001060:	f240 21c3 	movw	r1, #707	; 0x2c3
 8001064:	4880      	ldr	r0, [pc, #512]	; (8001268 <HAL_RCC_OscConfig+0x2c0>)
 8001066:	f004 f82b 	bl	80050c0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800106a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800106c:	2a00      	cmp	r2, #0
 800106e:	f040 81c5 	bne.w	80013fc <HAL_RCC_OscConfig+0x454>
    }
  }
  return HAL_OK;
 8001072:	2000      	movs	r0, #0
 8001074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001076:	6863      	ldr	r3, [r4, #4]
 8001078:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800107c:	d007      	beq.n	800108e <HAL_RCC_OscConfig+0xe6>
 800107e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001082:	d004      	beq.n	800108e <HAL_RCC_OscConfig+0xe6>
 8001084:	f240 1175 	movw	r1, #373	; 0x175
 8001088:	4877      	ldr	r0, [pc, #476]	; (8001268 <HAL_RCC_OscConfig+0x2c0>)
 800108a:	f004 f819 	bl	80050c0 <assert_failed>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108e:	4b77      	ldr	r3, [pc, #476]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
 8001090:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001092:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001094:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001098:	2a10      	cmp	r2, #16
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_OscConfig+0x100>
 800109c:	2a18      	cmp	r2, #24
 800109e:	d10a      	bne.n	80010b6 <HAL_RCC_OscConfig+0x10e>
 80010a0:	f001 0203 	and.w	r2, r1, #3
 80010a4:	2a02      	cmp	r2, #2
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	039a      	lsls	r2, r3, #14
 80010ac:	d58d      	bpl.n	8000fca <HAL_RCC_OscConfig+0x22>
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d18a      	bne.n	8000fca <HAL_RCC_OscConfig+0x22>
 80010b4:	e77b      	b.n	8000fae <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	6863      	ldr	r3, [r4, #4]
 80010b8:	4d6c      	ldr	r5, [pc, #432]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d112      	bne.n	80010e6 <HAL_RCC_OscConfig+0x13e>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010c8:	f7ff fb42 	bl	8000750 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010cc:	4d67      	ldr	r5, [pc, #412]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 80010ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	039b      	lsls	r3, r3, #14
 80010d4:	f53f af79 	bmi.w	8000fca <HAL_RCC_OscConfig+0x22>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fb3a 	bl	8000750 <HAL_GetTick>
 80010dc:	1b80      	subs	r0, r0, r6
 80010de:	2864      	cmp	r0, #100	; 0x64
 80010e0:	d9f6      	bls.n	80010d0 <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e6:	b9a3      	cbnz	r3, 8001112 <HAL_RCC_OscConfig+0x16a>
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ee:	602b      	str	r3, [r5, #0]
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb2a 	bl	8000750 <HAL_GetTick>
 80010fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	039f      	lsls	r7, r3, #14
 8001102:	f57f af62 	bpl.w	8000fca <HAL_RCC_OscConfig+0x22>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fb23 	bl	8000750 <HAL_GetTick>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	2864      	cmp	r0, #100	; 0x64
 800110e:	d9f6      	bls.n	80010fe <HAL_RCC_OscConfig+0x156>
 8001110:	e7e7      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001112:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	d103      	bne.n	8001122 <HAL_RCC_OscConfig+0x17a>
 800111a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111e:	602b      	str	r3, [r5, #0]
 8001120:	e7ce      	b.n	80010c0 <HAL_RCC_OscConfig+0x118>
 8001122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001126:	602b      	str	r3, [r5, #0]
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	e7ca      	b.n	80010c6 <HAL_RCC_OscConfig+0x11e>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001130:	68e2      	ldr	r2, [r4, #12]
 8001132:	2a19      	cmp	r2, #25
 8001134:	d803      	bhi.n	800113e <HAL_RCC_OscConfig+0x196>
 8001136:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <HAL_RCC_OscConfig+0x2c8>)
 8001138:	40d3      	lsrs	r3, r2
 800113a:	07d8      	lsls	r0, r3, #31
 800113c:	d404      	bmi.n	8001148 <HAL_RCC_OscConfig+0x1a0>
 800113e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001142:	4849      	ldr	r0, [pc, #292]	; (8001268 <HAL_RCC_OscConfig+0x2c0>)
 8001144:	f003 ffbc 	bl	80050c0 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001148:	6923      	ldr	r3, [r4, #16]
 800114a:	2b7f      	cmp	r3, #127	; 0x7f
 800114c:	d904      	bls.n	8001158 <HAL_RCC_OscConfig+0x1b0>
 800114e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001152:	4845      	ldr	r0, [pc, #276]	; (8001268 <HAL_RCC_OscConfig+0x2c0>)
 8001154:	f003 ffb4 	bl	80050c0 <assert_failed>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001158:	4b44      	ldr	r3, [pc, #272]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
 800115a:	68e2      	ldr	r2, [r4, #12]
 800115c:	6919      	ldr	r1, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800115e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001160:	f011 0138 	ands.w	r1, r1, #56	; 0x38
 8001164:	d003      	beq.n	800116e <HAL_RCC_OscConfig+0x1c6>
 8001166:	2918      	cmp	r1, #24
 8001168:	d12b      	bne.n	80011c2 <HAL_RCC_OscConfig+0x21a>
 800116a:	0781      	lsls	r1, r0, #30
 800116c:	d129      	bne.n	80011c2 <HAL_RCC_OscConfig+0x21a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	075b      	lsls	r3, r3, #29
 8001172:	d502      	bpl.n	800117a <HAL_RCC_OscConfig+0x1d2>
 8001174:	2a00      	cmp	r2, #0
 8001176:	f43f af1a 	beq.w	8000fae <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800117a:	4d3c      	ldr	r5, [pc, #240]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	f023 0319 	bic.w	r3, r3, #25
 8001182:	4313      	orrs	r3, r2
 8001184:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001186:	f7ff fae3 	bl	8000750 <HAL_GetTick>
 800118a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	075f      	lsls	r7, r3, #29
 8001190:	d511      	bpl.n	80011b6 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	f7ff faf5 	bl	8000780 <HAL_GetREVID>
 8001196:	f241 0303 	movw	r3, #4099	; 0x1003
 800119a:	6922      	ldr	r2, [r4, #16]
 800119c:	4298      	cmp	r0, r3
 800119e:	686b      	ldr	r3, [r5, #4]
 80011a0:	bf95      	itete	ls
 80011a2:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 80011a6:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 80011aa:	ea43 3302 	orrls.w	r3, r3, r2, lsl #12
 80011ae:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
 80011b2:	606b      	str	r3, [r5, #4]
 80011b4:	e70d      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff facb 	bl	8000750 <HAL_GetTick>
 80011ba:	1b80      	subs	r0, r0, r6
 80011bc:	2802      	cmp	r0, #2
 80011be:	d9e5      	bls.n	800118c <HAL_RCC_OscConfig+0x1e4>
 80011c0:	e78f      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
 80011c2:	4d2a      	ldr	r5, [pc, #168]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011c4:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c6:	b17a      	cbz	r2, 80011e8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011c8:	f023 0319 	bic.w	r3, r3, #25
 80011cc:	4313      	orrs	r3, r2
 80011ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011d0:	f7ff fabe 	bl	8000750 <HAL_GetTick>
 80011d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	0758      	lsls	r0, r3, #29
 80011da:	d4da      	bmi.n	8001192 <HAL_RCC_OscConfig+0x1ea>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fab8 	bl	8000750 <HAL_GetTick>
 80011e0:	1b80      	subs	r0, r0, r6
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d9f7      	bls.n	80011d6 <HAL_RCC_OscConfig+0x22e>
 80011e6:	e77c      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011ee:	f7ff faaf 	bl	8000750 <HAL_GetTick>
 80011f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	0759      	lsls	r1, r3, #29
 80011f8:	f57f aeeb 	bpl.w	8000fd2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff faa8 	bl	8000750 <HAL_GetTick>
 8001200:	1b80      	subs	r0, r0, r6
 8001202:	2802      	cmp	r0, #2
 8001204:	d9f6      	bls.n	80011f4 <HAL_RCC_OscConfig+0x24c>
 8001206:	e76c      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001208:	68d3      	ldr	r3, [r2, #12]
 800120a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800120e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001212:	60d3      	str	r3, [r2, #12]
 8001214:	e715      	b.n	8001042 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001216:	69e3      	ldr	r3, [r4, #28]
 8001218:	4d14      	ldr	r5, [pc, #80]	; (800126c <HAL_RCC_OscConfig+0x2c4>)
 800121a:	b35b      	cbz	r3, 8001274 <HAL_RCC_OscConfig+0x2cc>
        __HAL_RCC_CSI_ENABLE();
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001222:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001224:	f7ff fa94 	bl	8000750 <HAL_GetTick>
 8001228:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	05df      	lsls	r7, r3, #23
 800122e:	d50d      	bpl.n	800124c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001230:	f7ff faa6 	bl	8000780 <HAL_GetREVID>
 8001234:	f241 0303 	movw	r3, #4099	; 0x1003
 8001238:	6a22      	ldr	r2, [r4, #32]
 800123a:	4298      	cmp	r0, r3
 800123c:	d80c      	bhi.n	8001258 <HAL_RCC_OscConfig+0x2b0>
 800123e:	686b      	ldr	r3, [r5, #4]
 8001240:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001244:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001248:	606b      	str	r3, [r5, #4]
 800124a:	e6fa      	b.n	8001042 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800124c:	f7ff fa80 	bl	8000750 <HAL_GetTick>
 8001250:	1b80      	subs	r0, r0, r6
 8001252:	2802      	cmp	r0, #2
 8001254:	d9e9      	bls.n	800122a <HAL_RCC_OscConfig+0x282>
 8001256:	e744      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001258:	68eb      	ldr	r3, [r5, #12]
 800125a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800125e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001262:	60eb      	str	r3, [r5, #12]
 8001264:	e6ed      	b.n	8001042 <HAL_RCC_OscConfig+0x9a>
 8001266:	bf00      	nop
 8001268:	08006803 	.word	0x08006803
 800126c:	58024400 	.word	0x58024400
 8001270:	02020203 	.word	0x02020203
        __HAL_RCC_CSI_DISABLE();
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800127a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800127c:	f7ff fa68 	bl	8000750 <HAL_GetTick>
 8001280:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	05d8      	lsls	r0, r3, #23
 8001286:	f57f aedc 	bpl.w	8001042 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800128a:	f7ff fa61 	bl	8000750 <HAL_GetTick>
 800128e:	1b80      	subs	r0, r0, r6
 8001290:	2802      	cmp	r0, #2
 8001292:	d9f6      	bls.n	8001282 <HAL_RCC_OscConfig+0x2da>
 8001294:	e725      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001296:	6963      	ldr	r3, [r4, #20]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d904      	bls.n	80012a6 <HAL_RCC_OscConfig+0x2fe>
 800129c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80012a0:	48b1      	ldr	r0, [pc, #708]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 80012a2:	f003 ff0d 	bl	80050c0 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012a6:	6963      	ldr	r3, [r4, #20]
 80012a8:	4db0      	ldr	r5, [pc, #704]	; (800156c <HAL_RCC_OscConfig+0x5c4>)
 80012aa:	b183      	cbz	r3, 80012ce <HAL_RCC_OscConfig+0x326>
      __HAL_RCC_LSI_ENABLE();
 80012ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012b4:	f7ff fa4c 	bl	8000750 <HAL_GetTick>
 80012b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012bc:	079b      	lsls	r3, r3, #30
 80012be:	f53f aec4 	bmi.w	800104a <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fa45 	bl	8000750 <HAL_GetTick>
 80012c6:	1b80      	subs	r0, r0, r6
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d9f6      	bls.n	80012ba <HAL_RCC_OscConfig+0x312>
 80012cc:	e709      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 80012ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012d6:	f7ff fa3b 	bl	8000750 <HAL_GetTick>
 80012da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012de:	079f      	lsls	r7, r3, #30
 80012e0:	f57f aeb3 	bpl.w	800104a <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff fa34 	bl	8000750 <HAL_GetTick>
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f6      	bls.n	80012dc <HAL_RCC_OscConfig+0x334>
 80012ee:	e6f8      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80012f0:	69a3      	ldr	r3, [r4, #24]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d904      	bls.n	8001300 <HAL_RCC_OscConfig+0x358>
 80012f6:	f240 2167 	movw	r1, #615	; 0x267
 80012fa:	489b      	ldr	r0, [pc, #620]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 80012fc:	f003 fee0 	bl	80050c0 <assert_failed>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001300:	69a3      	ldr	r3, [r4, #24]
 8001302:	4d9a      	ldr	r5, [pc, #616]	; (800156c <HAL_RCC_OscConfig+0x5c4>)
 8001304:	b183      	cbz	r3, 8001328 <HAL_RCC_OscConfig+0x380>
      __HAL_RCC_HSI48_ENABLE();
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800130e:	f7ff fa1f 	bl	8000750 <HAL_GetTick>
 8001312:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	0498      	lsls	r0, r3, #18
 8001318:	f53f ae9b 	bmi.w	8001052 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800131c:	f7ff fa18 	bl	8000750 <HAL_GetTick>
 8001320:	1b80      	subs	r0, r0, r6
 8001322:	2802      	cmp	r0, #2
 8001324:	d9f6      	bls.n	8001314 <HAL_RCC_OscConfig+0x36c>
 8001326:	e6dc      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSI48_DISABLE();
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800132e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001330:	f7ff fa0e 	bl	8000750 <HAL_GetTick>
 8001334:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	0499      	lsls	r1, r3, #18
 800133a:	f57f ae8a 	bpl.w	8001052 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800133e:	f7ff fa07 	bl	8000750 <HAL_GetTick>
 8001342:	1b80      	subs	r0, r0, r6
 8001344:	2802      	cmp	r0, #2
 8001346:	d9f6      	bls.n	8001336 <HAL_RCC_OscConfig+0x38e>
 8001348:	e6cb      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800134a:	68a3      	ldr	r3, [r4, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d906      	bls.n	800135e <HAL_RCC_OscConfig+0x3b6>
 8001350:	2b05      	cmp	r3, #5
 8001352:	d004      	beq.n	800135e <HAL_RCC_OscConfig+0x3b6>
 8001354:	f240 2191 	movw	r1, #657	; 0x291
 8001358:	4883      	ldr	r0, [pc, #524]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 800135a:	f003 feb1 	bl	80050c0 <assert_failed>
    PWR->CR1 |= PWR_CR1_DBP;
 800135e:	4d84      	ldr	r5, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x5c8>)
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001368:	f7ff f9f2 	bl	8000750 <HAL_GetTick>
 800136c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	05da      	lsls	r2, r3, #23
 8001372:	d517      	bpl.n	80013a4 <HAL_RCC_OscConfig+0x3fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	68a3      	ldr	r3, [r4, #8]
 8001376:	4d7d      	ldr	r5, [pc, #500]	; (800156c <HAL_RCC_OscConfig+0x5c4>)
 8001378:	2b01      	cmp	r3, #1
 800137a:	d119      	bne.n	80013b0 <HAL_RCC_OscConfig+0x408>
 800137c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001388:	f7ff f9e2 	bl	8000750 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800138c:	4e77      	ldr	r6, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x5c4>)
      tickstart = HAL_GetTick();
 800138e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001390:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001392:	079b      	lsls	r3, r3, #30
 8001394:	f53f ae61 	bmi.w	800105a <HAL_RCC_OscConfig+0xb2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff f9da 	bl	8000750 <HAL_GetTick>
 800139c:	1bc0      	subs	r0, r0, r7
 800139e:	42a8      	cmp	r0, r5
 80013a0:	d9f6      	bls.n	8001390 <HAL_RCC_OscConfig+0x3e8>
 80013a2:	e69e      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013a4:	f7ff f9d4 	bl	8000750 <HAL_GetTick>
 80013a8:	1b80      	subs	r0, r0, r6
 80013aa:	2864      	cmp	r0, #100	; 0x64
 80013ac:	d9df      	bls.n	800136e <HAL_RCC_OscConfig+0x3c6>
 80013ae:	e698      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b0:	b9b3      	cbnz	r3, 80013e0 <HAL_RCC_OscConfig+0x438>
 80013b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	672b      	str	r3, [r5, #112]	; 0x70
 80013be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013c6:	f7ff f9c3 	bl	8000750 <HAL_GetTick>
 80013ca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013ce:	0798      	lsls	r0, r3, #30
 80013d0:	f57f ae43 	bpl.w	800105a <HAL_RCC_OscConfig+0xb2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f7ff f9bc 	bl	8000750 <HAL_GetTick>
 80013d8:	1b80      	subs	r0, r0, r6
 80013da:	42b8      	cmp	r0, r7
 80013dc:	d9f6      	bls.n	80013cc <HAL_RCC_OscConfig+0x424>
 80013de:	e680      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013e4:	d103      	bne.n	80013ee <HAL_RCC_OscConfig+0x446>
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	672b      	str	r3, [r5, #112]	; 0x70
 80013ec:	e7c6      	b.n	800137c <HAL_RCC_OscConfig+0x3d4>
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	672b      	str	r3, [r5, #112]	; 0x70
 80013f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f6:	f023 0304 	bic.w	r3, r3, #4
 80013fa:	e7c2      	b.n	8001382 <HAL_RCC_OscConfig+0x3da>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80013fc:	4d5b      	ldr	r5, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x5c4>)
 80013fe:	692b      	ldr	r3, [r5, #16]
 8001400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001404:	2b18      	cmp	r3, #24
 8001406:	f43f add2 	beq.w	8000fae <HAL_RCC_OscConfig+0x6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	2a02      	cmp	r2, #2
 800140c:	f040 80b2 	bne.w	8001574 <HAL_RCC_OscConfig+0x5cc>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001410:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001412:	2b03      	cmp	r3, #3
 8001414:	d904      	bls.n	8001420 <HAL_RCC_OscConfig+0x478>
 8001416:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800141a:	4853      	ldr	r0, [pc, #332]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 800141c:	f003 fe50 	bl	80050c0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001420:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001422:	3b01      	subs	r3, #1
 8001424:	2b3e      	cmp	r3, #62	; 0x3e
 8001426:	d904      	bls.n	8001432 <HAL_RCC_OscConfig+0x48a>
 8001428:	f240 21cd 	movw	r1, #717	; 0x2cd
 800142c:	484e      	ldr	r0, [pc, #312]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 800142e:	f003 fe47 	bl	80050c0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001432:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001434:	3b04      	subs	r3, #4
 8001436:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 800143a:	d904      	bls.n	8001446 <HAL_RCC_OscConfig+0x49e>
 800143c:	f240 21ce 	movw	r1, #718	; 0x2ce
 8001440:	4849      	ldr	r0, [pc, #292]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 8001442:	f003 fe3d 	bl	80050c0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001448:	3b01      	subs	r3, #1
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d904      	bls.n	8001458 <HAL_RCC_OscConfig+0x4b0>
 800144e:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001452:	4845      	ldr	r0, [pc, #276]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 8001454:	f003 fe34 	bl	80050c0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001458:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800145a:	3b01      	subs	r3, #1
 800145c:	2b7f      	cmp	r3, #127	; 0x7f
 800145e:	d904      	bls.n	800146a <HAL_RCC_OscConfig+0x4c2>
 8001460:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001464:	4840      	ldr	r0, [pc, #256]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 8001466:	f003 fe2b 	bl	80050c0 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800146a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800146c:	3b01      	subs	r3, #1
 800146e:	2b7f      	cmp	r3, #127	; 0x7f
 8001470:	d904      	bls.n	800147c <HAL_RCC_OscConfig+0x4d4>
 8001472:	f240 21d1 	movw	r1, #721	; 0x2d1
 8001476:	483c      	ldr	r0, [pc, #240]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 8001478:	f003 fe22 	bl	80050c0 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 800147c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800147e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001482:	d304      	bcc.n	800148e <HAL_RCC_OscConfig+0x4e6>
 8001484:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001488:	4837      	ldr	r0, [pc, #220]	; (8001568 <HAL_RCC_OscConfig+0x5c0>)
 800148a:	f003 fe19 	bl	80050c0 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800148e:	4d37      	ldr	r5, [pc, #220]	; (800156c <HAL_RCC_OscConfig+0x5c4>)
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001496:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001498:	f7ff f95a 	bl	8000750 <HAL_GetTick>
 800149c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	0199      	lsls	r1, r3, #6
 80014a2:	d45b      	bmi.n	800155c <HAL_RCC_OscConfig+0x5b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014a8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014b4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80014b8:	62ab      	str	r3, [r5, #40]	; 0x28
 80014ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014be:	3b01      	subs	r3, #1
 80014c0:	3a01      	subs	r2, #1
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	0412      	lsls	r2, r2, #16
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80014cc:	4313      	orrs	r3, r2
 80014ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014d0:	3a01      	subs	r2, #1
 80014d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014d6:	4313      	orrs	r3, r2
 80014d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80014da:	3a01      	subs	r2, #1
 80014dc:	0612      	lsls	r2, r2, #24
 80014de:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80014e2:	4313      	orrs	r3, r2
 80014e4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80014e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80014f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80014f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014fe:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001500:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001502:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001504:	f023 030c 	bic.w	r3, r3, #12
 8001508:	4313      	orrs	r3, r2
 800150a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800150c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800150e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001510:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001514:	4c15      	ldr	r4, [pc, #84]	; (800156c <HAL_RCC_OscConfig+0x5c4>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001516:	4313      	orrs	r3, r2
 8001518:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800151a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001522:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800152a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001530:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001532:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001540:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001542:	f7ff f905 	bl	8000750 <HAL_GetTick>
 8001546:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	019a      	lsls	r2, r3, #6
 800154c:	f53f ad91 	bmi.w	8001072 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff f8fe 	bl	8000750 <HAL_GetTick>
 8001554:	1b40      	subs	r0, r0, r5
 8001556:	2802      	cmp	r0, #2
 8001558:	d9f6      	bls.n	8001548 <HAL_RCC_OscConfig+0x5a0>
 800155a:	e5c2      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff f8f8 	bl	8000750 <HAL_GetTick>
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	2802      	cmp	r0, #2
 8001564:	d99b      	bls.n	800149e <HAL_RCC_OscConfig+0x4f6>
 8001566:	e5bc      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
 8001568:	08006803 	.word	0x08006803
 800156c:	58024400 	.word	0x58024400
 8001570:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800157c:	f7ff f8e8 	bl	8000750 <HAL_GetTick>
 8001580:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	f57f ad74 	bpl.w	8001072 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff f8e1 	bl	8000750 <HAL_GetTick>
 800158e:	1b00      	subs	r0, r0, r4
 8001590:	2802      	cmp	r0, #2
 8001592:	d9f6      	bls.n	8001582 <HAL_RCC_OscConfig+0x5da>
 8001594:	e5a5      	b.n	80010e2 <HAL_RCC_OscConfig+0x13a>
 8001596:	bf00      	nop

08001598 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HAL_RCC_GetSysClockFreq+0x124>)
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80015a0:	2a10      	cmp	r2, #16
{
 80015a2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a4:	d00e      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80015a6:	2a18      	cmp	r2, #24
 80015a8:	d00e      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x30>
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	f040 8083 	bne.w	80016b6 <HAL_RCC_GetSysClockFreq+0x11e>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4843      	ldr	r0, [pc, #268]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x128>)
 80015b4:	f012 0f20 	tst.w	r2, #32
 80015b8:	d07e      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x120>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80015c0:	40d8      	lsrs	r0, r3
 80015c2:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80015c4:	483f      	ldr	r0, [pc, #252]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80015c6:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015ce:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015d2:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d06f      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x120>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015d8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015dc:	f002 0201 	and.w	r2, r2, #1
 80015e0:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80016c8 <HAL_RCC_GetSysClockFreq+0x130>
 80015e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015e8:	4362      	muls	r2, r4
 80015ea:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015ee:	f001 0203 	and.w	r2, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015f2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    {
      switch (pllsource)
 80015f6:	2a01      	cmp	r2, #1
 80015f8:	ee07 0a90 	vmov	s15, r0
 80015fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001600:	d002      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x70>
 8001602:	d30f      	bcc.n	8001624 <HAL_RCC_GetSysClockFreq+0x8c>
 8001604:	2a02      	cmp	r2, #2
 8001606:	d048      	beq.n	800169a <HAL_RCC_GetSysClockFreq+0x102>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	eee6 7a05 	vfma.f32	s15, s12, s10
 800161a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80016cc <HAL_RCC_GetSysClockFreq+0x134>
 800161e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001622:	e037      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0xfc>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	0692      	lsls	r2, r2, #26
 8001628:	d527      	bpl.n	800167a <HAL_RCC_GetSysClockFreq+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x128>)
 800162e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001634:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163a:	ee07 2a90 	vmov	s15, r2
 800163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164e:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001652:	ee77 7aa5 	vadd.f32	s15, s15, s11
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001658:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001662:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001664:	ee07 3a10 	vmov	s14, r3
 8001668:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800166c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001670:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001674:	ee17 0a90 	vmov	r0, s15
 8001678:	bd10      	pop	{r4, pc}
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001688:	eee6 7a05 	vfma.f32	s15, s12, s10
 800168c:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80016d0 <HAL_RCC_GetSysClockFreq+0x138>
 8001690:	ee77 7aa5 	vadd.f32	s15, s15, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001694:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001698:	e7dd      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0xbe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a8:	eee6 7a05 	vfma.f32	s15, s12, s10
 80016ac:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80016d4 <HAL_RCC_GetSysClockFreq+0x13c>
 80016b0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80016b4:	e7ee      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0xfc>
    sysclockfreq = CSI_VALUE;
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x140>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	bf00      	nop
 80016bc:	58024400 	.word	0x58024400
 80016c0:	03d09000 	.word	0x03d09000
 80016c4:	007a1200 	.word	0x007a1200
 80016c8:	39000000 	.word	0x39000000
 80016cc:	4a742400 	.word	0x4a742400
 80016d0:	4c742400 	.word	0x4c742400
 80016d4:	4af42400 	.word	0x4af42400
 80016d8:	003d0900 	.word	0x003d0900

080016dc <HAL_RCC_ClockConfig>:
{
 80016dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016e0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80016e2:	4604      	mov	r4, r0
 80016e4:	b910      	cbnz	r0, 80016ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
 80016e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80016ec:	6803      	ldr	r3, [r0, #0]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	2b3e      	cmp	r3, #62	; 0x3e
 80016f2:	d904      	bls.n	80016fe <HAL_RCC_ClockConfig+0x22>
 80016f4:	f240 3152 	movw	r1, #850	; 0x352
 80016f8:	48b2      	ldr	r0, [pc, #712]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 80016fa:	f003 fce1 	bl	80050c0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80016fe:	2d0f      	cmp	r5, #15
 8001700:	d904      	bls.n	800170c <HAL_RCC_ClockConfig+0x30>
 8001702:	f240 3153 	movw	r1, #851	; 0x353
 8001706:	48af      	ldr	r0, [pc, #700]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 8001708:	f003 fcda 	bl	80050c0 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4aae      	ldr	r2, [pc, #696]	; (80019c8 <HAL_RCC_ClockConfig+0x2ec>)
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	429d      	cmp	r5, r3
 8001716:	f200 80e4 	bhi.w	80018e2 <HAL_RCC_ClockConfig+0x206>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	075e      	lsls	r6, r3, #29
 800171e:	f100 80ec 	bmi.w	80018fa <HAL_RCC_ClockConfig+0x21e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	0718      	lsls	r0, r3, #28
 8001726:	d515      	bpl.n	8001754 <HAL_RCC_ClockConfig+0x78>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001728:	4ea8      	ldr	r6, [pc, #672]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 800172a:	6963      	ldr	r3, [r4, #20]
 800172c:	69f2      	ldr	r2, [r6, #28]
 800172e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001732:	4293      	cmp	r3, r2
 8001734:	d90e      	bls.n	8001754 <HAL_RCC_ClockConfig+0x78>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8001736:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d004      	beq.n	8001748 <HAL_RCC_ClockConfig+0x6c>
 800173e:	f44f 715e 	mov.w	r1, #888	; 0x378
 8001742:	48a0      	ldr	r0, [pc, #640]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 8001744:	f003 fcbc 	bl	80050c0 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001748:	69f3      	ldr	r3, [r6, #28]
 800174a:	6962      	ldr	r2, [r4, #20]
 800174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001750:	4313      	orrs	r3, r2
 8001752:	61f3      	str	r3, [r6, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	06d9      	lsls	r1, r3, #27
 8001758:	d516      	bpl.n	8001788 <HAL_RCC_ClockConfig+0xac>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800175a:	4e9c      	ldr	r6, [pc, #624]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 800175c:	69a3      	ldr	r3, [r4, #24]
 800175e:	69f2      	ldr	r2, [r6, #28]
 8001760:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001764:	4293      	cmp	r3, r2
 8001766:	d90f      	bls.n	8001788 <HAL_RCC_ClockConfig+0xac>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8001768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800176c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001770:	d004      	beq.n	800177c <HAL_RCC_ClockConfig+0xa0>
 8001772:	f240 3182 	movw	r1, #898	; 0x382
 8001776:	4893      	ldr	r0, [pc, #588]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 8001778:	f003 fca2 	bl	80050c0 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800177c:	69f3      	ldr	r3, [r6, #28]
 800177e:	69a2      	ldr	r2, [r4, #24]
 8001780:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001784:	4313      	orrs	r3, r2
 8001786:	61f3      	str	r3, [r6, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	069a      	lsls	r2, r3, #26
 800178c:	d515      	bpl.n	80017ba <HAL_RCC_ClockConfig+0xde>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800178e:	4e8f      	ldr	r6, [pc, #572]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 8001790:	69e3      	ldr	r3, [r4, #28]
 8001792:	6a32      	ldr	r2, [r6, #32]
 8001794:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001798:	4293      	cmp	r3, r2
 800179a:	d90e      	bls.n	80017ba <HAL_RCC_ClockConfig+0xde>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 800179c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017a0:	2b40      	cmp	r3, #64	; 0x40
 80017a2:	d004      	beq.n	80017ae <HAL_RCC_ClockConfig+0xd2>
 80017a4:	f44f 7163 	mov.w	r1, #908	; 0x38c
 80017a8:	4886      	ldr	r0, [pc, #536]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 80017aa:	f003 fc89 	bl	80050c0 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017ae:	6a33      	ldr	r3, [r6, #32]
 80017b0:	69e2      	ldr	r2, [r4, #28]
 80017b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b6:	4313      	orrs	r3, r2
 80017b8:	6233      	str	r3, [r6, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	079b      	lsls	r3, r3, #30
 80017be:	d514      	bpl.n	80017ea <HAL_RCC_ClockConfig+0x10e>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017c0:	4e82      	ldr	r6, [pc, #520]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 80017c2:	68e3      	ldr	r3, [r4, #12]
 80017c4:	69b2      	ldr	r2, [r6, #24]
 80017c6:	f002 020f 	and.w	r2, r2, #15
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d90d      	bls.n	80017ea <HAL_RCC_ClockConfig+0x10e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80017ce:	3b08      	subs	r3, #8
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d904      	bls.n	80017de <HAL_RCC_ClockConfig+0x102>
 80017d4:	f240 3197 	movw	r1, #919	; 0x397
 80017d8:	487a      	ldr	r0, [pc, #488]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 80017da:	f003 fc71 	bl	80050c0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017de:	69b3      	ldr	r3, [r6, #24]
 80017e0:	68e2      	ldr	r2, [r4, #12]
 80017e2:	f023 030f 	bic.w	r3, r3, #15
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61b3      	str	r3, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	07df      	lsls	r7, r3, #31
 80017ee:	f100 809c 	bmi.w	800192a <HAL_RCC_ClockConfig+0x24e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	079e      	lsls	r6, r3, #30
 80017f6:	f100 80fe 	bmi.w	80019f6 <HAL_RCC_ClockConfig+0x31a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017fa:	4a73      	ldr	r2, [pc, #460]	; (80019c8 <HAL_RCC_ClockConfig+0x2ec>)
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	429d      	cmp	r5, r3
 8001804:	f0c0 810f 	bcc.w	8001a26 <HAL_RCC_ClockConfig+0x34a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	0758      	lsls	r0, r3, #29
 800180c:	f100 8117 	bmi.w	8001a3e <HAL_RCC_ClockConfig+0x362>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	0719      	lsls	r1, r3, #28
 8001814:	d518      	bpl.n	8001848 <HAL_RCC_ClockConfig+0x16c>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001816:	4d6d      	ldr	r5, [pc, #436]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 8001818:	6963      	ldr	r3, [r4, #20]
 800181a:	69ea      	ldr	r2, [r5, #28]
 800181c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001820:	4293      	cmp	r3, r2
 8001822:	d211      	bcs.n	8001848 <HAL_RCC_ClockConfig+0x16c>
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8001824:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8001828:	d008      	beq.n	800183c <HAL_RCC_ClockConfig+0x160>
 800182a:	2b50      	cmp	r3, #80	; 0x50
 800182c:	d006      	beq.n	800183c <HAL_RCC_ClockConfig+0x160>
 800182e:	2b60      	cmp	r3, #96	; 0x60
 8001830:	d004      	beq.n	800183c <HAL_RCC_ClockConfig+0x160>
 8001832:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8001836:	4863      	ldr	r0, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 8001838:	f003 fc42 	bl	80050c0 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800183c:	69eb      	ldr	r3, [r5, #28]
 800183e:	6962      	ldr	r2, [r4, #20]
 8001840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001844:	4313      	orrs	r3, r2
 8001846:	61eb      	str	r3, [r5, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	06da      	lsls	r2, r3, #27
 800184c:	d51a      	bpl.n	8001884 <HAL_RCC_ClockConfig+0x1a8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800184e:	4d5f      	ldr	r5, [pc, #380]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 8001850:	69a3      	ldr	r3, [r4, #24]
 8001852:	69ea      	ldr	r2, [r5, #28]
 8001854:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001858:	4293      	cmp	r3, r2
 800185a:	d213      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x1a8>
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800185c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001860:	d00a      	beq.n	8001878 <HAL_RCC_ClockConfig+0x19c>
 8001862:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001866:	d007      	beq.n	8001878 <HAL_RCC_ClockConfig+0x19c>
 8001868:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800186c:	d004      	beq.n	8001878 <HAL_RCC_ClockConfig+0x19c>
 800186e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001872:	4854      	ldr	r0, [pc, #336]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 8001874:	f003 fc24 	bl	80050c0 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001878:	69eb      	ldr	r3, [r5, #28]
 800187a:	69a2      	ldr	r2, [r4, #24]
 800187c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001880:	4313      	orrs	r3, r2
 8001882:	61eb      	str	r3, [r5, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	069b      	lsls	r3, r3, #26
 8001888:	d518      	bpl.n	80018bc <HAL_RCC_ClockConfig+0x1e0>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800188a:	4d50      	ldr	r5, [pc, #320]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 800188c:	69e3      	ldr	r3, [r4, #28]
 800188e:	6a2a      	ldr	r2, [r5, #32]
 8001890:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001894:	4293      	cmp	r3, r2
 8001896:	d211      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x1e0>
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8001898:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800189c:	d008      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
 800189e:	2b50      	cmp	r3, #80	; 0x50
 80018a0:	d006      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
 80018a2:	2b60      	cmp	r3, #96	; 0x60
 80018a4:	d004      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
 80018a6:	f240 4112 	movw	r1, #1042	; 0x412
 80018aa:	4846      	ldr	r0, [pc, #280]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 80018ac:	f003 fc08 	bl	80050c0 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80018b0:	6a2b      	ldr	r3, [r5, #32]
 80018b2:	69e2      	ldr	r2, [r4, #28]
 80018b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b8:	4313      	orrs	r3, r2
 80018ba:	622b      	str	r3, [r5, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018bc:	f7ff fe6c 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 80018c0:	4b42      	ldr	r3, [pc, #264]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 80018c2:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <HAL_RCC_ClockConfig+0x2f4>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	40d8      	lsrs	r0, r3
 80018d2:	4b40      	ldr	r3, [pc, #256]	; (80019d4 <HAL_RCC_ClockConfig+0x2f8>)
 80018d4:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_RCC_ClockConfig+0x2fc>)
}
 80018d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f7fe bed7 	b.w	8000690 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	6813      	ldr	r3, [r2, #0]
 80018e4:	f023 030f 	bic.w	r3, r3, #15
 80018e8:	432b      	orrs	r3, r5
 80018ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	429d      	cmp	r5, r3
 80018f4:	f47f aef7 	bne.w	80016e6 <HAL_RCC_ClockConfig+0xa>
 80018f8:	e70f      	b.n	800171a <HAL_RCC_ClockConfig+0x3e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018fa:	4e34      	ldr	r6, [pc, #208]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 80018fc:	6923      	ldr	r3, [r4, #16]
 80018fe:	69b2      	ldr	r2, [r6, #24]
 8001900:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001904:	4293      	cmp	r3, r2
 8001906:	f67f af0c 	bls.w	8001722 <HAL_RCC_ClockConfig+0x46>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800190a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d004      	beq.n	800191c <HAL_RCC_ClockConfig+0x240>
 8001912:	f240 316e 	movw	r1, #878	; 0x36e
 8001916:	482b      	ldr	r0, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 8001918:	f003 fbd2 	bl	80050c0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800191c:	69b3      	ldr	r3, [r6, #24]
 800191e:	6922      	ldr	r2, [r4, #16]
 8001920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001924:	4313      	orrs	r3, r2
 8001926:	61b3      	str	r3, [r6, #24]
 8001928:	e6fb      	b.n	8001722 <HAL_RCC_ClockConfig+0x46>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800192a:	68a3      	ldr	r3, [r4, #8]
 800192c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8001930:	d016      	beq.n	8001960 <HAL_RCC_ClockConfig+0x284>
 8001932:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001936:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 800193a:	d011      	beq.n	8001960 <HAL_RCC_ClockConfig+0x284>
 800193c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001940:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8001944:	d00c      	beq.n	8001960 <HAL_RCC_ClockConfig+0x284>
 8001946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800194a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800194e:	d007      	beq.n	8001960 <HAL_RCC_ClockConfig+0x284>
 8001950:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001954:	d004      	beq.n	8001960 <HAL_RCC_ClockConfig+0x284>
 8001956:	f240 319f 	movw	r1, #927	; 0x39f
 800195a:	481a      	ldr	r0, [pc, #104]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 800195c:	f003 fbb0 	bl	80050c0 <assert_failed>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d904      	bls.n	8001970 <HAL_RCC_ClockConfig+0x294>
 8001966:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 800196a:	4816      	ldr	r0, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x2e8>)
 800196c:	f003 fba8 	bl	80050c0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
 8001972:	68a1      	ldr	r1, [r4, #8]
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800197a:	430a      	orrs	r2, r1
 800197c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001980:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	2902      	cmp	r1, #2
 8001984:	d12a      	bne.n	80019dc <HAL_RCC_ClockConfig+0x300>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001986:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800198a:	f43f aeac 	beq.w	80016e6 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800198e:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001994:	4e0d      	ldr	r6, [pc, #52]	; (80019cc <HAL_RCC_ClockConfig+0x2f0>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001996:	f022 0207 	bic.w	r2, r2, #7
 800199a:	430a      	orrs	r2, r1
 800199c:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800199e:	f7fe fed7 	bl	8000750 <HAL_GetTick>
 80019a2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a4:	6933      	ldr	r3, [r6, #16]
 80019a6:	6862      	ldr	r2, [r4, #4]
 80019a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80019b0:	f43f af1f 	beq.w	80017f2 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b4:	f7fe fecc 	bl	8000750 <HAL_GetTick>
 80019b8:	1bc0      	subs	r0, r0, r7
 80019ba:	4540      	cmp	r0, r8
 80019bc:	d9f2      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x2c8>
            return HAL_TIMEOUT;
 80019be:	2003      	movs	r0, #3
}
 80019c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019c4:	08006803 	.word	0x08006803
 80019c8:	52002000 	.word	0x52002000
 80019cc:	58024400 	.word	0x58024400
 80019d0:	08006989 	.word	0x08006989
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000004 	.word	0x20000004
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019dc:	2903      	cmp	r1, #3
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x30a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019e0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80019e4:	e7d1      	b.n	800198a <HAL_RCC_ClockConfig+0x2ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019e6:	2901      	cmp	r1, #1
 80019e8:	d102      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x314>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80019ee:	e7cc      	b.n	800198a <HAL_RCC_ClockConfig+0x2ae>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f0:	f012 0f04 	tst.w	r2, #4
 80019f4:	e7c9      	b.n	800198a <HAL_RCC_ClockConfig+0x2ae>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019f6:	4e1f      	ldr	r6, [pc, #124]	; (8001a74 <HAL_RCC_ClockConfig+0x398>)
 80019f8:	68e3      	ldr	r3, [r4, #12]
 80019fa:	69b2      	ldr	r2, [r6, #24]
 80019fc:	f002 020f 	and.w	r2, r2, #15
 8001a00:	4293      	cmp	r3, r2
 8001a02:	f4bf aefa 	bcs.w	80017fa <HAL_RCC_ClockConfig+0x11e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001a06:	b13b      	cbz	r3, 8001a18 <HAL_RCC_ClockConfig+0x33c>
 8001a08:	3b08      	subs	r3, #8
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d904      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x33c>
 8001a0e:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8001a12:	4819      	ldr	r0, [pc, #100]	; (8001a78 <HAL_RCC_ClockConfig+0x39c>)
 8001a14:	f003 fb54 	bl	80050c0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	69b3      	ldr	r3, [r6, #24]
 8001a1a:	68e2      	ldr	r2, [r4, #12]
 8001a1c:	f023 030f 	bic.w	r3, r3, #15
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61b3      	str	r3, [r6, #24]
 8001a24:	e6e9      	b.n	80017fa <HAL_RCC_ClockConfig+0x11e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	6813      	ldr	r3, [r2, #0]
 8001a28:	f023 030f 	bic.w	r3, r3, #15
 8001a2c:	432b      	orrs	r3, r5
 8001a2e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	429d      	cmp	r5, r3
 8001a38:	f47f ae55 	bne.w	80016e6 <HAL_RCC_ClockConfig+0xa>
 8001a3c:	e6e4      	b.n	8001808 <HAL_RCC_ClockConfig+0x12c>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a3e:	4d0d      	ldr	r5, [pc, #52]	; (8001a74 <HAL_RCC_ClockConfig+0x398>)
 8001a40:	6923      	ldr	r3, [r4, #16]
 8001a42:	69aa      	ldr	r2, [r5, #24]
 8001a44:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	f4bf aee1 	bcs.w	8001810 <HAL_RCC_ClockConfig+0x134>
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8001a4e:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x38a>
 8001a54:	2b50      	cmp	r3, #80	; 0x50
 8001a56:	d006      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x38a>
 8001a58:	2b60      	cmp	r3, #96	; 0x60
 8001a5a:	d004      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x38a>
 8001a5c:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_RCC_ClockConfig+0x39c>)
 8001a62:	f003 fb2d 	bl	80050c0 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a66:	69ab      	ldr	r3, [r5, #24]
 8001a68:	6922      	ldr	r2, [r4, #16]
 8001a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61ab      	str	r3, [r5, #24]
 8001a72:	e6cd      	b.n	8001810 <HAL_RCC_ClockConfig+0x134>
 8001a74:	58024400 	.word	0x58024400
 8001a78:	08006803 	.word	0x08006803

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a7e:	f001 f83f 	bl	8002b00 <HAL_RCCEx_GetD1SysClockFreq>
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x20>)
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	40d8      	lsrs	r0, r3
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_RCC_GetHCLKFreq+0x28>)
 8001a96:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001a98:	bd08      	pop	{r3, pc}
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	08006989 	.word	0x08006989
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001aaa:	f7ff ffe7 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	f003 031f 	and.w	r3, r3, #31
}
 8001abe:	40d8      	lsrs	r0, r3
 8001ac0:	bd08      	pop	{r3, pc}
 8001ac2:	bf00      	nop
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	08006989 	.word	0x08006989

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001acc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001ace:	f7ff ffd5 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ad4:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001adc:	5cd3      	ldrb	r3, [r2, r3]
 8001ade:	f003 031f 	and.w	r3, r3, #31
}
 8001ae2:	40d8      	lsrs	r0, r3
 8001ae4:	bd08      	pop	{r3, pc}
 8001ae6:	bf00      	nop
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	08006989 	.word	0x08006989

08001af0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8001af2:	6803      	ldr	r3, [r0, #0]
{
 8001af4:	4605      	mov	r5, r0
 8001af6:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8001af8:	3b01      	subs	r3, #1
 8001afa:	2b3e      	cmp	r3, #62	; 0x3e
 8001afc:	d904      	bls.n	8001b08 <RCCEx_PLL2_Config+0x18>
 8001afe:	f640 2186 	movw	r1, #2694	; 0xa86
 8001b02:	485a      	ldr	r0, [pc, #360]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b04:	f003 fadc 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8001b08:	686b      	ldr	r3, [r5, #4]
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8001b10:	d904      	bls.n	8001b1c <RCCEx_PLL2_Config+0x2c>
 8001b12:	f640 2187 	movw	r1, #2695	; 0xa87
 8001b16:	4855      	ldr	r0, [pc, #340]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b18:	f003 fad2 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8001b1c:	68ab      	ldr	r3, [r5, #8]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	2b7f      	cmp	r3, #127	; 0x7f
 8001b22:	d904      	bls.n	8001b2e <RCCEx_PLL2_Config+0x3e>
 8001b24:	f640 2188 	movw	r1, #2696	; 0xa88
 8001b28:	4850      	ldr	r0, [pc, #320]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b2a:	f003 fac9 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8001b2e:	692b      	ldr	r3, [r5, #16]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	2b7f      	cmp	r3, #127	; 0x7f
 8001b34:	d904      	bls.n	8001b40 <RCCEx_PLL2_Config+0x50>
 8001b36:	f640 2189 	movw	r1, #2697	; 0xa89
 8001b3a:	484c      	ldr	r0, [pc, #304]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b3c:	f003 fac0 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8001b40:	68eb      	ldr	r3, [r5, #12]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	2b7f      	cmp	r3, #127	; 0x7f
 8001b46:	d904      	bls.n	8001b52 <RCCEx_PLL2_Config+0x62>
 8001b48:	f640 218a 	movw	r1, #2698	; 0xa8a
 8001b4c:	4847      	ldr	r0, [pc, #284]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b4e:	f003 fab7 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8001b52:	696b      	ldr	r3, [r5, #20]
 8001b54:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8001b58:	d004      	beq.n	8001b64 <RCCEx_PLL2_Config+0x74>
 8001b5a:	f640 218b 	movw	r1, #2699	; 0xa8b
 8001b5e:	4843      	ldr	r0, [pc, #268]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b60:	f003 faae 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8001b64:	69ab      	ldr	r3, [r5, #24]
 8001b66:	f033 0320 	bics.w	r3, r3, #32
 8001b6a:	d004      	beq.n	8001b76 <RCCEx_PLL2_Config+0x86>
 8001b6c:	f640 218c 	movw	r1, #2700	; 0xa8c
 8001b70:	483e      	ldr	r0, [pc, #248]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b72:	f003 faa5 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8001b76:	69eb      	ldr	r3, [r5, #28]
 8001b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7c:	d304      	bcc.n	8001b88 <RCCEx_PLL2_Config+0x98>
 8001b7e:	f640 218d 	movw	r1, #2701	; 0xa8d
 8001b82:	483a      	ldr	r0, [pc, #232]	; (8001c6c <RCCEx_PLL2_Config+0x17c>)
 8001b84:	f003 fa9c 	bl	80050c0 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001b88:	4c39      	ldr	r4, [pc, #228]	; (8001c70 <RCCEx_PLL2_Config+0x180>)
 8001b8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d069      	beq.n	8001c68 <RCCEx_PLL2_Config+0x178>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b9a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b9c:	f7fe fdd8 	bl	8000750 <HAL_GetTick>
 8001ba0:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	011a      	lsls	r2, r3, #4
 8001ba6:	d44b      	bmi.n	8001c40 <RCCEx_PLL2_Config+0x150>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001baa:	682a      	ldr	r2, [r5, #0]
 8001bac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bb0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bb6:	68ab      	ldr	r3, [r5, #8]
 8001bb8:	68ea      	ldr	r2, [r5, #12]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	3a01      	subs	r2, #1
 8001bbe:	025b      	lsls	r3, r3, #9
 8001bc0:	0412      	lsls	r2, r2, #16
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	686a      	ldr	r2, [r5, #4]
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	692a      	ldr	r2, [r5, #16]
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	0612      	lsls	r2, r2, #24
 8001bda:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001bde:	4313      	orrs	r3, r2
 8001be0:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001be4:	696a      	ldr	r2, [r5, #20]
 8001be6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001bea:	4313      	orrs	r3, r2
 8001bec:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001bee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bf0:	69aa      	ldr	r2, [r5, #24]
 8001bf2:	f023 0320 	bic.w	r3, r3, #32
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001bfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bfc:	f023 0310 	bic.w	r3, r3, #16
 8001c00:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001c02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c04:	69ea      	ldr	r2, [r5, #28]
 8001c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c12:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001c1e:	b9b6      	cbnz	r6, 8001c4e <RCCEx_PLL2_Config+0x15e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001c24:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001c26:	4c12      	ldr	r4, [pc, #72]	; (8001c70 <RCCEx_PLL2_Config+0x180>)
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c2e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c30:	f7fe fd8e 	bl	8000750 <HAL_GetTick>
 8001c34:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	d50f      	bpl.n	8001c5c <RCCEx_PLL2_Config+0x16c>
    }

  }


  return status;
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c40:	f7fe fd86 	bl	8000750 <HAL_GetTick>
 8001c44:	1bc0      	subs	r0, r0, r7
 8001c46:	2802      	cmp	r0, #2
 8001c48:	d9ab      	bls.n	8001ba2 <RCCEx_PLL2_Config+0xb2>
        return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001c4e:	2e01      	cmp	r6, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001c50:	bf0c      	ite	eq
 8001c52:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001c56:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001c5a:	e7e3      	b.n	8001c24 <RCCEx_PLL2_Config+0x134>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c5c:	f7fe fd78 	bl	8000750 <HAL_GetTick>
 8001c60:	1b40      	subs	r0, r0, r5
 8001c62:	2802      	cmp	r0, #2
 8001c64:	d9e7      	bls.n	8001c36 <RCCEx_PLL2_Config+0x146>
 8001c66:	e7f0      	b.n	8001c4a <RCCEx_PLL2_Config+0x15a>
    return HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
}
 8001c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c6c:	0800683b 	.word	0x0800683b
 8001c70:	58024400 	.word	0x58024400

08001c74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8001c76:	6803      	ldr	r3, [r0, #0]
{
 8001c78:	4605      	mov	r5, r0
 8001c7a:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c80:	d904      	bls.n	8001c8c <RCCEx_PLL3_Config+0x18>
 8001c82:	f640 21ee 	movw	r1, #2798	; 0xaee
 8001c86:	485a      	ldr	r0, [pc, #360]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001c88:	f003 fa1a 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8001c8c:	686b      	ldr	r3, [r5, #4]
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8001c94:	d904      	bls.n	8001ca0 <RCCEx_PLL3_Config+0x2c>
 8001c96:	f640 21ef 	movw	r1, #2799	; 0xaef
 8001c9a:	4855      	ldr	r0, [pc, #340]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001c9c:	f003 fa10 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8001ca0:	68ab      	ldr	r3, [r5, #8]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca6:	d904      	bls.n	8001cb2 <RCCEx_PLL3_Config+0x3e>
 8001ca8:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8001cac:	4850      	ldr	r0, [pc, #320]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001cae:	f003 fa07 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8001cb2:	692b      	ldr	r3, [r5, #16]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cb8:	d904      	bls.n	8001cc4 <RCCEx_PLL3_Config+0x50>
 8001cba:	f640 21f1 	movw	r1, #2801	; 0xaf1
 8001cbe:	484c      	ldr	r0, [pc, #304]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001cc0:	f003 f9fe 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8001cc4:	68eb      	ldr	r3, [r5, #12]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cca:	d904      	bls.n	8001cd6 <RCCEx_PLL3_Config+0x62>
 8001ccc:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8001cd0:	4847      	ldr	r0, [pc, #284]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001cd2:	f003 f9f5 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8001cd6:	696b      	ldr	r3, [r5, #20]
 8001cd8:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8001cdc:	d004      	beq.n	8001ce8 <RCCEx_PLL3_Config+0x74>
 8001cde:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8001ce2:	4843      	ldr	r0, [pc, #268]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001ce4:	f003 f9ec 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8001ce8:	69ab      	ldr	r3, [r5, #24]
 8001cea:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001cee:	d004      	beq.n	8001cfa <RCCEx_PLL3_Config+0x86>
 8001cf0:	f640 21f4 	movw	r1, #2804	; 0xaf4
 8001cf4:	483e      	ldr	r0, [pc, #248]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001cf6:	f003 f9e3 	bl	80050c0 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8001cfa:	69eb      	ldr	r3, [r5, #28]
 8001cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d00:	d304      	bcc.n	8001d0c <RCCEx_PLL3_Config+0x98>
 8001d02:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8001d06:	483a      	ldr	r0, [pc, #232]	; (8001df0 <RCCEx_PLL3_Config+0x17c>)
 8001d08:	f003 f9da 	bl	80050c0 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001d0c:	4c39      	ldr	r4, [pc, #228]	; (8001df4 <RCCEx_PLL3_Config+0x180>)
 8001d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d069      	beq.n	8001dec <RCCEx_PLL3_Config+0x178>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d20:	f7fe fd16 	bl	8000750 <HAL_GetTick>
 8001d24:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	009a      	lsls	r2, r3, #2
 8001d2a:	d44b      	bmi.n	8001dc4 <RCCEx_PLL3_Config+0x150>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001d2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d2e:	682a      	ldr	r2, [r5, #0]
 8001d30:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001d34:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001d38:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d3a:	68ab      	ldr	r3, [r5, #8]
 8001d3c:	68ea      	ldr	r2, [r5, #12]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	3a01      	subs	r2, #1
 8001d42:	025b      	lsls	r3, r3, #9
 8001d44:	0412      	lsls	r2, r2, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	686a      	ldr	r2, [r5, #4]
 8001d50:	3a01      	subs	r2, #1
 8001d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d56:	4313      	orrs	r3, r2
 8001d58:	692a      	ldr	r2, [r5, #16]
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	0612      	lsls	r2, r2, #24
 8001d5e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001d62:	4313      	orrs	r3, r2
 8001d64:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d68:	696a      	ldr	r2, [r5, #20]
 8001d6a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001d72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d74:	69aa      	ldr	r2, [r5, #24]
 8001d76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d84:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001d86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d88:	69ea      	ldr	r2, [r5, #28]
 8001d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d92:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d96:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001da2:	b9b6      	cbnz	r6, 8001dd2 <RCCEx_PLL3_Config+0x15e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001da8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001daa:	4c12      	ldr	r4, [pc, #72]	; (8001df4 <RCCEx_PLL3_Config+0x180>)
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db4:	f7fe fccc 	bl	8000750 <HAL_GetTick>
 8001db8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	d50f      	bpl.n	8001de0 <RCCEx_PLL3_Config+0x16c>
    }

  }


  return status;
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001dc4:	f7fe fcc4 	bl	8000750 <HAL_GetTick>
 8001dc8:	1bc0      	subs	r0, r0, r7
 8001dca:	2802      	cmp	r0, #2
 8001dcc:	d9ab      	bls.n	8001d26 <RCCEx_PLL3_Config+0xb2>
        return HAL_TIMEOUT;
 8001dce:	2003      	movs	r0, #3
 8001dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001dd2:	2e01      	cmp	r6, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001dd4:	bf0c      	ite	eq
 8001dd6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001dda:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001dde:	e7e3      	b.n	8001da8 <RCCEx_PLL3_Config+0x134>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001de0:	f7fe fcb6 	bl	8000750 <HAL_GetTick>
 8001de4:	1b40      	subs	r0, r0, r5
 8001de6:	2802      	cmp	r0, #2
 8001de8:	d9e7      	bls.n	8001dba <RCCEx_PLL3_Config+0x146>
 8001dea:	e7f0      	b.n	8001dce <RCCEx_PLL3_Config+0x15a>
    return HAL_ERROR;
 8001dec:	2001      	movs	r0, #1
}
 8001dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001df0:	0800683b 	.word	0x0800683b
 8001df4:	58024400 	.word	0x58024400

08001df8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dfc:	6806      	ldr	r6, [r0, #0]
{
 8001dfe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e00:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001e04:	d023      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001e06:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e0c:	d018      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001e0e:	d802      	bhi.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e10:	b183      	cbz	r3, 8001e34 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001e12:	2601      	movs	r6, #1
 8001e14:	e01b      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e1a:	d023      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001e20:	d1f7      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001e22:	4a9f      	ldr	r2, [pc, #636]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e24:	2600      	movs	r6, #0
 8001e26:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001e28:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e2a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	6513      	str	r3, [r2, #80]	; 0x50
 8001e32:	e00c      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e34:	4a9a      	ldr	r2, [pc, #616]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001e3e:	e7f0      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001e40:	2102      	movs	r1, #2
 8001e42:	3004      	adds	r0, #4
 8001e44:	f7ff fe54 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001e48:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d0e9      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	05dd      	lsls	r5, r3, #23
 8001e52:	d534      	bpl.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d830      	bhi.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001e5a:	e8df f003 	tbb	[pc, r3]
 8001e5e:	0f08      	.short	0x0f08
 8001e60:	0d29      	.short	0x0d29
 8001e62:	0d          	.byte	0x0d
 8001e63:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001e64:	2102      	movs	r1, #2
 8001e66:	3024      	adds	r0, #36	; 0x24
 8001e68:	f7ff ff04 	bl	8001c74 <RCCEx_PLL3_Config>
 8001e6c:	e7ec      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e6e:	4a8c      	ldr	r2, [pc, #560]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e76:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e78:	4635      	mov	r5, r6
 8001e7a:	e004      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	1d20      	adds	r0, r4, #4
 8001e80:	f7ff fe36 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001e86:	b9e5      	cbnz	r5, 8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e88:	4a85      	ldr	r2, [pc, #532]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e8a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001e8c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	430b      	orrs	r3, r1
 8001e94:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	0598      	lsls	r0, r3, #22
 8001e9a:	d521      	bpl.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	d03b      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001ea2:	d810      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001ea4:	b36b      	cbz	r3, 8001f02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d031      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8001eaa:	2601      	movs	r6, #1
 8001eac:	4635      	mov	r5, r6
 8001eae:	e017      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001eb6:	f7ff fedd 	bl	8001c74 <RCCEx_PLL3_Config>
 8001eba:	e7e3      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8001ebc:	2601      	movs	r6, #1
 8001ebe:	4635      	mov	r5, r6
 8001ec0:	e7e9      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001ec2:	462e      	mov	r6, r5
 8001ec4:	e7e7      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ece:	d1ec      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8001ed0:	bb4d      	cbnz	r5, 8001f26 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001ed2:	4a73      	ldr	r2, [pc, #460]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ed4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001ed6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ed8:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	0559      	lsls	r1, r3, #21
 8001ee4:	d530      	bpl.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001ee6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eee:	d047      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001ef0:	d81b      	bhi.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d038      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001efa:	d03b      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8001efc:	2601      	movs	r6, #1
 8001efe:	4635      	mov	r5, r6
 8001f00:	e022      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f02:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f0c:	e7e0      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	1d20      	adds	r0, r4, #4
 8001f12:	f7ff fded 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f16:	4605      	mov	r5, r0
      break;
 8001f18:	e7da      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f20:	f7ff fea8 	bl	8001c74 <RCCEx_PLL3_Config>
 8001f24:	e7f7      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8001f26:	462e      	mov	r6, r5
 8001f28:	e7da      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001f2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001f2e:	d002      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8001f30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f34:	d1e2      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8001f36:	bb4d      	cbnz	r5, 8001f8c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001f38:	4a59      	ldr	r2, [pc, #356]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f3a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8001f3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001f40:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	051a      	lsls	r2, r3, #20
 8001f4c:	d52f      	bpl.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001f4e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f56:	d041      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001f58:	d81a      	bhi.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001f5a:	b39b      	cbz	r3, 8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d036      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8001f62:	2601      	movs	r6, #1
 8001f64:	4635      	mov	r5, r6
 8001f66:	e022      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f68:	4a4d      	ldr	r2, [pc, #308]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f72:	e7e0      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f74:	2100      	movs	r1, #0
 8001f76:	1d20      	adds	r0, r4, #4
 8001f78:	f7ff fdba 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f7c:	4605      	mov	r5, r0
      break;
 8001f7e:	e7da      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f80:	2100      	movs	r1, #0
 8001f82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f86:	f7ff fe75 	bl	8001c74 <RCCEx_PLL3_Config>
 8001f8a:	e7f7      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8001f8c:	462e      	mov	r6, r5
 8001f8e:	e7db      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001f90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f94:	d002      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f9a:	d1e2      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8001f9c:	bb25      	cbnz	r5, 8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001fa0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001fa4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001faa:	430b      	orrs	r3, r1
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	d527      	bpl.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8001fb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d033      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001fba:	d817      	bhi.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001fbc:	b1d3      	cbz	r3, 8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8001fbe:	2601      	movs	r6, #1
 8001fc0:	4635      	mov	r5, r6
 8001fc2:	e01f      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fc4:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001fc6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001fce:	e7e5      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	1d20      	adds	r0, r4, #4
 8001fd4:	f7ff fd8c 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001fd8:	4605      	mov	r5, r0
      break;
 8001fda:	e7df      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001fe2:	f7ff fe47 	bl	8001c74 <RCCEx_PLL3_Config>
 8001fe6:	e7f7      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001fe8:	462e      	mov	r6, r5
 8001fea:	e7e0      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d01e      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001ff0:	2b30      	cmp	r3, #48	; 0x30
 8001ff2:	d1e4      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8001ff4:	bb0d      	cbnz	r5, 800203a <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001ff6:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ff8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001ffa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001ffc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002000:	430b      	orrs	r3, r1
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	04df      	lsls	r7, r3, #19
 8002008:	d527      	bpl.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 800200a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800200c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002010:	d03e      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002012:	d814      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8002014:	b383      	cbz	r3, 8002078 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201a:	d033      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 800201c:	2601      	movs	r6, #1
 800201e:	4635      	mov	r5, r6
 8002020:	e01b      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002022:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002024:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800202c:	e7e2      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800202e:	2102      	movs	r1, #2
 8002030:	1d20      	adds	r0, r4, #4
 8002032:	f7ff fd5d 	bl	8001af0 <RCCEx_PLL2_Config>
 8002036:	4605      	mov	r5, r0
      break;
 8002038:	e7dc      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800203a:	462e      	mov	r6, r5
 800203c:	e7e2      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800203e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002042:	d002      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002048:	d1e8      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 800204a:	bb3d      	cbnz	r5, 800209c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800204e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002050:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002056:	430b      	orrs	r3, r1
 8002058:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	0498      	lsls	r0, r3, #18
 800205e:	d532      	bpl.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002060:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002066:	d044      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002068:	d81c      	bhi.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800206a:	b323      	cbz	r3, 80020b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d039      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8002072:	2601      	movs	r6, #1
 8002074:	4635      	mov	r5, r6
 8002076:	e026      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002078:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800207a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002082:	e7e2      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002084:	2100      	movs	r1, #0
 8002086:	1d20      	adds	r0, r4, #4
 8002088:	f7ff fd32 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800208c:	4605      	mov	r5, r0
      break;
 800208e:	e7dc      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002090:	2100      	movs	r1, #0
 8002092:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002096:	f7ff fded 	bl	8001c74 <RCCEx_PLL3_Config>
 800209a:	e7f7      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x294>
 800209c:	462e      	mov	r6, r5
 800209e:	e7dc      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80020a0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80020a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020a8:	d005      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80020aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ae:	d002      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80020b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020b4:	d1dd      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 80020b6:	bb15      	cbnz	r5, 80020fe <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80020b8:	4aa5      	ldr	r2, [pc, #660]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80020ba:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80020bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80020be:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80020c2:	430b      	orrs	r3, r1
 80020c4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	0459      	lsls	r1, r3, #17
 80020ca:	d52d      	bpl.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80020cc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80020d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d4:	d04c      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80020d6:	d814      	bhi.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80020d8:	b1e3      	cbz	r3, 8002114 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80020da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020de:	d041      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      ret = HAL_ERROR;
 80020e0:	2601      	movs	r6, #1
 80020e2:	4635      	mov	r5, r6
 80020e4:	e020      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020e6:	2101      	movs	r1, #1
 80020e8:	1d20      	adds	r0, r4, #4
 80020ea:	f7ff fd01 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020ee:	4605      	mov	r5, r0
      break;
 80020f0:	e7e1      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020f2:	2101      	movs	r1, #1
 80020f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020f8:	f7ff fdbc 	bl	8001c74 <RCCEx_PLL3_Config>
 80020fc:	e7f7      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80020fe:	462e      	mov	r6, r5
 8002100:	e7e1      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002106:	d005      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210c:	d002      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800210e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002112:	d1e5      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8002114:	2d00      	cmp	r5, #0
 8002116:	d131      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x384>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002118:	4a8d      	ldr	r2, [pc, #564]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800211a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800211e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002120:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002124:	430b      	orrs	r3, r1
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	041a      	lsls	r2, r3, #16
 800212c:	d50f      	bpl.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 800212e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002134:	d024      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800213a:	d027      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x394>
 800213c:	bb63      	cbnz	r3, 8002198 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
    if(ret == HAL_OK)
 800213e:	bb75      	cbnz	r5, 800219e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002140:	4a83      	ldr	r2, [pc, #524]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002142:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002144:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002146:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800214a:	430b      	orrs	r3, r1
 800214c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	01db      	lsls	r3, r3, #7
 8002152:	d535      	bpl.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch(PeriphClkInit->FmcClockSelection)
 8002154:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002156:	2b03      	cmp	r3, #3
 8002158:	f200 80d2 	bhi.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800215c:	e8df f003 	tbb	[pc, r3]
 8002160:	26ca2126 	.word	0x26ca2126
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002164:	2101      	movs	r1, #1
 8002166:	1d20      	adds	r0, r4, #4
 8002168:	f7ff fcc2 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800216c:	4605      	mov	r5, r0
      break;
 800216e:	e7d1      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002170:	2101      	movs	r1, #1
 8002172:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002176:	f7ff fd7d 	bl	8001c74 <RCCEx_PLL3_Config>
 800217a:	e7f7      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800217c:	462e      	mov	r6, r5
 800217e:	e7d3      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002180:	4a73      	ldr	r2, [pc, #460]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800218a:	e7d8      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800218c:	2101      	movs	r1, #1
 800218e:	1d20      	adds	r0, r4, #4
 8002190:	f7ff fcae 	bl	8001af0 <RCCEx_PLL2_Config>
 8002194:	4605      	mov	r5, r0
      break;
 8002196:	e7d2      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8002198:	2601      	movs	r6, #1
 800219a:	4635      	mov	r5, r6
 800219c:	e7d7      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800219e:	462e      	mov	r6, r5
 80021a0:	e7d5      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021a2:	4a6b      	ldr	r2, [pc, #428]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80021a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021aa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80021ac:	2d00      	cmp	r5, #0
 80021ae:	f040 80aa 	bne.w	8002306 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80021b2:	4a67      	ldr	r2, [pc, #412]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80021b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80021b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80021b8:	f023 0303 	bic.w	r3, r3, #3
 80021bc:	430b      	orrs	r3, r1
 80021be:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	025f      	lsls	r7, r3, #9
 80021c4:	f140 80a9 	bpl.w	800231a <HAL_RCCEx_PeriphCLKConfig+0x522>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80021c8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80021cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80021d0:	d04c      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80021d6:	d049      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021d8:	f422 43a0 	bic.w	r3, r2, #20480	; 0x5000
 80021dc:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80021e0:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 80021e4:	d042      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021e6:	f422 4310 	bic.w	r3, r2, #36864	; 0x9000
 80021ea:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 80021ee:	d03d      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021f0:	f422 5340 	bic.w	r3, r2, #12288	; 0x3000
 80021f4:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 80021f8:	d038      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021fa:	f422 3088 	bic.w	r0, r2, #69632	; 0x11000
 80021fe:	f5b0 4f63 	cmp.w	r0, #58112	; 0xe300
 8002202:	d033      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002204:	4853      	ldr	r0, [pc, #332]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x55c>)
 8002206:	4283      	cmp	r3, r0
 8002208:	d030      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800220a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800220e:	4283      	cmp	r3, r0
 8002210:	d02c      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002212:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002216:	4283      	cmp	r3, r0
 8002218:	d028      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800221a:	f422 3204 	bic.w	r2, r2, #135168	; 0x21000
 800221e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002222:	4282      	cmp	r2, r0
 8002224:	d022      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002226:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d01f      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800222c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002230:	4293      	cmp	r3, r2
 8002232:	d01b      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002234:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002238:	4293      	cmp	r3, r2
 800223a:	d017      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800223c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002244:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002248:	4293      	cmp	r3, r2
 800224a:	d00f      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800224c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002250:	4293      	cmp	r3, r2
 8002252:	d00b      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002254:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800225e:	4299      	cmp	r1, r3
 8002260:	d004      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002262:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002266:	483e      	ldr	r0, [pc, #248]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002268:	f002 ff2a 	bl	80050c0 <assert_failed>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226c:	4f3d      	ldr	r7, [pc, #244]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002276:	f7fe fa6b 	bl	8000750 <HAL_GetTick>
 800227a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	05d8      	lsls	r0, r3, #23
 8002280:	d543      	bpl.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x512>
    if(ret == HAL_OK)
 8002282:	2d00      	cmp	r5, #0
 8002284:	d161      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x552>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002288:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800228c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800228e:	4042      	eors	r2, r0
 8002290:	f412 7f40 	tst.w	r2, #768	; 0x300
 8002294:	d00b      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002298:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800229a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800229e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80022a2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80022a6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80022aa:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80022ac:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80022ae:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80022b2:	d108      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
        tickstart = HAL_GetTick();
 80022b4:	f7fe fa4c 	bl	8000750 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b8:	4f25      	ldr	r7, [pc, #148]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
        tickstart = HAL_GetTick();
 80022ba:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c2:	0799      	lsls	r1, r3, #30
 80022c4:	d536      	bpl.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80022ca:	4921      	ldr	r1, [pc, #132]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80022cc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80022d0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80022d4:	d135      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80022d6:	6908      	ldr	r0, [r1, #16]
 80022d8:	4a23      	ldr	r2, [pc, #140]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80022da:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80022de:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80022e2:	4302      	orrs	r2, r0
 80022e4:	610a      	str	r2, [r1, #16]
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80022ec:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80022ee:	430b      	orrs	r3, r1
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	e012      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x522>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022f4:	2102      	movs	r1, #2
 80022f6:	1d20      	adds	r0, r4, #4
 80022f8:	f7ff fbfa 	bl	8001af0 <RCCEx_PLL2_Config>
 80022fc:	4605      	mov	r5, r0
      break;
 80022fe:	e755      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = HAL_ERROR;
 8002300:	2601      	movs	r6, #1
 8002302:	4635      	mov	r5, r6
 8002304:	e75c      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8002306:	462e      	mov	r6, r5
 8002308:	e75a      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fa21 	bl	8000750 <HAL_GetTick>
 800230e:	eba0 0008 	sub.w	r0, r0, r8
 8002312:	2864      	cmp	r0, #100	; 0x64
 8002314:	d9b2      	bls.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x484>
        ret = HAL_TIMEOUT;
 8002316:	2603      	movs	r6, #3
 8002318:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	07da      	lsls	r2, r3, #31
 800231e:	d533      	bpl.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002320:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002322:	2b10      	cmp	r3, #16
 8002324:	d041      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8002326:	d821      	bhi.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x574>
 8002328:	b333      	cbz	r3, 8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d037      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      ret = HAL_ERROR;
 800232e:	2601      	movs	r6, #1
 8002330:	4635      	mov	r5, r6
 8002332:	e029      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x590>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fa0c 	bl	8000750 <HAL_GetTick>
 8002338:	eba0 0008 	sub.w	r0, r0, r8
 800233c:	4548      	cmp	r0, r9
 800233e:	d9bf      	bls.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002340:	e7e9      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x51e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002342:	690a      	ldr	r2, [r1, #16]
 8002344:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002348:	e7cc      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800234a:	462e      	mov	r6, r5
 800234c:	e7e5      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800234e:	bf00      	nop
 8002350:	58024400 	.word	0x58024400
 8002354:	00010300 	.word	0x00010300
 8002358:	00020300 	.word	0x00020300
 800235c:	0003e300 	.word	0x0003e300
 8002360:	0800683b 	.word	0x0800683b
 8002364:	58024800 	.word	0x58024800
 8002368:	00ffffcf 	.word	0x00ffffcf
    switch(PeriphClkInit->Usart16ClockSelection)
 800236c:	2b20      	cmp	r3, #32
 800236e:	d003      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002370:	2b28      	cmp	r3, #40	; 0x28
 8002372:	d001      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002374:	2b18      	cmp	r3, #24
 8002376:	d1da      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(ret == HAL_OK)
 8002378:	b9ed      	cbnz	r5, 80023b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800237a:	4a67      	ldr	r2, [pc, #412]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800237c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800237e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002380:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002384:	430b      	orrs	r3, r1
 8002386:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	079b      	lsls	r3, r3, #30
 800238c:	d522      	bpl.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800238e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002390:	2b05      	cmp	r3, #5
 8002392:	d831      	bhi.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002394:	e8df f003 	tbb	[pc, r3]
 8002398:	162a1116 	.word	0x162a1116
 800239c:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800239e:	2101      	movs	r1, #1
 80023a0:	1d20      	adds	r0, r4, #4
 80023a2:	f7ff fba5 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023a6:	4605      	mov	r5, r0
      break;
 80023a8:	e7e6      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023aa:	2101      	movs	r1, #1
 80023ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023b0:	f7ff fc60 	bl	8001c74 <RCCEx_PLL3_Config>
 80023b4:	e7f7      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 80023b6:	462e      	mov	r6, r5
 80023b8:	e7e6      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x590>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023ba:	2101      	movs	r1, #1
 80023bc:	1d20      	adds	r0, r4, #4
 80023be:	f7ff fb97 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023c4:	b9dd      	cbnz	r5, 80023fe <HAL_RCCEx_PeriphCLKConfig+0x606>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80023c6:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80023c8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80023ca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023cc:	f023 0307 	bic.w	r3, r3, #7
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	075f      	lsls	r7, r3, #29
 80023d8:	d521      	bpl.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80023da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d833      	bhi.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80023e2:	e8df f003 	tbb	[pc, r3]
 80023e6:	0e13      	.short	0x0e13
 80023e8:	1313132c 	.word	0x1313132c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023ec:	2101      	movs	r1, #1
 80023ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023f2:	f7ff fc3f 	bl	8001c74 <RCCEx_PLL3_Config>
 80023f6:	e7e4      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      ret = HAL_ERROR;
 80023f8:	2601      	movs	r6, #1
 80023fa:	4635      	mov	r5, r6
 80023fc:	e7ea      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 80023fe:	462e      	mov	r6, r5
 8002400:	e7e8      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002402:	2101      	movs	r1, #1
 8002404:	1d20      	adds	r0, r4, #4
 8002406:	f7ff fb73 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800240a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800240c:	bb05      	cbnz	r5, 8002450 <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800240e:	4a42      	ldr	r2, [pc, #264]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8002410:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002414:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	430b      	orrs	r3, r1
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	0698      	lsls	r0, r3, #26
 8002422:	d529      	bpl.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x680>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002424:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800242c:	d03a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800242e:	d811      	bhi.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002430:	b1cb      	cbz	r3, 8002466 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002436:	d02f      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = HAL_ERROR;
 8002438:	2601      	movs	r6, #1
 800243a:	4635      	mov	r5, r6
 800243c:	e01c      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x680>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800243e:	2101      	movs	r1, #1
 8002440:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002444:	f7ff fc16 	bl	8001c74 <RCCEx_PLL3_Config>
 8002448:	e7df      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x612>
      ret = HAL_ERROR;
 800244a:	2601      	movs	r6, #1
 800244c:	4635      	mov	r5, r6
 800244e:	e7e6      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x626>
 8002450:	462e      	mov	r6, r5
 8002452:	e7e4      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002458:	d005      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800245a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245e:	d002      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002460:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002464:	d1e8      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x640>
    if(ret == HAL_OK)
 8002466:	bb1d      	cbnz	r5, 80024b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002468:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800246a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800246e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002470:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002474:	430b      	orrs	r3, r1
 8002476:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	0659      	lsls	r1, r3, #25
 800247c:	d52c      	bpl.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800247e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002486:	d03f      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8002488:	d814      	bhi.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800248a:	b1e3      	cbz	r3, 80024c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800248c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002490:	d034      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x704>
      ret = HAL_ERROR;
 8002492:	2601      	movs	r6, #1
 8002494:	4635      	mov	r5, r6
 8002496:	e01f      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002498:	2100      	movs	r1, #0
 800249a:	1d20      	adds	r0, r4, #4
 800249c:	f7ff fb28 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024a0:	4605      	mov	r5, r0
      break;
 80024a2:	e7e0      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024a4:	2102      	movs	r1, #2
 80024a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024aa:	f7ff fbe3 	bl	8001c74 <RCCEx_PLL3_Config>
 80024ae:	e7f7      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80024b0:	462e      	mov	r6, r5
 80024b2:	e7e1      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x680>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80024b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b8:	d005      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 80024ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80024be:	d002      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 80024c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024c4:	d1e5      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x69a>
    if(ret == HAL_OK)
 80024c6:	bb2d      	cbnz	r5, 8002514 <HAL_RCCEx_PeriphCLKConfig+0x71c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80024ca:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80024ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80024d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	061a      	lsls	r2, r3, #24
 80024dc:	d532      	bpl.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80024de:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80024e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e6:	f000 80bb 	beq.w	8002660 <HAL_RCCEx_PeriphCLKConfig+0x868>
 80024ea:	d817      	bhi.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x724>
 80024ec:	b1fb      	cbz	r3, 800252e <HAL_RCCEx_PeriphCLKConfig+0x736>
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	f000 80af 	beq.w	8002654 <HAL_RCCEx_PeriphCLKConfig+0x85c>
      ret = HAL_ERROR;
 80024f6:	2601      	movs	r6, #1
 80024f8:	4635      	mov	r5, r6
 80024fa:	e023      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024fc:	2100      	movs	r1, #0
 80024fe:	1d20      	adds	r0, r4, #4
 8002500:	f7ff faf6 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002504:	4605      	mov	r5, r0
      break;
 8002506:	e7de      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002508:	2102      	movs	r1, #2
 800250a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800250e:	f7ff fbb1 	bl	8001c74 <RCCEx_PLL3_Config>
 8002512:	e7f7      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 8002514:	462e      	mov	r6, r5
 8002516:	e7df      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8002518:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 800251c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002520:	d005      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x736>
 8002522:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002526:	d002      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x736>
 8002528:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800252c:	d1e3      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    if(ret == HAL_OK)
 800252e:	2d00      	cmp	r5, #0
 8002530:	f040 809c 	bne.w	800266c <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002534:	4ab3      	ldr	r2, [pc, #716]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002536:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800253a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800253c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002540:	430b      	orrs	r3, r1
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	071b      	lsls	r3, r3, #28
 8002548:	d517      	bpl.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x782>
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800254a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800254e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8002552:	d004      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x766>
 8002554:	f240 413a 	movw	r1, #1082	; 0x43a
 8002558:	48ab      	ldr	r0, [pc, #684]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800255a:	f002 fdb1 	bl	80050c0 <assert_failed>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800255e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002562:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002566:	f040 8083 	bne.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x878>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800256a:	2102      	movs	r1, #2
 800256c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002570:	f7ff fb80 	bl	8001c74 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002574:	2800      	cmp	r0, #0
 8002576:	bf18      	it	ne
 8002578:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	06df      	lsls	r7, r3, #27
 800257e:	d51c      	bpl.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8002580:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 800258a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800258e:	d007      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8002590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002594:	d004      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8002596:	f240 414f 	movw	r1, #1103	; 0x44f
 800259a:	489b      	ldr	r0, [pc, #620]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800259c:	f002 fd90 	bl	80050c0 <assert_failed>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80025a0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80025a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80025a8:	d169      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x886>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80025aa:	2102      	movs	r1, #2
 80025ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025b0:	f7ff fb60 	bl	8001c74 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80025b4:	2800      	cmp	r0, #0
 80025b6:	bf18      	it	ne
 80025b8:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	0318      	lsls	r0, r3, #12
 80025be:	d517      	bpl.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->AdcClockSelection)
 80025c0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80025c4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80025c8:	d060      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x894>
 80025ca:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80025ce:	d005      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80025d0:	2900      	cmp	r1, #0
 80025d2:	d161      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025d4:	1d20      	adds	r0, r4, #4
 80025d6:	f7ff fa8b 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80025dc:	2d00      	cmp	r5, #0
 80025de:	d15e      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e0:	4a88      	ldr	r2, [pc, #544]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80025e2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80025e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025e8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	0359      	lsls	r1, r3, #13
 80025f4:	d519      	bpl.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch(PeriphClkInit->UsbClockSelection)
 80025f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80025fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025fe:	d050      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8002600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002604:	d007      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800260a:	d151      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800260c:	4a7d      	ldr	r2, [pc, #500]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 800260e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002614:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002616:	2d00      	cmp	r5, #0
 8002618:	d14d      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800261a:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 800261c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002620:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002622:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002626:	430b      	orrs	r3, r1
 8002628:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	03da      	lsls	r2, r3, #15
 800262e:	d553      	bpl.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8002630:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002632:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8002636:	d004      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8002638:	f240 41b7 	movw	r1, #1207	; 0x4b7
 800263c:	4872      	ldr	r0, [pc, #456]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800263e:	f002 fd3f 	bl	80050c0 <assert_failed>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002642:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002644:	b3cb      	cbz	r3, 80026ba <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8002646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264a:	f000 80d2 	beq.w	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
      ret = HAL_ERROR;
 800264e:	2601      	movs	r6, #1
 8002650:	4635      	mov	r5, r6
 8002652:	e041      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002654:	2100      	movs	r1, #0
 8002656:	1d20      	adds	r0, r4, #4
 8002658:	f7ff fa4a 	bl	8001af0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800265c:	4605      	mov	r5, r0
      break;
 800265e:	e766      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x736>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002660:	2102      	movs	r1, #2
 8002662:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002666:	f7ff fb05 	bl	8001c74 <RCCEx_PLL3_Config>
 800266a:	e7f7      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x864>
 800266c:	462e      	mov	r6, r5
 800266e:	e769      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002670:	4a64      	ldr	r2, [pc, #400]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002672:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002674:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002678:	430b      	orrs	r3, r1
 800267a:	6553      	str	r3, [r2, #84]	; 0x54
 800267c:	e77d      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800267e:	4a61      	ldr	r2, [pc, #388]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002680:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002686:	430b      	orrs	r3, r1
 8002688:	6593      	str	r3, [r2, #88]	; 0x58
 800268a:	e796      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800268c:	2102      	movs	r1, #2
 800268e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002692:	f7ff faef 	bl	8001c74 <RCCEx_PLL3_Config>
 8002696:	e7a0      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7e2>
      ret = HAL_ERROR;
 8002698:	2601      	movs	r6, #1
 800269a:	4635      	mov	r5, r6
 800269c:	e7a8      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 800269e:	462e      	mov	r6, r5
 80026a0:	e7a6      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026a2:	2101      	movs	r1, #1
 80026a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026a8:	f7ff fae4 	bl	8001c74 <RCCEx_PLL3_Config>
 80026ac:	4605      	mov	r5, r0
      break;
 80026ae:	e7b2      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      ret = HAL_ERROR;
 80026b0:	2601      	movs	r6, #1
 80026b2:	4635      	mov	r5, r6
 80026b4:	e7b9      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x832>
 80026b6:	462e      	mov	r6, r5
 80026b8:	e7b7      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ba:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80026bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80026c4:	2d00      	cmp	r5, #0
 80026c6:	f040 809a 	bne.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0xa06>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80026ca:	4a4e      	ldr	r2, [pc, #312]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80026cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80026ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	430b      	orrs	r3, r1
 80026d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	d507      	bpl.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80026de:	2102      	movs	r1, #2
 80026e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026e4:	f7ff fac6 	bl	8001c74 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80026e8:	2800      	cmp	r0, #0
 80026ea:	bf18      	it	ne
 80026ec:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80026ee:	6821      	ldr	r1, [r4, #0]
 80026f0:	038f      	lsls	r7, r1, #14
 80026f2:	d512      	bpl.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x922>
    switch(PeriphClkInit->RngClockSelection)
 80026f4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80026f6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80026fa:	f000 8091 	beq.w	8002820 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80026fe:	f200 8085 	bhi.w	800280c <HAL_RCCEx_PeriphCLKConfig+0xa14>
 8002702:	2a00      	cmp	r2, #0
 8002704:	f040 808a 	bne.w	800281c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    if(ret == HAL_OK)
 8002708:	2d00      	cmp	r5, #0
 800270a:	f040 808f 	bne.w	800282c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270e:	483d      	ldr	r0, [pc, #244]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002710:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002716:	4313      	orrs	r3, r2
 8002718:	6543      	str	r3, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800271a:	02c8      	lsls	r0, r1, #11
 800271c:	d50f      	bpl.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x946>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800271e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002720:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8002724:	d004      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002726:	f240 5116 	movw	r1, #1302	; 0x516
 800272a:	4837      	ldr	r0, [pc, #220]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800272c:	f002 fcc8 	bl	80050c0 <assert_failed>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002730:	4a34      	ldr	r2, [pc, #208]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002732:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002734:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273a:	430b      	orrs	r3, r1
 800273c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	00d9      	lsls	r1, r3, #3
 8002742:	d511      	bpl.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x970>
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8002744:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8002748:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800274c:	d004      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800274e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8002752:	482d      	ldr	r0, [pc, #180]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8002754:	f002 fcb4 	bl	80050c0 <assert_failed>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 800275a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800275e:	6913      	ldr	r3, [r2, #16]
 8002760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002764:	430b      	orrs	r3, r1
 8002766:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	029a      	lsls	r2, r3, #10
 800276c:	d50f      	bpl.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x996>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800276e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002770:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002774:	d004      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002776:	f240 512a 	movw	r1, #1322	; 0x52a
 800277a:	4823      	ldr	r0, [pc, #140]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800277c:	f002 fca0 	bl	80050c0 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002782:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002784:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278a:	430b      	orrs	r3, r1
 800278c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	d513      	bpl.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8002794:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002798:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800279c:	d004      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800279e:	f240 5134 	movw	r1, #1332	; 0x534
 80027a2:	4819      	ldr	r0, [pc, #100]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80027a4:	f002 fc8c 	bl	80050c0 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b0:	611a      	str	r2, [r3, #16]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80027b8:	430a      	orrs	r2, r1
 80027ba:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da12      	bge.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80027c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80027c4:	f033 5280 	bics.w	r2, r3, #268435456	; 0x10000000
 80027c8:	d007      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80027ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ce:	d004      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80027d0:	f240 513e 	movw	r1, #1342	; 0x53e
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80027d6:	f002 fc73 	bl	80050c0 <assert_failed>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80027dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80027de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80027e0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80027e4:	430b      	orrs	r3, r1
 80027e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e8:	1c30      	adds	r0, r6, #0
 80027ea:	bf18      	it	ne
 80027ec:	2001      	movne	r0, #1
}
 80027ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027f2:	2102      	movs	r1, #2
 80027f4:	1d20      	adds	r0, r4, #4
 80027f6:	f7ff f97b 	bl	8001af0 <RCCEx_PLL2_Config>
 80027fa:	4605      	mov	r5, r0
      break;
 80027fc:	e762      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80027fe:	462e      	mov	r6, r5
 8002800:	e76a      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8002802:	bf00      	nop
 8002804:	58024400 	.word	0x58024400
 8002808:	0800683b 	.word	0x0800683b
    switch(PeriphClkInit->RngClockSelection)
 800280c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002810:	f43f af7a 	beq.w	8002708 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002814:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002818:	f43f af76 	beq.w	8002708 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = HAL_ERROR;
 800281c:	2601      	movs	r6, #1
 800281e:	e77c      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002820:	4803      	ldr	r0, [pc, #12]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8002822:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	62c3      	str	r3, [r0, #44]	; 0x2c
      break;
 800282a:	e76d      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800282c:	462e      	mov	r6, r5
 800282e:	e774      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x922>
 8002830:	58024400 	.word	0x58024400

08002834 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002834:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002836:	f7ff f921 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	f003 031f 	and.w	r3, r3, #31
}
 800284a:	40d8      	lsrs	r0, r3
 800284c:	bd08      	pop	{r3, pc}
 800284e:	bf00      	nop
 8002850:	58024400 	.word	0x58024400
 8002854:	08006989 	.word	0x08006989

08002858 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002858:	494e      	ldr	r1, [pc, #312]	; (8002994 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 800285a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800285c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800285e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002860:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002862:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002866:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 808e 	beq.w	800298a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800286e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002872:	f002 0210 	and.w	r2, r2, #16
 8002876:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002998 <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 800287a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800287e:	436a      	muls	r2, r5
 8002880:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002884:	f004 0203 	and.w	r2, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002888:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 800288c:	2a01      	cmp	r2, #1
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002896:	d002      	beq.n	800289e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002898:	d30f      	bcc.n	80028ba <HAL_RCCEx_GetPLL2ClockFreq+0x62>
 800289a:	2a02      	cmp	r2, #2
 800289c:	d067      	beq.n	800296e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800289e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80028a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ac:	eee6 7a05 	vfma.f32	s15, s12, s10
 80028b0:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800299c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80028b4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80028b8:	e056      	b.n	8002968 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ba:	680b      	ldr	r3, [r1, #0]
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	d546      	bpl.n	800294e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028c0:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028c2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028c4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80028c8:	4a35      	ldr	r2, [pc, #212]	; (80029a0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028ce:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028d0:	ee07 2a90 	vmov	s15, r2
 80028d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e4:	eee6 7a05 	vfma.f32	s15, s12, s10
 80028e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80028f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80028f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80028f8:	ee07 3a10 	vmov	s14, r3
 80028fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002900:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002904:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002908:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800290c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002910:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002912:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002916:	ee07 3a10 	vmov	s14, r3
 800291a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800291e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002922:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002926:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800292a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800292e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002930:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002934:	ee07 3a10 	vmov	s14, r3
 8002938:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800293c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002940:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002944:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002948:	ed80 7a02 	vstr	s14, [r0, #8]
 800294c:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800294e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002960:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80029a4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002964:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002968:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800296c:	e7be      	b.n	80028ec <HAL_RCCEx_GetPLL2ClockFreq+0x94>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800296e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002980:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80029a8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002984:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002988:	e7ee      	b.n	8002968 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800298a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800298c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800298e:	6083      	str	r3, [r0, #8]
 8002990:	bd30      	pop	{r4, r5, pc}
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400
 8002998:	39000000 	.word	0x39000000
 800299c:	4a742400 	.word	0x4a742400
 80029a0:	03d09000 	.word	0x03d09000
 80029a4:	4c742400 	.word	0x4c742400
 80029a8:	4af42400 	.word	0x4af42400

080029ac <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029ac:	494e      	ldr	r1, [pc, #312]	; (8002ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 80029ae:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029b0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80029b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80029b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80029b6:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029ba:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 808e 	beq.w	8002ade <HAL_RCCEx_GetPLL3ClockFreq+0x132>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029c2:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80029c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80029ca:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002aec <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 80029ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029d2:	436a      	muls	r2, r5
 80029d4:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029d8:	f004 0203 	and.w	r2, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029dc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 80029e0:	2a01      	cmp	r2, #1
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029ea:	d002      	beq.n	80029f2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80029ec:	d30f      	bcc.n	8002a0e <HAL_RCCEx_GetPLL3ClockFreq+0x62>
 80029ee:	2a02      	cmp	r2, #2
 80029f0:	d067      	beq.n	8002ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80029f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a00:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002a04:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8002af0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002a08:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002a0c:	e056      	b.n	8002abc <HAL_RCCEx_GetPLL3ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a0e:	680b      	ldr	r3, [r1, #0]
 8002a10:	069b      	lsls	r3, r3, #26
 8002a12:	d546      	bpl.n	8002aa2 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a14:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a18:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8002a1c:	4a35      	ldr	r2, [pc, #212]	; (8002af4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a22:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a24:	ee07 2a90 	vmov	s15, r2
 8002a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a38:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002a3c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002a40:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a42:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002a46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a48:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a4c:	ee07 3a10 	vmov	s14, r3
 8002a50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a54:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a5c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002a60:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002a64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a66:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002a6a:	ee07 3a10 	vmov	s14, r3
 8002a6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a72:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002a76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a7a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002a7e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002a82:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a84:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002a88:	ee07 3a10 	vmov	s14, r3
 8002a8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a90:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002a94:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002a98:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002a9c:	ed80 7a02 	vstr	s14, [r0, #8]
 8002aa0:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002aa2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002ab4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002af8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8002ab8:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002abc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002ac0:	e7be      	b.n	8002a40 <HAL_RCCEx_GetPLL3ClockFreq+0x94>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ac2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002ad4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8002afc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002ad8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002adc:	e7ee      	b.n	8002abc <HAL_RCCEx_GetPLL3ClockFreq+0x110>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002ade:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002ae0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002ae2:	6083      	str	r3, [r0, #8]
 8002ae4:	bd30      	pop	{r4, r5, pc}
 8002ae6:	bf00      	nop
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	39000000 	.word	0x39000000
 8002af0:	4a742400 	.word	0x4a742400
 8002af4:	03d09000 	.word	0x03d09000
 8002af8:	4c742400 	.word	0x4c742400
 8002afc:	4af42400 	.word	0x4af42400

08002b00 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8002b00:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b02:	f7fe fd49 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCCEx_GetD1SysClockFreq+0x20>)
 8002b08:	4a06      	ldr	r2, [pc, #24]	; (8002b24 <HAL_RCCEx_GetD1SysClockFreq+0x24>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	40d8      	lsrs	r0, r3
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8002b1a:	6018      	str	r0, [r3, #0]
}
 8002b1c:	bd08      	pop	{r3, pc}
 8002b1e:	bf00      	nop
 8002b20:	58024400 	.word	0x58024400
 8002b24:	08006989 	.word	0x08006989
 8002b28:	20000008 	.word	0x20000008

08002b2c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8002b2c:	6803      	ldr	r3, [r0, #0]
 8002b2e:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	f042 0208 	orr.w	r2, r2, #8
 8002b36:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	f042 0210 	orr.w	r2, r2, #16
 8002b3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 8002b4e:	f022 0203 	bic.w	r2, r2, #3
 8002b52:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b5c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002b60:	2a04      	cmp	r2, #4
 8002b62:	d00b      	beq.n	8002b7c <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8002b64:	068a      	lsls	r2, r1, #26
 8002b66:	d509      	bpl.n	8002b7c <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002b68:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b70:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b7c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002b80:	2a03      	cmp	r2, #3
 8002b82:	d00b      	beq.n	8002b9c <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8002b84:	064a      	lsls	r2, r1, #25
 8002b86:	d509      	bpl.n	8002b9c <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b88:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002b8c:	f042 0204 	orr.w	r2, r2, #4
 8002b90:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b9a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8002b9c:	058a      	lsls	r2, r1, #22
 8002b9e:	d509      	bpl.n	8002bb4 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ba0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8002bb4:	05ca      	lsls	r2, r1, #23
 8002bb6:	d509      	bpl.n	8002bcc <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002bb8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002bbc:	f042 0208 	orr.w	r2, r2, #8
 8002bc0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8002bd2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_SPI_Init>:
{
 8002bd8:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002bda:	4604      	mov	r4, r0
 8002bdc:	b908      	cbnz	r0, 8002be2 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002be2:	6803      	ldr	r3, [r0, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <HAL_SPI_Init+0x21c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d016      	beq.n	8002c18 <HAL_SPI_Init+0x40>
 8002bea:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d012      	beq.n	8002c18 <HAL_SPI_Init+0x40>
 8002bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00e      	beq.n	8002c18 <HAL_SPI_Init+0x40>
 8002bfa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00a      	beq.n	8002c18 <HAL_SPI_Init+0x40>
 8002c02:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d006      	beq.n	8002c18 <HAL_SPI_Init+0x40>
 8002c0a:	4a7b      	ldr	r2, [pc, #492]	; (8002df8 <HAL_SPI_Init+0x220>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <HAL_SPI_Init+0x40>
 8002c10:	21f6      	movs	r1, #246	; 0xf6
 8002c12:	487a      	ldr	r0, [pc, #488]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002c14:	f002 fa54 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002c18:	6863      	ldr	r3, [r4, #4]
 8002c1a:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8002c1e:	d003      	beq.n	8002c28 <HAL_SPI_Init+0x50>
 8002c20:	21f7      	movs	r1, #247	; 0xf7
 8002c22:	4876      	ldr	r0, [pc, #472]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002c24:	f002 fa4c 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002c28:	68a3      	ldr	r3, [r4, #8]
 8002c2a:	f433 23c0 	bics.w	r3, r3, #393216	; 0x60000
 8002c2e:	d003      	beq.n	8002c38 <HAL_SPI_Init+0x60>
 8002c30:	21f8      	movs	r1, #248	; 0xf8
 8002c32:	4872      	ldr	r0, [pc, #456]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002c34:	f002 fa44 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002c38:	68e3      	ldr	r3, [r4, #12]
 8002c3a:	3b03      	subs	r3, #3
 8002c3c:	2b1c      	cmp	r3, #28
 8002c3e:	d903      	bls.n	8002c48 <HAL_SPI_Init+0x70>
 8002c40:	21f9      	movs	r1, #249	; 0xf9
 8002c42:	486e      	ldr	r0, [pc, #440]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002c44:	f002 fa3c 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8002c48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c4a:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8002c4e:	d00b      	beq.n	8002c68 <HAL_SPI_Init+0x90>
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d009      	beq.n	8002c68 <HAL_SPI_Init+0x90>
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c58:	d006      	beq.n	8002c68 <HAL_SPI_Init+0x90>
 8002c5a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c5e:	d003      	beq.n	8002c68 <HAL_SPI_Init+0x90>
 8002c60:	21fa      	movs	r1, #250	; 0xfa
 8002c62:	4866      	ldr	r0, [pc, #408]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002c64:	f002 fa2c 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002c68:	69a3      	ldr	r3, [r4, #24]
 8002c6a:	f033 6280 	bics.w	r2, r3, #67108864	; 0x4000000
 8002c6e:	d006      	beq.n	8002c7e <HAL_SPI_Init+0xa6>
 8002c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c74:	d003      	beq.n	8002c7e <HAL_SPI_Init+0xa6>
 8002c76:	21fb      	movs	r1, #251	; 0xfb
 8002c78:	4860      	ldr	r0, [pc, #384]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002c7a:	f002 fa21 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8002c7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c80:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8002c84:	d003      	beq.n	8002c8e <HAL_SPI_Init+0xb6>
 8002c86:	21fc      	movs	r1, #252	; 0xfc
 8002c88:	485c      	ldr	r0, [pc, #368]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002c8a:	f002 fa19 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002c8e:	69e3      	ldr	r3, [r4, #28]
 8002c90:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8002c94:	d006      	beq.n	8002ca4 <HAL_SPI_Init+0xcc>
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d003      	beq.n	8002ca4 <HAL_SPI_Init+0xcc>
 8002c9c:	21fd      	movs	r1, #253	; 0xfd
 8002c9e:	4857      	ldr	r0, [pc, #348]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002ca0:	f002 fa0e 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002ca4:	6a23      	ldr	r3, [r4, #32]
 8002ca6:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8002caa:	d003      	beq.n	8002cb4 <HAL_SPI_Init+0xdc>
 8002cac:	21fe      	movs	r1, #254	; 0xfe
 8002cae:	4853      	ldr	r0, [pc, #332]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002cb0:	f002 fa06 	bl	80050c0 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cb6:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8002cba:	d003      	beq.n	8002cc4 <HAL_SPI_Init+0xec>
 8002cbc:	21ff      	movs	r1, #255	; 0xff
 8002cbe:	484f      	ldr	r0, [pc, #316]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002cc0:	f002 f9fe 	bl	80050c0 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cc6:	b98b      	cbnz	r3, 8002cec <HAL_SPI_Init+0x114>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 8002cce:	d004      	beq.n	8002cda <HAL_SPI_Init+0x102>
 8002cd0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002cd4:	4849      	ldr	r0, [pc, #292]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002cd6:	f002 f9f3 	bl	80050c0 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002cda:	6963      	ldr	r3, [r4, #20]
 8002cdc:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	d004      	beq.n	8002cec <HAL_SPI_Init+0x114>
 8002ce2:	f240 1103 	movw	r1, #259	; 0x103
 8002ce6:	4845      	ldr	r0, [pc, #276]	; (8002dfc <HAL_SPI_Init+0x224>)
 8002ce8:	f002 f9ea 	bl	80050c0 <assert_failed>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cec:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002cee:	6822      	ldr	r2, [r4, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	62a3      	str	r3, [r4, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002cf2:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_SPI_Init+0x21c>)
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	68e3      	ldr	r3, [r4, #12]
 8002cf8:	d009      	beq.n	8002d0e <HAL_SPI_Init+0x136>
 8002cfa:	4941      	ldr	r1, [pc, #260]	; (8002e00 <HAL_SPI_Init+0x228>)
 8002cfc:	428a      	cmp	r2, r1
 8002cfe:	d006      	beq.n	8002d0e <HAL_SPI_Init+0x136>
 8002d00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d04:	428a      	cmp	r2, r1
 8002d06:	d002      	beq.n	8002d0e <HAL_SPI_Init+0x136>
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	f63f af68 	bhi.w	8002bde <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002d0e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8002d10:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002d12:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8002d14:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8002d16:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8002d1a:	4936      	ldr	r1, [pc, #216]	; (8002df4 <HAL_SPI_Init+0x21c>)
 8002d1c:	428a      	cmp	r2, r1
 8002d1e:	d067      	beq.n	8002df0 <HAL_SPI_Init+0x218>
 8002d20:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8002d24:	428a      	cmp	r2, r1
 8002d26:	d063      	beq.n	8002df0 <HAL_SPI_Init+0x218>
 8002d28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d2c:	428a      	cmp	r2, r1
 8002d2e:	d05f      	beq.n	8002df0 <HAL_SPI_Init+0x218>
 8002d30:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8002d32:	f63f af54 	bhi.w	8002bde <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d36:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002d3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d3e:	b923      	cbnz	r3, 8002d4a <HAL_SPI_Init+0x172>
    hspi->Lock = HAL_UNLOCKED;
 8002d40:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f002 f9d5 	bl	80050f4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d4a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d50:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002d5e:	69a3      	ldr	r3, [r4, #24]
 8002d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d64:	d107      	bne.n	8002d76 <HAL_SPI_Init+0x19e>
 8002d66:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002d6a:	d104      	bne.n	8002d76 <HAL_SPI_Init+0x19e>
 8002d6c:	b91d      	cbnz	r5, 8002d76 <HAL_SPI_Init+0x19e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8002d6e:	6810      	ldr	r0, [r2, #0]
 8002d70:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002d74:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8002d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d78:	69e0      	ldr	r0, [r4, #28]
 8002d7a:	4330      	orrs	r0, r6
 8002d7c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002d7e:	4330      	orrs	r0, r6
 8002d80:	68e6      	ldr	r6, [r4, #12]
 8002d82:	4330      	orrs	r0, r6
 8002d84:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8002d86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002d88:	4303      	orrs	r3, r0
 8002d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d8c:	4303      	orrs	r3, r0
 8002d8e:	6920      	ldr	r0, [r4, #16]
 8002d90:	432b      	orrs	r3, r5
 8002d92:	4303      	orrs	r3, r0
 8002d94:	6960      	ldr	r0, [r4, #20]
 8002d96:	4303      	orrs	r3, r0
 8002d98:	6a20      	ldr	r0, [r4, #32]
 8002d9a:	4303      	orrs	r3, r0
 8002d9c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	4303      	orrs	r3, r0
 8002da2:	68a0      	ldr	r0, [r4, #8]
 8002da4:	4303      	orrs	r3, r0
 8002da6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002da8:	4303      	orrs	r3, r0
 8002daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dac:	4303      	orrs	r3, r0
 8002dae:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8002db0:	b959      	cbnz	r1, 8002dca <HAL_SPI_Init+0x1f2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8002db2:	6893      	ldr	r3, [r2, #8]
 8002db4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dbc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8002dbe:	6893      	ldr	r3, [r2, #8]
 8002dc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8002dd2:	024b      	lsls	r3, r1, #9
 8002dd4:	d505      	bpl.n	8002de2 <HAL_SPI_Init+0x20a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8002dd6:	68d3      	ldr	r3, [r2, #12]
 8002dd8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002dda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dde:	430b      	orrs	r3, r1
 8002de0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002de4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8002dea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	e79e      	b.n	8002d32 <HAL_SPI_Init+0x15a>
 8002df4:	40013000 	.word	0x40013000
 8002df8:	58001400 	.word	0x58001400
 8002dfc:	08006876 	.word	0x08006876
 8002e00:	40003800 	.word	0x40003800

08002e04 <HAL_SPI_DeInit>:
{
 8002e04:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002e06:	4604      	mov	r4, r0
 8002e08:	b370      	cbz	r0, 8002e68 <HAL_SPI_DeInit+0x64>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002e0a:	6803      	ldr	r3, [r0, #0]
 8002e0c:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_SPI_DeInit+0x68>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d017      	beq.n	8002e42 <HAL_SPI_DeInit+0x3e>
 8002e12:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_SPI_DeInit+0x3e>
 8002e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00f      	beq.n	8002e42 <HAL_SPI_DeInit+0x3e>
 8002e22:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00b      	beq.n	8002e42 <HAL_SPI_DeInit+0x3e>
 8002e2a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_SPI_DeInit+0x3e>
 8002e32:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <HAL_SPI_DeInit+0x6c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_SPI_DeInit+0x3e>
 8002e38:	f240 11c7 	movw	r1, #455	; 0x1c7
 8002e3c:	480d      	ldr	r0, [pc, #52]	; (8002e74 <HAL_SPI_DeInit+0x70>)
 8002e3e:	f002 f93f 	bl	80050c0 <assert_failed>
  __HAL_SPI_DISABLE(hspi);
 8002e42:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e44:	2302      	movs	r3, #2
  HAL_SPI_MspDeInit(hspi);
 8002e46:	4620      	mov	r0, r4
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e48:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002e54:	f002 f988 	bl	8005168 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8002e5e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_RESET;
 8002e62:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  return HAL_OK;
 8002e66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
}
 8002e6a:	bd10      	pop	{r4, pc}
 8002e6c:	40013000 	.word	0x40013000
 8002e70:	58001400 	.word	0x58001400
 8002e74:	08006876 	.word	0x08006876

08002e78 <HAL_SPI_TransmitReceive>:
{
 8002e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e7c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002e7e:	6883      	ldr	r3, [r0, #8]
{
 8002e80:	4604      	mov	r4, r0
 8002e82:	460e      	mov	r6, r1
 8002e84:	4691      	mov	r9, r2
 8002e86:	9f08      	ldr	r7, [sp, #32]
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002e88:	b123      	cbz	r3, 8002e94 <HAL_SPI_TransmitReceive+0x1c>
 8002e8a:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8002e8e:	48ad      	ldr	r0, [pc, #692]	; (8003144 <HAL_SPI_TransmitReceive+0x2cc>)
 8002e90:	f002 f916 	bl	80050c0 <assert_failed>
  __HAL_LOCK(hspi);
 8002e94:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d015      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x50>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002ea2:	f7fd fc55 	bl	8000750 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002ea6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8002eaa:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8002eac:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002eae:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d00c      	beq.n	8002ece <HAL_SPI_TransmitReceive+0x56>
 8002eb4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002eb8:	d103      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eba:	68a2      	ldr	r2, [r4, #8]
 8002ebc:	b90a      	cbnz	r2, 8002ec2 <HAL_SPI_TransmitReceive+0x4a>
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d005      	beq.n	8002ece <HAL_SPI_TransmitReceive+0x56>
    __HAL_UNLOCK(hspi);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8002ec8:	2002      	movs	r0, #2
 8002eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8002ece:	b11e      	cbz	r6, 8002ed8 <HAL_SPI_TransmitReceive+0x60>
 8002ed0:	f1b9 0f00 	cmp.w	r9, #0
 8002ed4:	d000      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x60>
 8002ed6:	b92d      	cbnz	r5, 8002ee4 <HAL_SPI_TransmitReceive+0x6c>
    __HAL_UNLOCK(hspi);
 8002ed8:	2300      	movs	r3, #0
    return errorcode;
 8002eda:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8002edc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8002ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ee4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eec:	2305      	movs	r3, #5
 8002eee:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef2:	2300      	movs	r3, #0
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002ef4:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ef6:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxISR       = NULL;
 8002f02:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->RxXferCount = Size;
 8002f04:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8002f08:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->TxXferCount = Size;
 8002f0a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002f0e:	6853      	ldr	r3, [r2, #4]
  hspi->RxXferSize  = Size;
 8002f10:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002f14:	ea4f 4313 	mov.w	r3, r3, lsr #16
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f18:	65e6      	str	r6, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8002f1a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002f1e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8002f22:	ea43 0305 	orr.w	r3, r3, r5
 8002f26:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f30:	d103      	bne.n	8002f3a <HAL_SPI_TransmitReceive+0xc2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f38:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002f3a:	68e3      	ldr	r3, [r4, #12]
 8002f3c:	2b0f      	cmp	r3, #15
 8002f3e:	d947      	bls.n	8002fd0 <HAL_SPI_TransmitReceive+0x158>
 8002f40:	4629      	mov	r1, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8002f42:	f248 0008 	movw	r0, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8002f46:	6953      	ldr	r3, [r2, #20]
 8002f48:	079e      	lsls	r6, r3, #30
 8002f4a:	d50e      	bpl.n	8002f6a <HAL_SPI_TransmitReceive+0xf2>
 8002f4c:	b16d      	cbz	r5, 8002f6a <HAL_SPI_TransmitReceive+0xf2>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002f4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f54:	6215      	str	r5, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8002f56:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8002f58:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8002f64:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8002f68:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8002f6a:	6953      	ldr	r3, [r2, #20]
 8002f6c:	4203      	tst	r3, r0
 8002f6e:	d010      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x11a>
 8002f70:	2900      	cmp	r1, #0
 8002f72:	f000 8110 	beq.w	8003196 <HAL_SPI_TransmitReceive+0x31e>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002f76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f7a:	f843 1b04 	str.w	r1, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8002f7e:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8002f80:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8002f8c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8002f90:	b289      	uxth	r1, r1
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002f92:	2d00      	cmp	r5, #0
 8002f94:	d1d7      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0xce>
 8002f96:	2900      	cmp	r1, #0
 8002f98:	d1d5      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0xce>
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f9a:	f7fd fbd9 	bl	8000750 <HAL_GetTick>
 8002f9e:	eba0 0008 	sub.w	r0, r0, r8
 8002fa2:	4287      	cmp	r7, r0
 8002fa4:	f200 8093 	bhi.w	80030ce <HAL_SPI_TransmitReceive+0x256>
 8002fa8:	1c78      	adds	r0, r7, #1
 8002faa:	f000 8090 	beq.w	80030ce <HAL_SPI_TransmitReceive+0x256>
        SPI_CloseTransfer(hspi);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff fdbc 	bl	8002b2c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8002fb4:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8002fb6:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 8002fb8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002fbc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 8002fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fd0:	2b07      	cmp	r3, #7
 8002fd2:	462e      	mov	r6, r5
 8002fd4:	d83f      	bhi.n	8003056 <HAL_SPI_TransmitReceive+0x1de>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	6953      	ldr	r3, [r2, #20]
 8002fda:	0798      	lsls	r0, r3, #30
 8002fdc:	d515      	bpl.n	800300a <HAL_SPI_TransmitReceive+0x192>
 8002fde:	b1a5      	cbz	r5, 800300a <HAL_SPI_TransmitReceive+0x192>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8002fe0:	2d03      	cmp	r5, #3
 8002fe2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fe4:	f240 8097 	bls.w	8003116 <HAL_SPI_TransmitReceive+0x29e>
 8002fe8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fea:	2940      	cmp	r1, #64	; 0x40
 8002fec:	f240 8095 	bls.w	800311a <HAL_SPI_TransmitReceive+0x2a2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002ff0:	f853 1b04 	ldr.w	r1, [r3], #4
 8002ff4:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8002ff6:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8002ff8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002ffc:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003004:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8003008:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	6953      	ldr	r3, [r2, #20]
 800300e:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8003012:	d013      	beq.n	800303c <HAL_SPI_TransmitReceive+0x1c4>
 8003014:	b196      	cbz	r6, 800303c <HAL_SPI_TransmitReceive+0x1c4>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003016:	6953      	ldr	r3, [r2, #20]
 8003018:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800301c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800301e:	f000 8093 	beq.w	8003148 <HAL_SPI_TransmitReceive+0x2d0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003022:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003024:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003028:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800302a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800302e:	3b04      	subs	r3, #4
          hspi->RxXferCount--;
 8003030:	b29b      	uxth	r3, r3
 8003032:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003036:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 800303a:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303c:	f7fd fb88 	bl	8000750 <HAL_GetTick>
 8003040:	eba0 0008 	sub.w	r0, r0, r8
 8003044:	4287      	cmp	r7, r0
 8003046:	d801      	bhi.n	800304c <HAL_SPI_TransmitReceive+0x1d4>
 8003048:	1c79      	adds	r1, r7, #1
 800304a:	d1b0      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x136>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800304c:	2d00      	cmp	r5, #0
 800304e:	d1c2      	bne.n	8002fd6 <HAL_SPI_TransmitReceive+0x15e>
 8003050:	2e00      	cmp	r6, #0
 8003052:	d1c0      	bne.n	8002fd6 <HAL_SPI_TransmitReceive+0x15e>
 8003054:	e03b      	b.n	80030ce <HAL_SPI_TransmitReceive+0x256>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	6953      	ldr	r3, [r2, #20]
 800305a:	0799      	lsls	r1, r3, #30
 800305c:	d513      	bpl.n	8003086 <HAL_SPI_TransmitReceive+0x20e>
 800305e:	b195      	cbz	r5, 8003086 <HAL_SPI_TransmitReceive+0x20e>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003060:	2d01      	cmp	r5, #1
 8003062:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003064:	d947      	bls.n	80030f6 <HAL_SPI_TransmitReceive+0x27e>
 8003066:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003068:	2900      	cmp	r1, #0
 800306a:	d044      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x27e>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800306c:	f853 1b04 	ldr.w	r1, [r3], #4
 8003070:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003072:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003074:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003078:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800307a:	b29b      	uxth	r3, r3
 800307c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003080:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8003084:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8003086:	6953      	ldr	r3, [r2, #20]
 8003088:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800308c:	d012      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x23c>
 800308e:	b18e      	cbz	r6, 80030b4 <HAL_SPI_TransmitReceive+0x23c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003090:	6953      	ldr	r3, [r2, #20]
 8003092:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003098:	d035      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x28e>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800309a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800309c:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80030a0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80030a2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80030a6:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80030ae:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 80030b2:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b4:	f7fd fb4c 	bl	8000750 <HAL_GetTick>
 80030b8:	eba0 0008 	sub.w	r0, r0, r8
 80030bc:	4287      	cmp	r7, r0
 80030be:	d802      	bhi.n	80030c6 <HAL_SPI_TransmitReceive+0x24e>
 80030c0:	1c7b      	adds	r3, r7, #1
 80030c2:	f47f af74 	bne.w	8002fae <HAL_SPI_TransmitReceive+0x136>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80030c6:	2d00      	cmp	r5, #0
 80030c8:	d1c5      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x1de>
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	d1c3      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x1de>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	071b      	lsls	r3, r3, #28
 80030d4:	d550      	bpl.n	8003178 <HAL_SPI_TransmitReceive+0x300>
  SPI_CloseTransfer(hspi);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7ff fd28 	bl	8002b2c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 80030dc:	2300      	movs	r3, #0
 80030de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 80030ec:	3000      	adds	r0, #0
 80030ee:	bf18      	it	ne
 80030f0:	2001      	movne	r0, #1
 80030f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 80030f6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80030fa:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 80030fe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003102:	3b01      	subs	r3, #1
 8003104:	e7b9      	b.n	800307a <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003106:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003108:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800310c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800310e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003112:	3b01      	subs	r3, #1
 8003114:	e7c8      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x230>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003116:	2d01      	cmp	r5, #1
 8003118:	d009      	beq.n	800312e <HAL_SPI_TransmitReceive+0x2b6>
 800311a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800311c:	b139      	cbz	r1, 800312e <HAL_SPI_TransmitReceive+0x2b6>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800311e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003122:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003124:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003126:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800312a:	3b02      	subs	r3, #2
 800312c:	e767      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x186>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003134:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003136:	3301      	adds	r3, #1
 8003138:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800313a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800313e:	3b01      	subs	r3, #1
 8003140:	e75d      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x186>
 8003142:	bf00      	nop
 8003144:	08006876 	.word	0x08006876
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8003148:	6951      	ldr	r1, [r2, #20]
 800314a:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800314e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003152:	d907      	bls.n	8003164 <HAL_SPI_TransmitReceive+0x2ec>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003154:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003156:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800315a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800315c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003160:	3b02      	subs	r3, #2
 8003162:	e765      	b.n	8003030 <HAL_SPI_TransmitReceive+0x1b8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003164:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8003168:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800316a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316c:	3301      	adds	r3, #1
 800316e:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8003170:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003174:	3b01      	subs	r3, #1
 8003176:	e75b      	b.n	8003030 <HAL_SPI_TransmitReceive+0x1b8>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003178:	f7fd faea 	bl	8000750 <HAL_GetTick>
 800317c:	eba0 0008 	sub.w	r0, r0, r8
 8003180:	4287      	cmp	r7, r0
 8003182:	d8a4      	bhi.n	80030ce <HAL_SPI_TransmitReceive+0x256>
 8003184:	1c7a      	adds	r2, r7, #1
 8003186:	d0a2      	beq.n	80030ce <HAL_SPI_TransmitReceive+0x256>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003188:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800318c:	f043 0320 	orr.w	r3, r3, #32
 8003190:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8003194:	e79f      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x25e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003196:	2d00      	cmp	r5, #0
 8003198:	f47f aed5 	bne.w	8002f46 <HAL_SPI_TransmitReceive+0xce>
 800319c:	e6fd      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x122>
 800319e:	bf00      	nop

080031a0 <HAL_SPI_GetState>:
  return hspi->State;
 80031a0:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
}
 80031a4:	4770      	bx	lr

080031a6 <HAL_UART_GetState>:
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80031a6:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 80031aa:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
}
 80031ae:	4310      	orrs	r0, r2
 80031b0:	4770      	bx	lr
 80031b2:	0000      	movs	r0, r0
 80031b4:	0000      	movs	r0, r0
	...

080031b8 <UART_SetConfig>:
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80031b8:	6842      	ldr	r2, [r0, #4]
 80031ba:	4ba3      	ldr	r3, [pc, #652]	; (8003448 <UART_SetConfig+0x290>)
 80031bc:	429a      	cmp	r2, r3
{
 80031be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031c2:	4605      	mov	r5, r0
 80031c4:	b087      	sub	sp, #28
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80031c6:	d904      	bls.n	80031d2 <UART_SetConfig+0x1a>
 80031c8:	f640 3134 	movw	r1, #2868	; 0xb34
 80031cc:	489f      	ldr	r0, [pc, #636]	; (800344c <UART_SetConfig+0x294>)
 80031ce:	f001 ff77 	bl	80050c0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80031d2:	68ab      	ldr	r3, [r5, #8]
 80031d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d8:	d007      	beq.n	80031ea <UART_SetConfig+0x32>
 80031da:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80031de:	d004      	beq.n	80031ea <UART_SetConfig+0x32>
 80031e0:	f640 3135 	movw	r1, #2869	; 0xb35
 80031e4:	4899      	ldr	r0, [pc, #612]	; (800344c <UART_SetConfig+0x294>)
 80031e6:	f001 ff6b 	bl	80050c0 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ea:	4b99      	ldr	r3, [pc, #612]	; (8003450 <UART_SetConfig+0x298>)
 80031ec:	682a      	ldr	r2, [r5, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	68eb      	ldr	r3, [r5, #12]
 80031f2:	f040 8081 	bne.w	80032f8 <UART_SetConfig+0x140>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80031f6:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80031fa:	d004      	beq.n	8003206 <UART_SetConfig+0x4e>
 80031fc:	f640 3138 	movw	r1, #2872	; 0xb38
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003200:	4892      	ldr	r0, [pc, #584]	; (800344c <UART_SetConfig+0x294>)
 8003202:	f001 ff5d 	bl	80050c0 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003206:	692b      	ldr	r3, [r5, #16]
 8003208:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800320c:	d007      	beq.n	800321e <UART_SetConfig+0x66>
 800320e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003212:	d004      	beq.n	800321e <UART_SetConfig+0x66>
 8003214:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8003218:	488c      	ldr	r0, [pc, #560]	; (800344c <UART_SetConfig+0x294>)
 800321a:	f001 ff51 	bl	80050c0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800321e:	696b      	ldr	r3, [r5, #20]
 8003220:	f033 020c 	bics.w	r2, r3, #12
 8003224:	d100      	bne.n	8003228 <UART_SetConfig+0x70>
 8003226:	b923      	cbnz	r3, 8003232 <UART_SetConfig+0x7a>
 8003228:	f640 3141 	movw	r1, #2881	; 0xb41
 800322c:	4887      	ldr	r0, [pc, #540]	; (800344c <UART_SetConfig+0x294>)
 800322e:	f001 ff47 	bl	80050c0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003232:	69ab      	ldr	r3, [r5, #24]
 8003234:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8003238:	d004      	beq.n	8003244 <UART_SetConfig+0x8c>
 800323a:	f640 3142 	movw	r1, #2882	; 0xb42
 800323e:	4883      	ldr	r0, [pc, #524]	; (800344c <UART_SetConfig+0x294>)
 8003240:	f001 ff3e 	bl	80050c0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003244:	69eb      	ldr	r3, [r5, #28]
 8003246:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800324a:	d004      	beq.n	8003256 <UART_SetConfig+0x9e>
 800324c:	f640 3143 	movw	r1, #2883	; 0xb43
 8003250:	487e      	ldr	r0, [pc, #504]	; (800344c <UART_SetConfig+0x294>)
 8003252:	f001 ff35 	bl	80050c0 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8003256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003258:	2b0b      	cmp	r3, #11
 800325a:	d904      	bls.n	8003266 <UART_SetConfig+0xae>
 800325c:	f640 3144 	movw	r1, #2884	; 0xb44
 8003260:	487a      	ldr	r0, [pc, #488]	; (800344c <UART_SetConfig+0x294>)
 8003262:	f001 ff2d 	bl	80050c0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003266:	68ab      	ldr	r3, [r5, #8]
 8003268:	6929      	ldr	r1, [r5, #16]
 800326a:	69ea      	ldr	r2, [r5, #28]
 800326c:	4319      	orrs	r1, r3
 800326e:	696b      	ldr	r3, [r5, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003270:	6e68      	ldr	r0, [r5, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003272:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003274:	682b      	ldr	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003276:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003278:	681c      	ldr	r4, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800327a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800327c:	4875      	ldr	r0, [pc, #468]	; (8003454 <UART_SetConfig+0x29c>)
 800327e:	4020      	ands	r0, r4
 8003280:	4301      	orrs	r1, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003282:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003284:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800328c:	4301      	orrs	r1, r0
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800328e:	69a8      	ldr	r0, [r5, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	6059      	str	r1, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003292:	496f      	ldr	r1, [pc, #444]	; (8003450 <UART_SetConfig+0x298>)
 8003294:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003296:	bf1c      	itt	ne
 8003298:	6a29      	ldrne	r1, [r5, #32]
 800329a:	4308      	orrne	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80032a2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80032a6:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032aa:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ae:	f021 010f 	bic.w	r1, r1, #15
 80032b2:	4301      	orrs	r1, r0
 80032b4:	62d9      	str	r1, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b6:	4968      	ldr	r1, [pc, #416]	; (8003458 <UART_SetConfig+0x2a0>)
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d12d      	bne.n	8003318 <UART_SetConfig+0x160>
 80032bc:	4b67      	ldr	r3, [pc, #412]	; (800345c <UART_SetConfig+0x2a4>)
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032c4:	2b28      	cmp	r3, #40	; 0x28
 80032c6:	f200 8779 	bhi.w	80041bc <UART_SetConfig+0x1004>
 80032ca:	4965      	ldr	r1, [pc, #404]	; (8003460 <UART_SetConfig+0x2a8>)
 80032cc:	5ccc      	ldrb	r4, [r1, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80032d2:	f040 877a 	bne.w	80041ca <UART_SetConfig+0x1012>
  {
    switch (clocksource)
 80032d6:	2c08      	cmp	r4, #8
 80032d8:	f000 84f3 	beq.w	8003cc2 <UART_SetConfig+0xb0a>
 80032dc:	f200 8407 	bhi.w	8003aee <UART_SetConfig+0x936>
 80032e0:	2c01      	cmp	r4, #1
 80032e2:	f000 847f 	beq.w	8003be4 <UART_SetConfig+0xa2c>
 80032e6:	f0c0 8441 	bcc.w	8003b6c <UART_SetConfig+0x9b4>
 80032ea:	2c04      	cmp	r4, #4
 80032ec:	f000 84c4 	beq.w	8003c78 <UART_SetConfig+0xac0>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        break;
      default:
        ret = HAL_ERROR;
 80032f0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f000 bc9d 	b.w	8003c32 <UART_SetConfig+0xa7a>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80032f8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80032fc:	d004      	beq.n	8003308 <UART_SetConfig+0x150>
 80032fe:	f640 313c 	movw	r1, #2876	; 0xb3c
 8003302:	4852      	ldr	r0, [pc, #328]	; (800344c <UART_SetConfig+0x294>)
 8003304:	f001 fedc 	bl	80050c0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003308:	6a2b      	ldr	r3, [r5, #32]
 800330a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800330e:	f43f af7a 	beq.w	8003206 <UART_SetConfig+0x4e>
 8003312:	f640 313d 	movw	r1, #2877	; 0xb3d
 8003316:	e773      	b.n	8003200 <UART_SetConfig+0x48>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003318:	4952      	ldr	r1, [pc, #328]	; (8003464 <UART_SetConfig+0x2ac>)
 800331a:	428b      	cmp	r3, r1
 800331c:	d108      	bne.n	8003330 <UART_SetConfig+0x178>
 800331e:	4b4f      	ldr	r3, [pc, #316]	; (800345c <UART_SetConfig+0x2a4>)
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	2b05      	cmp	r3, #5
 8003328:	f200 8745 	bhi.w	80041b6 <UART_SetConfig+0xffe>
 800332c:	494e      	ldr	r1, [pc, #312]	; (8003468 <UART_SetConfig+0x2b0>)
 800332e:	e7cd      	b.n	80032cc <UART_SetConfig+0x114>
 8003330:	494e      	ldr	r1, [pc, #312]	; (800346c <UART_SetConfig+0x2b4>)
 8003332:	428b      	cmp	r3, r1
 8003334:	d108      	bne.n	8003348 <UART_SetConfig+0x190>
 8003336:	4b49      	ldr	r3, [pc, #292]	; (800345c <UART_SetConfig+0x2a4>)
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	2b05      	cmp	r3, #5
 8003340:	f200 8739 	bhi.w	80041b6 <UART_SetConfig+0xffe>
 8003344:	494a      	ldr	r1, [pc, #296]	; (8003470 <UART_SetConfig+0x2b8>)
 8003346:	e7c1      	b.n	80032cc <UART_SetConfig+0x114>
 8003348:	494a      	ldr	r1, [pc, #296]	; (8003474 <UART_SetConfig+0x2bc>)
 800334a:	428b      	cmp	r3, r1
 800334c:	d108      	bne.n	8003360 <UART_SetConfig+0x1a8>
 800334e:	4b43      	ldr	r3, [pc, #268]	; (800345c <UART_SetConfig+0x2a4>)
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	2b05      	cmp	r3, #5
 8003358:	f200 872d 	bhi.w	80041b6 <UART_SetConfig+0xffe>
 800335c:	4946      	ldr	r1, [pc, #280]	; (8003478 <UART_SetConfig+0x2c0>)
 800335e:	e7b5      	b.n	80032cc <UART_SetConfig+0x114>
 8003360:	4946      	ldr	r1, [pc, #280]	; (800347c <UART_SetConfig+0x2c4>)
 8003362:	428b      	cmp	r3, r1
 8003364:	d108      	bne.n	8003378 <UART_SetConfig+0x1c0>
 8003366:	4b3d      	ldr	r3, [pc, #244]	; (800345c <UART_SetConfig+0x2a4>)
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	2b05      	cmp	r3, #5
 8003370:	f200 8721 	bhi.w	80041b6 <UART_SetConfig+0xffe>
 8003374:	4942      	ldr	r1, [pc, #264]	; (8003480 <UART_SetConfig+0x2c8>)
 8003376:	e7a9      	b.n	80032cc <UART_SetConfig+0x114>
 8003378:	4942      	ldr	r1, [pc, #264]	; (8003484 <UART_SetConfig+0x2cc>)
 800337a:	428b      	cmp	r3, r1
 800337c:	d108      	bne.n	8003390 <UART_SetConfig+0x1d8>
 800337e:	4b37      	ldr	r3, [pc, #220]	; (800345c <UART_SetConfig+0x2a4>)
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003386:	2b28      	cmp	r3, #40	; 0x28
 8003388:	f200 8715 	bhi.w	80041b6 <UART_SetConfig+0xffe>
 800338c:	493e      	ldr	r1, [pc, #248]	; (8003488 <UART_SetConfig+0x2d0>)
 800338e:	e79d      	b.n	80032cc <UART_SetConfig+0x114>
 8003390:	493e      	ldr	r1, [pc, #248]	; (800348c <UART_SetConfig+0x2d4>)
 8003392:	428b      	cmp	r3, r1
 8003394:	d108      	bne.n	80033a8 <UART_SetConfig+0x1f0>
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <UART_SetConfig+0x2a4>)
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	2b05      	cmp	r3, #5
 80033a0:	f200 8709 	bhi.w	80041b6 <UART_SetConfig+0xffe>
 80033a4:	493a      	ldr	r1, [pc, #232]	; (8003490 <UART_SetConfig+0x2d8>)
 80033a6:	e791      	b.n	80032cc <UART_SetConfig+0x114>
 80033a8:	493a      	ldr	r1, [pc, #232]	; (8003494 <UART_SetConfig+0x2dc>)
 80033aa:	428b      	cmp	r3, r1
 80033ac:	d108      	bne.n	80033c0 <UART_SetConfig+0x208>
 80033ae:	4b2b      	ldr	r3, [pc, #172]	; (800345c <UART_SetConfig+0x2a4>)
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	f200 86fd 	bhi.w	80041b6 <UART_SetConfig+0xffe>
 80033bc:	4936      	ldr	r1, [pc, #216]	; (8003498 <UART_SetConfig+0x2e0>)
 80033be:	e785      	b.n	80032cc <UART_SetConfig+0x114>
 80033c0:	4923      	ldr	r1, [pc, #140]	; (8003450 <UART_SetConfig+0x298>)
 80033c2:	428b      	cmp	r3, r1
 80033c4:	f040 86f7 	bne.w	80041b6 <UART_SetConfig+0xffe>
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <UART_SetConfig+0x2a4>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d901      	bls.n	80033d8 <UART_SetConfig+0x220>
        ret = HAL_ERROR;
 80033d4:	2201      	movs	r2, #1
 80033d6:	e0d6      	b.n	8003586 <UART_SetConfig+0x3ce>
 80033d8:	4a30      	ldr	r2, [pc, #192]	; (800349c <UART_SetConfig+0x2e4>)
 80033da:	5cd4      	ldrb	r4, [r2, r3]
    switch (clocksource)
 80033dc:	2c08      	cmp	r4, #8
 80033de:	f000 80f8 	beq.w	80035d2 <UART_SetConfig+0x41a>
 80033e2:	d85d      	bhi.n	80034a0 <UART_SetConfig+0x2e8>
 80033e4:	2c02      	cmp	r4, #2
 80033e6:	f000 80ad 	beq.w	8003544 <UART_SetConfig+0x38c>
 80033ea:	2c04      	cmp	r4, #4
 80033ec:	d1f2      	bne.n	80033d4 <UART_SetConfig+0x21c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033ee:	4668      	mov	r0, sp
 80033f0:	f7ff fa32 	bl	8002858 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80033f4:	9a01      	ldr	r2, [sp, #4]
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80033f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80ef 	beq.w	80035dc <UART_SetConfig+0x424>
 80033fe:	2b01      	cmp	r3, #1
 8003400:	f000 80ee 	beq.w	80035e0 <UART_SetConfig+0x428>
 8003404:	2b02      	cmp	r3, #2
 8003406:	f000 80ed 	beq.w	80035e4 <UART_SetConfig+0x42c>
 800340a:	2b03      	cmp	r3, #3
 800340c:	f000 80ec 	beq.w	80035e8 <UART_SetConfig+0x430>
 8003410:	2b04      	cmp	r3, #4
 8003412:	f000 80da 	beq.w	80035ca <UART_SetConfig+0x412>
 8003416:	2b05      	cmp	r3, #5
 8003418:	f000 80e8 	beq.w	80035ec <UART_SetConfig+0x434>
 800341c:	2b06      	cmp	r3, #6
 800341e:	f000 80e7 	beq.w	80035f0 <UART_SetConfig+0x438>
 8003422:	2b07      	cmp	r3, #7
 8003424:	f000 80e6 	beq.w	80035f4 <UART_SetConfig+0x43c>
 8003428:	2b08      	cmp	r3, #8
 800342a:	f000 80e5 	beq.w	80035f8 <UART_SetConfig+0x440>
 800342e:	2b09      	cmp	r3, #9
 8003430:	f000 80e4 	beq.w	80035fc <UART_SetConfig+0x444>
 8003434:	2b0a      	cmp	r3, #10
 8003436:	f000 80e3 	beq.w	8003600 <UART_SetConfig+0x448>
 800343a:	2b0b      	cmp	r3, #11
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003444:	e0c2      	b.n	80035cc <UART_SetConfig+0x414>
 8003446:	bf00      	nop
 8003448:	00bebc20 	.word	0x00bebc20
 800344c:	080068e3 	.word	0x080068e3
 8003450:	58000c00 	.word	0x58000c00
 8003454:	cfff69f3 	.word	0xcfff69f3
 8003458:	40011000 	.word	0x40011000
 800345c:	58024400 	.word	0x58024400
 8003460:	080068ae 	.word	0x080068ae
 8003464:	40004400 	.word	0x40004400
 8003468:	080068d7 	.word	0x080068d7
 800346c:	40004800 	.word	0x40004800
 8003470:	080068d7 	.word	0x080068d7
 8003474:	40004c00 	.word	0x40004c00
 8003478:	080068d7 	.word	0x080068d7
 800347c:	40005000 	.word	0x40005000
 8003480:	080068d7 	.word	0x080068d7
 8003484:	40011400 	.word	0x40011400
 8003488:	080068ae 	.word	0x080068ae
 800348c:	40007800 	.word	0x40007800
 8003490:	080068d7 	.word	0x080068d7
 8003494:	40007c00 	.word	0x40007c00
 8003498:	080068d7 	.word	0x080068d7
 800349c:	080068dd 	.word	0x080068dd
    switch (clocksource)
 80034a0:	2c20      	cmp	r4, #32
 80034a2:	f000 80e1 	beq.w	8003668 <UART_SetConfig+0x4b0>
 80034a6:	2c40      	cmp	r4, #64	; 0x40
 80034a8:	f000 80f8 	beq.w	800369c <UART_SetConfig+0x4e4>
 80034ac:	2c10      	cmp	r4, #16
 80034ae:	d191      	bne.n	80033d4 <UART_SetConfig+0x21c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b0:	4bac      	ldr	r3, [pc, #688]	; (8003764 <UART_SetConfig+0x5ac>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	0692      	lsls	r2, r2, #26
 80034b6:	f140 80bb 	bpl.w	8003630 <UART_SetConfig+0x478>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4baa      	ldr	r3, [pc, #680]	; (8003768 <UART_SetConfig+0x5b0>)
 80034be:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80034c2:	40d3      	lsrs	r3, r2
 80034c4:	2800      	cmp	r0, #0
 80034c6:	f000 809d 	beq.w	8003604 <UART_SetConfig+0x44c>
 80034ca:	2801      	cmp	r0, #1
 80034cc:	f000 809c 	beq.w	8003608 <UART_SetConfig+0x450>
 80034d0:	2802      	cmp	r0, #2
 80034d2:	f000 809b 	beq.w	800360c <UART_SetConfig+0x454>
 80034d6:	2803      	cmp	r0, #3
 80034d8:	f000 809a 	beq.w	8003610 <UART_SetConfig+0x458>
 80034dc:	2804      	cmp	r0, #4
 80034de:	f000 8099 	beq.w	8003614 <UART_SetConfig+0x45c>
 80034e2:	2805      	cmp	r0, #5
 80034e4:	f000 8098 	beq.w	8003618 <UART_SetConfig+0x460>
 80034e8:	2806      	cmp	r0, #6
 80034ea:	f000 8097 	beq.w	800361c <UART_SetConfig+0x464>
 80034ee:	2807      	cmp	r0, #7
 80034f0:	f000 8096 	beq.w	8003620 <UART_SetConfig+0x468>
 80034f4:	2808      	cmp	r0, #8
 80034f6:	f000 8095 	beq.w	8003624 <UART_SetConfig+0x46c>
 80034fa:	2809      	cmp	r0, #9
 80034fc:	f000 8094 	beq.w	8003628 <UART_SetConfig+0x470>
 8003500:	280a      	cmp	r0, #10
 8003502:	f000 8093 	beq.w	800362c <UART_SetConfig+0x474>
 8003506:	280b      	cmp	r0, #11
 8003508:	bf14      	ite	ne
 800350a:	2001      	movne	r0, #1
 800350c:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8003510:	fbb3 f2f0 	udiv	r2, r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003514:	686e      	ldr	r6, [r5, #4]
 8003516:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800351a:	4293      	cmp	r3, r2
 800351c:	f63f af5a 	bhi.w	80033d4 <UART_SetConfig+0x21c>
 8003520:	ebb2 3f06 	cmp.w	r2, r6, lsl #12
 8003524:	f63f af56 	bhi.w	80033d4 <UART_SetConfig+0x21c>
        switch (clocksource)
 8003528:	2c08      	cmp	r4, #8
 800352a:	f000 81ca 	beq.w	80038c2 <UART_SetConfig+0x70a>
 800352e:	f200 813b 	bhi.w	80037a8 <UART_SetConfig+0x5f0>
 8003532:	2c02      	cmp	r4, #2
 8003534:	f000 8185 	beq.w	8003842 <UART_SetConfig+0x68a>
 8003538:	2c04      	cmp	r4, #4
 800353a:	f000 81bd 	beq.w	80038b8 <UART_SetConfig+0x700>
            ret = HAL_ERROR;
 800353e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003540:	2000      	movs	r0, #0
 8003542:	e1b0      	b.n	80038a6 <UART_SetConfig+0x6ee>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003544:	f7ff f976 	bl	8002834 <HAL_RCCEx_GetD3PCLK1Freq>
 8003548:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800354a:	b343      	cbz	r3, 800359e <UART_SetConfig+0x3e6>
 800354c:	2b01      	cmp	r3, #1
 800354e:	d028      	beq.n	80035a2 <UART_SetConfig+0x3ea>
 8003550:	2b02      	cmp	r3, #2
 8003552:	d028      	beq.n	80035a6 <UART_SetConfig+0x3ee>
 8003554:	2b03      	cmp	r3, #3
 8003556:	d028      	beq.n	80035aa <UART_SetConfig+0x3f2>
 8003558:	2b04      	cmp	r3, #4
 800355a:	d028      	beq.n	80035ae <UART_SetConfig+0x3f6>
 800355c:	2b05      	cmp	r3, #5
 800355e:	d028      	beq.n	80035b2 <UART_SetConfig+0x3fa>
 8003560:	2b06      	cmp	r3, #6
 8003562:	d028      	beq.n	80035b6 <UART_SetConfig+0x3fe>
 8003564:	2b07      	cmp	r3, #7
 8003566:	d028      	beq.n	80035ba <UART_SetConfig+0x402>
 8003568:	2b08      	cmp	r3, #8
 800356a:	d028      	beq.n	80035be <UART_SetConfig+0x406>
 800356c:	2b09      	cmp	r3, #9
 800356e:	d028      	beq.n	80035c2 <UART_SetConfig+0x40a>
 8003570:	2b0a      	cmp	r3, #10
 8003572:	d028      	beq.n	80035c6 <UART_SetConfig+0x40e>
 8003574:	2b0b      	cmp	r3, #11
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800357e:	fbb0 f2f3 	udiv	r2, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003582:	2a00      	cmp	r2, #0
 8003584:	d1c6      	bne.n	8003514 <UART_SetConfig+0x35c>
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003586:	2301      	movs	r3, #1
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
  huart->TxISR = NULL;

  return ret;
}
 8003588:	4610      	mov	r0, r2
  huart->NbTxDataToProcess = 1;
 800358a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800358e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  huart->RxISR = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	66eb      	str	r3, [r5, #108]	; 0x6c
  huart->TxISR = NULL;
 8003596:	672b      	str	r3, [r5, #112]	; 0x70
}
 8003598:	b007      	add	sp, #28
 800359a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800359e:	2301      	movs	r3, #1
 80035a0:	e7ed      	b.n	800357e <UART_SetConfig+0x3c6>
 80035a2:	4623      	mov	r3, r4
 80035a4:	e7eb      	b.n	800357e <UART_SetConfig+0x3c6>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e7e9      	b.n	800357e <UART_SetConfig+0x3c6>
 80035aa:	2306      	movs	r3, #6
 80035ac:	e7e7      	b.n	800357e <UART_SetConfig+0x3c6>
 80035ae:	2308      	movs	r3, #8
 80035b0:	e7e5      	b.n	800357e <UART_SetConfig+0x3c6>
 80035b2:	230a      	movs	r3, #10
 80035b4:	e7e3      	b.n	800357e <UART_SetConfig+0x3c6>
 80035b6:	230c      	movs	r3, #12
 80035b8:	e7e1      	b.n	800357e <UART_SetConfig+0x3c6>
 80035ba:	2310      	movs	r3, #16
 80035bc:	e7df      	b.n	800357e <UART_SetConfig+0x3c6>
 80035be:	2320      	movs	r3, #32
 80035c0:	e7dd      	b.n	800357e <UART_SetConfig+0x3c6>
 80035c2:	2340      	movs	r3, #64	; 0x40
 80035c4:	e7db      	b.n	800357e <UART_SetConfig+0x3c6>
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	e7d9      	b.n	800357e <UART_SetConfig+0x3c6>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035ca:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035cc:	fbb2 f2f3 	udiv	r2, r2, r3
        break;
 80035d0:	e7d7      	b.n	8003582 <UART_SetConfig+0x3ca>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035d2:	a803      	add	r0, sp, #12
 80035d4:	f7ff f9ea 	bl	80029ac <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035d8:	9a04      	ldr	r2, [sp, #16]
 80035da:	e70c      	b.n	80033f6 <UART_SetConfig+0x23e>
 80035dc:	2301      	movs	r3, #1
 80035de:	e7f5      	b.n	80035cc <UART_SetConfig+0x414>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e7f3      	b.n	80035cc <UART_SetConfig+0x414>
 80035e4:	2304      	movs	r3, #4
 80035e6:	e7f1      	b.n	80035cc <UART_SetConfig+0x414>
 80035e8:	2306      	movs	r3, #6
 80035ea:	e7ef      	b.n	80035cc <UART_SetConfig+0x414>
 80035ec:	230a      	movs	r3, #10
 80035ee:	e7ed      	b.n	80035cc <UART_SetConfig+0x414>
 80035f0:	230c      	movs	r3, #12
 80035f2:	e7eb      	b.n	80035cc <UART_SetConfig+0x414>
 80035f4:	2310      	movs	r3, #16
 80035f6:	e7e9      	b.n	80035cc <UART_SetConfig+0x414>
 80035f8:	2320      	movs	r3, #32
 80035fa:	e7e7      	b.n	80035cc <UART_SetConfig+0x414>
 80035fc:	2340      	movs	r3, #64	; 0x40
 80035fe:	e7e5      	b.n	80035cc <UART_SetConfig+0x414>
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	e7e3      	b.n	80035cc <UART_SetConfig+0x414>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003604:	2001      	movs	r0, #1
 8003606:	e783      	b.n	8003510 <UART_SetConfig+0x358>
 8003608:	2002      	movs	r0, #2
 800360a:	e781      	b.n	8003510 <UART_SetConfig+0x358>
 800360c:	2004      	movs	r0, #4
 800360e:	e77f      	b.n	8003510 <UART_SetConfig+0x358>
 8003610:	2006      	movs	r0, #6
 8003612:	e77d      	b.n	8003510 <UART_SetConfig+0x358>
 8003614:	2008      	movs	r0, #8
 8003616:	e77b      	b.n	8003510 <UART_SetConfig+0x358>
 8003618:	200a      	movs	r0, #10
 800361a:	e779      	b.n	8003510 <UART_SetConfig+0x358>
 800361c:	200c      	movs	r0, #12
 800361e:	e777      	b.n	8003510 <UART_SetConfig+0x358>
 8003620:	2010      	movs	r0, #16
 8003622:	e775      	b.n	8003510 <UART_SetConfig+0x358>
 8003624:	2020      	movs	r0, #32
 8003626:	e773      	b.n	8003510 <UART_SetConfig+0x358>
 8003628:	2040      	movs	r0, #64	; 0x40
 800362a:	e771      	b.n	8003510 <UART_SetConfig+0x358>
 800362c:	2080      	movs	r0, #128	; 0x80
 800362e:	e76f      	b.n	8003510 <UART_SetConfig+0x358>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003630:	2800      	cmp	r0, #0
 8003632:	d04f      	beq.n	80036d4 <UART_SetConfig+0x51c>
 8003634:	2801      	cmp	r0, #1
 8003636:	d04f      	beq.n	80036d8 <UART_SetConfig+0x520>
 8003638:	2802      	cmp	r0, #2
 800363a:	d04f      	beq.n	80036dc <UART_SetConfig+0x524>
 800363c:	2803      	cmp	r0, #3
 800363e:	d04f      	beq.n	80036e0 <UART_SetConfig+0x528>
 8003640:	2804      	cmp	r0, #4
 8003642:	d04f      	beq.n	80036e4 <UART_SetConfig+0x52c>
 8003644:	2805      	cmp	r0, #5
 8003646:	d04f      	beq.n	80036e8 <UART_SetConfig+0x530>
 8003648:	2806      	cmp	r0, #6
 800364a:	d04f      	beq.n	80036ec <UART_SetConfig+0x534>
 800364c:	2807      	cmp	r0, #7
 800364e:	d04f      	beq.n	80036f0 <UART_SetConfig+0x538>
 8003650:	2808      	cmp	r0, #8
 8003652:	d04f      	beq.n	80036f4 <UART_SetConfig+0x53c>
 8003654:	2809      	cmp	r0, #9
 8003656:	d04f      	beq.n	80036f8 <UART_SetConfig+0x540>
 8003658:	280a      	cmp	r0, #10
 800365a:	d051      	beq.n	8003700 <UART_SetConfig+0x548>
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <UART_SetConfig+0x5b4>)
 800365e:	4b42      	ldr	r3, [pc, #264]	; (8003768 <UART_SetConfig+0x5b0>)
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003660:	280b      	cmp	r0, #11
 8003662:	bf18      	it	ne
 8003664:	461a      	movne	r2, r3
 8003666:	e755      	b.n	8003514 <UART_SetConfig+0x35c>
 8003668:	2800      	cmp	r0, #0
 800366a:	d041      	beq.n	80036f0 <UART_SetConfig+0x538>
 800366c:	2801      	cmp	r0, #1
 800366e:	d041      	beq.n	80036f4 <UART_SetConfig+0x53c>
 8003670:	2802      	cmp	r0, #2
 8003672:	d041      	beq.n	80036f8 <UART_SetConfig+0x540>
 8003674:	2803      	cmp	r0, #3
 8003676:	d041      	beq.n	80036fc <UART_SetConfig+0x544>
 8003678:	2804      	cmp	r0, #4
 800367a:	d041      	beq.n	8003700 <UART_SetConfig+0x548>
 800367c:	2805      	cmp	r0, #5
 800367e:	d041      	beq.n	8003704 <UART_SetConfig+0x54c>
 8003680:	2806      	cmp	r0, #6
 8003682:	d041      	beq.n	8003708 <UART_SetConfig+0x550>
 8003684:	2807      	cmp	r0, #7
 8003686:	d041      	beq.n	800370c <UART_SetConfig+0x554>
 8003688:	2808      	cmp	r0, #8
 800368a:	d041      	beq.n	8003710 <UART_SetConfig+0x558>
 800368c:	2809      	cmp	r0, #9
 800368e:	d041      	beq.n	8003714 <UART_SetConfig+0x55c>
 8003690:	280a      	cmp	r0, #10
 8003692:	d042      	beq.n	800371a <UART_SetConfig+0x562>
 8003694:	f643 5209 	movw	r2, #15625	; 0x3d09
 8003698:	4b35      	ldr	r3, [pc, #212]	; (8003770 <UART_SetConfig+0x5b8>)
 800369a:	e7e1      	b.n	8003660 <UART_SetConfig+0x4a8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800369c:	2800      	cmp	r0, #0
 800369e:	d03f      	beq.n	8003720 <UART_SetConfig+0x568>
 80036a0:	2801      	cmp	r0, #1
 80036a2:	d040      	beq.n	8003726 <UART_SetConfig+0x56e>
 80036a4:	2802      	cmp	r0, #2
 80036a6:	d041      	beq.n	800372c <UART_SetConfig+0x574>
 80036a8:	2803      	cmp	r0, #3
 80036aa:	d042      	beq.n	8003732 <UART_SetConfig+0x57a>
 80036ac:	2804      	cmp	r0, #4
 80036ae:	d043      	beq.n	8003738 <UART_SetConfig+0x580>
 80036b0:	2805      	cmp	r0, #5
 80036b2:	d044      	beq.n	800373e <UART_SetConfig+0x586>
 80036b4:	2806      	cmp	r0, #6
 80036b6:	d045      	beq.n	8003744 <UART_SetConfig+0x58c>
 80036b8:	2807      	cmp	r0, #7
 80036ba:	d046      	beq.n	800374a <UART_SetConfig+0x592>
 80036bc:	2808      	cmp	r0, #8
 80036be:	d047      	beq.n	8003750 <UART_SetConfig+0x598>
 80036c0:	2809      	cmp	r0, #9
 80036c2:	d048      	beq.n	8003756 <UART_SetConfig+0x59e>
 80036c4:	280a      	cmp	r0, #10
 80036c6:	d049      	beq.n	800375c <UART_SetConfig+0x5a4>
 80036c8:	280b      	cmp	r0, #11
 80036ca:	bf14      	ite	ne
 80036cc:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 80036d0:	2280      	moveq	r2, #128	; 0x80
 80036d2:	e71f      	b.n	8003514 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036d4:	4a24      	ldr	r2, [pc, #144]	; (8003768 <UART_SetConfig+0x5b0>)
 80036d6:	e71d      	b.n	8003514 <UART_SetConfig+0x35c>
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <UART_SetConfig+0x5bc>)
 80036da:	e71b      	b.n	8003514 <UART_SetConfig+0x35c>
 80036dc:	4a26      	ldr	r2, [pc, #152]	; (8003778 <UART_SetConfig+0x5c0>)
 80036de:	e719      	b.n	8003514 <UART_SetConfig+0x35c>
 80036e0:	4a26      	ldr	r2, [pc, #152]	; (800377c <UART_SetConfig+0x5c4>)
 80036e2:	e717      	b.n	8003514 <UART_SetConfig+0x35c>
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <UART_SetConfig+0x5c8>)
 80036e6:	e715      	b.n	8003514 <UART_SetConfig+0x35c>
 80036e8:	4a26      	ldr	r2, [pc, #152]	; (8003784 <UART_SetConfig+0x5cc>)
 80036ea:	e713      	b.n	8003514 <UART_SetConfig+0x35c>
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <UART_SetConfig+0x5d0>)
 80036ee:	e711      	b.n	8003514 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036f0:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <UART_SetConfig+0x5b8>)
 80036f2:	e70f      	b.n	8003514 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036f4:	4a25      	ldr	r2, [pc, #148]	; (800378c <UART_SetConfig+0x5d4>)
 80036f6:	e70d      	b.n	8003514 <UART_SetConfig+0x35c>
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <UART_SetConfig+0x5d8>)
 80036fa:	e70b      	b.n	8003514 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <UART_SetConfig+0x5dc>)
 80036fe:	e709      	b.n	8003514 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003700:	4a25      	ldr	r2, [pc, #148]	; (8003798 <UART_SetConfig+0x5e0>)
 8003702:	e707      	b.n	8003514 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003704:	4a25      	ldr	r2, [pc, #148]	; (800379c <UART_SetConfig+0x5e4>)
 8003706:	e705      	b.n	8003514 <UART_SetConfig+0x35c>
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <UART_SetConfig+0x5e8>)
 800370a:	e703      	b.n	8003514 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800370c:	4a17      	ldr	r2, [pc, #92]	; (800376c <UART_SetConfig+0x5b4>)
 800370e:	e701      	b.n	8003514 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <UART_SetConfig+0x5ec>)
 8003712:	e6ff      	b.n	8003514 <UART_SetConfig+0x35c>
 8003714:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003718:	e6fc      	b.n	8003514 <UART_SetConfig+0x35c>
 800371a:	f647 2212 	movw	r2, #31250	; 0x7a12
 800371e:	e6f9      	b.n	8003514 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003720:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003724:	e6f6      	b.n	8003514 <UART_SetConfig+0x35c>
 8003726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800372a:	e6f3      	b.n	8003514 <UART_SetConfig+0x35c>
 800372c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003730:	e6f0      	b.n	8003514 <UART_SetConfig+0x35c>
 8003732:	f241 5255 	movw	r2, #5461	; 0x1555
 8003736:	e6ed      	b.n	8003514 <UART_SetConfig+0x35c>
 8003738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800373c:	e6ea      	b.n	8003514 <UART_SetConfig+0x35c>
 800373e:	f640 42cc 	movw	r2, #3276	; 0xccc
 8003742:	e6e7      	b.n	8003514 <UART_SetConfig+0x35c>
 8003744:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8003748:	e6e4      	b.n	8003514 <UART_SetConfig+0x35c>
 800374a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800374e:	e6e1      	b.n	8003514 <UART_SetConfig+0x35c>
 8003750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003754:	e6de      	b.n	8003514 <UART_SetConfig+0x35c>
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	e6db      	b.n	8003514 <UART_SetConfig+0x35c>
 800375c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003760:	e6d8      	b.n	8003514 <UART_SetConfig+0x35c>
 8003762:	bf00      	nop
 8003764:	58024400 	.word	0x58024400
 8003768:	03d09000 	.word	0x03d09000
 800376c:	0003d090 	.word	0x0003d090
 8003770:	003d0900 	.word	0x003d0900
 8003774:	01e84800 	.word	0x01e84800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	00a2c2aa 	.word	0x00a2c2aa
 8003780:	007a1200 	.word	0x007a1200
 8003784:	0061a800 	.word	0x0061a800
 8003788:	00516155 	.word	0x00516155
 800378c:	001e8480 	.word	0x001e8480
 8003790:	000f4240 	.word	0x000f4240
 8003794:	000a2c2a 	.word	0x000a2c2a
 8003798:	0007a120 	.word	0x0007a120
 800379c:	00061a80 	.word	0x00061a80
 80037a0:	00051615 	.word	0x00051615
 80037a4:	0001e848 	.word	0x0001e848
        switch (clocksource)
 80037a8:	2c20      	cmp	r4, #32
 80037aa:	f000 80f8 	beq.w	800399e <UART_SetConfig+0x7e6>
 80037ae:	2c40      	cmp	r4, #64	; 0x40
 80037b0:	f000 812b 	beq.w	8003a0a <UART_SetConfig+0x852>
 80037b4:	2c10      	cmp	r4, #16
 80037b6:	f47f aec2 	bne.w	800353e <UART_SetConfig+0x386>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037ba:	4ab1      	ldr	r2, [pc, #708]	; (8003a80 <UART_SetConfig+0x8c8>)
 80037bc:	0874      	lsrs	r4, r6, #1
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	f013 0f20 	tst.w	r3, #32
 80037c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037c6:	f000 80ad 	beq.w	8003924 <UART_SetConfig+0x76c>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	48ad      	ldr	r0, [pc, #692]	; (8003a84 <UART_SetConfig+0x8cc>)
 80037ce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80037d2:	40d0      	lsrs	r0, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a3 	beq.w	8003920 <UART_SetConfig+0x768>
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f000 808c 	beq.w	80038f8 <UART_SetConfig+0x740>
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f000 808b 	beq.w	80038fc <UART_SetConfig+0x744>
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	f000 808a 	beq.w	8003900 <UART_SetConfig+0x748>
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	f000 8089 	beq.w	8003904 <UART_SetConfig+0x74c>
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	f000 8088 	beq.w	8003908 <UART_SetConfig+0x750>
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	f000 8087 	beq.w	800390c <UART_SetConfig+0x754>
 80037fe:	2b07      	cmp	r3, #7
 8003800:	f000 8086 	beq.w	8003910 <UART_SetConfig+0x758>
 8003804:	2b08      	cmp	r3, #8
 8003806:	f000 8085 	beq.w	8003914 <UART_SetConfig+0x75c>
 800380a:	2b09      	cmp	r3, #9
 800380c:	f000 8084 	beq.w	8003918 <UART_SetConfig+0x760>
 8003810:	2b0a      	cmp	r3, #10
 8003812:	f000 8083 	beq.w	800391c <UART_SetConfig+0x764>
 8003816:	2b0b      	cmp	r3, #11
 8003818:	f040 8082 	bne.w	8003920 <UART_SetConfig+0x768>
 800381c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003820:	2300      	movs	r3, #0
 8003822:	2100      	movs	r1, #0
 8003824:	f7fc fdac 	bl	8000380 <__aeabi_uldivmod>
 8003828:	4632      	mov	r2, r6
 800382a:	ea4f 2901 	mov.w	r9, r1, lsl #8
 800382e:	2300      	movs	r3, #0
 8003830:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003834:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8003838:	eb18 0004 	adds.w	r0, r8, r4
 800383c:	f149 0100 	adc.w	r1, r9, #0
 8003840:	e02e      	b.n	80038a0 <UART_SetConfig+0x6e8>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003842:	f7fe fff7 	bl	8002834 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d053      	beq.n	80038f4 <UART_SetConfig+0x73c>
 800384c:	2b01      	cmp	r3, #1
 800384e:	d03d      	beq.n	80038cc <UART_SetConfig+0x714>
 8003850:	2b02      	cmp	r3, #2
 8003852:	d03d      	beq.n	80038d0 <UART_SetConfig+0x718>
 8003854:	2b03      	cmp	r3, #3
 8003856:	d03d      	beq.n	80038d4 <UART_SetConfig+0x71c>
 8003858:	2b04      	cmp	r3, #4
 800385a:	d03d      	beq.n	80038d8 <UART_SetConfig+0x720>
 800385c:	2b05      	cmp	r3, #5
 800385e:	d03d      	beq.n	80038dc <UART_SetConfig+0x724>
 8003860:	2b06      	cmp	r3, #6
 8003862:	d03d      	beq.n	80038e0 <UART_SetConfig+0x728>
 8003864:	2b07      	cmp	r3, #7
 8003866:	d03d      	beq.n	80038e4 <UART_SetConfig+0x72c>
 8003868:	2b08      	cmp	r3, #8
 800386a:	d03d      	beq.n	80038e8 <UART_SetConfig+0x730>
 800386c:	2b09      	cmp	r3, #9
 800386e:	d03d      	beq.n	80038ec <UART_SetConfig+0x734>
 8003870:	2b0a      	cmp	r3, #10
 8003872:	d03d      	beq.n	80038f0 <UART_SetConfig+0x738>
 8003874:	2b0b      	cmp	r3, #11
 8003876:	d13d      	bne.n	80038f4 <UART_SetConfig+0x73c>
 8003878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800387c:	2300      	movs	r3, #0
 800387e:	2100      	movs	r1, #0
 8003880:	f7fc fd7e 	bl	8000380 <__aeabi_uldivmod>
 8003884:	686c      	ldr	r4, [r5, #4]
 8003886:	020f      	lsls	r7, r1, #8
 8003888:	2300      	movs	r3, #0
 800388a:	0206      	lsls	r6, r0, #8
 800388c:	4622      	mov	r2, r4
 800388e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003892:	0860      	lsrs	r0, r4, #1
 8003894:	eb16 0800 	adds.w	r8, r6, r0
 8003898:	f147 0900 	adc.w	r9, r7, #0
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038a0:	f7fc fd6e 	bl	8000380 <__aeabi_uldivmod>
            break;
 80038a4:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80038aa:	4b77      	ldr	r3, [pc, #476]	; (8003a88 <UART_SetConfig+0x8d0>)
 80038ac:	4299      	cmp	r1, r3
 80038ae:	f63f ad91 	bhi.w	80033d4 <UART_SetConfig+0x21c>
          huart->Instance->BRR = usartdiv;
 80038b2:	682b      	ldr	r3, [r5, #0]
 80038b4:	60d8      	str	r0, [r3, #12]
 80038b6:	e666      	b.n	8003586 <UART_SetConfig+0x3ce>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038b8:	4668      	mov	r0, sp
 80038ba:	f7fe ffcd 	bl	8002858 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038be:	9801      	ldr	r0, [sp, #4]
 80038c0:	e7c1      	b.n	8003846 <UART_SetConfig+0x68e>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038c2:	a803      	add	r0, sp, #12
 80038c4:	f7ff f872 	bl	80029ac <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038c8:	9804      	ldr	r0, [sp, #16]
 80038ca:	e7bc      	b.n	8003846 <UART_SetConfig+0x68e>
 80038cc:	2202      	movs	r2, #2
 80038ce:	e7d5      	b.n	800387c <UART_SetConfig+0x6c4>
 80038d0:	2204      	movs	r2, #4
 80038d2:	e7d3      	b.n	800387c <UART_SetConfig+0x6c4>
 80038d4:	2206      	movs	r2, #6
 80038d6:	e7d1      	b.n	800387c <UART_SetConfig+0x6c4>
 80038d8:	2208      	movs	r2, #8
 80038da:	e7cf      	b.n	800387c <UART_SetConfig+0x6c4>
 80038dc:	220a      	movs	r2, #10
 80038de:	e7cd      	b.n	800387c <UART_SetConfig+0x6c4>
 80038e0:	220c      	movs	r2, #12
 80038e2:	e7cb      	b.n	800387c <UART_SetConfig+0x6c4>
 80038e4:	2210      	movs	r2, #16
 80038e6:	e7c9      	b.n	800387c <UART_SetConfig+0x6c4>
 80038e8:	2220      	movs	r2, #32
 80038ea:	e7c7      	b.n	800387c <UART_SetConfig+0x6c4>
 80038ec:	2240      	movs	r2, #64	; 0x40
 80038ee:	e7c5      	b.n	800387c <UART_SetConfig+0x6c4>
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	e7c3      	b.n	800387c <UART_SetConfig+0x6c4>
 80038f4:	2201      	movs	r2, #1
 80038f6:	e7c1      	b.n	800387c <UART_SetConfig+0x6c4>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038f8:	2202      	movs	r2, #2
 80038fa:	e791      	b.n	8003820 <UART_SetConfig+0x668>
 80038fc:	2204      	movs	r2, #4
 80038fe:	e78f      	b.n	8003820 <UART_SetConfig+0x668>
 8003900:	2206      	movs	r2, #6
 8003902:	e78d      	b.n	8003820 <UART_SetConfig+0x668>
 8003904:	2208      	movs	r2, #8
 8003906:	e78b      	b.n	8003820 <UART_SetConfig+0x668>
 8003908:	220a      	movs	r2, #10
 800390a:	e789      	b.n	8003820 <UART_SetConfig+0x668>
 800390c:	220c      	movs	r2, #12
 800390e:	e787      	b.n	8003820 <UART_SetConfig+0x668>
 8003910:	2210      	movs	r2, #16
 8003912:	e785      	b.n	8003820 <UART_SetConfig+0x668>
 8003914:	2220      	movs	r2, #32
 8003916:	e783      	b.n	8003820 <UART_SetConfig+0x668>
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	e781      	b.n	8003820 <UART_SetConfig+0x668>
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	e77f      	b.n	8003820 <UART_SetConfig+0x668>
 8003920:	2201      	movs	r2, #1
 8003922:	e77d      	b.n	8003820 <UART_SetConfig+0x668>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003924:	2b00      	cmp	r3, #0
 8003926:	d037      	beq.n	8003998 <UART_SetConfig+0x7e0>
 8003928:	2b01      	cmp	r3, #1
 800392a:	d016      	beq.n	800395a <UART_SetConfig+0x7a2>
 800392c:	2b02      	cmp	r3, #2
 800392e:	d01d      	beq.n	800396c <UART_SetConfig+0x7b4>
 8003930:	2b03      	cmp	r3, #3
 8003932:	d01d      	beq.n	8003970 <UART_SetConfig+0x7b8>
 8003934:	2b04      	cmp	r3, #4
 8003936:	d01f      	beq.n	8003978 <UART_SetConfig+0x7c0>
 8003938:	2b05      	cmp	r3, #5
 800393a:	d01f      	beq.n	800397c <UART_SetConfig+0x7c4>
 800393c:	2b06      	cmp	r3, #6
 800393e:	d01f      	beq.n	8003980 <UART_SetConfig+0x7c8>
 8003940:	2b07      	cmp	r3, #7
 8003942:	d021      	beq.n	8003988 <UART_SetConfig+0x7d0>
 8003944:	2b08      	cmp	r3, #8
 8003946:	d021      	beq.n	800398c <UART_SetConfig+0x7d4>
 8003948:	2b09      	cmp	r3, #9
 800394a:	d021      	beq.n	8003990 <UART_SetConfig+0x7d8>
 800394c:	2b0a      	cmp	r3, #10
 800394e:	d021      	beq.n	8003994 <UART_SetConfig+0x7dc>
 8003950:	2b0b      	cmp	r3, #11
 8003952:	d121      	bne.n	8003998 <UART_SetConfig+0x7e0>
 8003954:	484b      	ldr	r0, [pc, #300]	; (8003a84 <UART_SetConfig+0x8cc>)
 8003956:	2100      	movs	r1, #0
 8003958:	e001      	b.n	800395e <UART_SetConfig+0x7a6>
 800395a:	484c      	ldr	r0, [pc, #304]	; (8003a8c <UART_SetConfig+0x8d4>)
 800395c:	2101      	movs	r1, #1
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395e:	1900      	adds	r0, r0, r4
 8003960:	4632      	mov	r2, r6
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f141 0100 	adc.w	r1, r1, #0
 800396a:	e799      	b.n	80038a0 <UART_SetConfig+0x6e8>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396c:	4848      	ldr	r0, [pc, #288]	; (8003a90 <UART_SetConfig+0x8d8>)
 800396e:	e7f2      	b.n	8003956 <UART_SetConfig+0x79e>
 8003970:	a13b      	add	r1, pc, #236	; (adr r1, 8003a60 <UART_SetConfig+0x8a8>)
 8003972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003976:	e7f2      	b.n	800395e <UART_SetConfig+0x7a6>
 8003978:	4846      	ldr	r0, [pc, #280]	; (8003a94 <UART_SetConfig+0x8dc>)
 800397a:	e7ec      	b.n	8003956 <UART_SetConfig+0x79e>
 800397c:	4846      	ldr	r0, [pc, #280]	; (8003a98 <UART_SetConfig+0x8e0>)
 800397e:	e7ea      	b.n	8003956 <UART_SetConfig+0x79e>
 8003980:	a139      	add	r1, pc, #228	; (adr r1, 8003a68 <UART_SetConfig+0x8b0>)
 8003982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003986:	e7ea      	b.n	800395e <UART_SetConfig+0x7a6>
 8003988:	4844      	ldr	r0, [pc, #272]	; (8003a9c <UART_SetConfig+0x8e4>)
 800398a:	e7e4      	b.n	8003956 <UART_SetConfig+0x79e>
 800398c:	4844      	ldr	r0, [pc, #272]	; (8003aa0 <UART_SetConfig+0x8e8>)
 800398e:	e7e2      	b.n	8003956 <UART_SetConfig+0x79e>
 8003990:	4844      	ldr	r0, [pc, #272]	; (8003aa4 <UART_SetConfig+0x8ec>)
 8003992:	e7e0      	b.n	8003956 <UART_SetConfig+0x79e>
 8003994:	4844      	ldr	r0, [pc, #272]	; (8003aa8 <UART_SetConfig+0x8f0>)
 8003996:	e7de      	b.n	8003956 <UART_SetConfig+0x79e>
 8003998:	4844      	ldr	r0, [pc, #272]	; (8003aac <UART_SetConfig+0x8f4>)
 800399a:	2103      	movs	r1, #3
 800399c:	e7df      	b.n	800395e <UART_SetConfig+0x7a6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800399e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039a0:	b38b      	cbz	r3, 8003a06 <UART_SetConfig+0x84e>
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d016      	beq.n	80039d4 <UART_SetConfig+0x81c>
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d016      	beq.n	80039d8 <UART_SetConfig+0x820>
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d016      	beq.n	80039dc <UART_SetConfig+0x824>
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d019      	beq.n	80039e6 <UART_SetConfig+0x82e>
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d019      	beq.n	80039ea <UART_SetConfig+0x832>
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d019      	beq.n	80039ee <UART_SetConfig+0x836>
 80039ba:	2b07      	cmp	r3, #7
 80039bc:	d01b      	beq.n	80039f6 <UART_SetConfig+0x83e>
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d01b      	beq.n	80039fa <UART_SetConfig+0x842>
 80039c2:	2b09      	cmp	r3, #9
 80039c4:	d01b      	beq.n	80039fe <UART_SetConfig+0x846>
 80039c6:	2b0a      	cmp	r3, #10
 80039c8:	d01b      	beq.n	8003a02 <UART_SetConfig+0x84a>
 80039ca:	2b0b      	cmp	r3, #11
 80039cc:	d11b      	bne.n	8003a06 <UART_SetConfig+0x84e>
 80039ce:	4838      	ldr	r0, [pc, #224]	; (8003ab0 <UART_SetConfig+0x8f8>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039d0:	2100      	movs	r1, #0
 80039d2:	e006      	b.n	80039e2 <UART_SetConfig+0x82a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039d4:	4832      	ldr	r0, [pc, #200]	; (8003aa0 <UART_SetConfig+0x8e8>)
 80039d6:	e7fb      	b.n	80039d0 <UART_SetConfig+0x818>
 80039d8:	4832      	ldr	r0, [pc, #200]	; (8003aa4 <UART_SetConfig+0x8ec>)
 80039da:	e7f9      	b.n	80039d0 <UART_SetConfig+0x818>
 80039dc:	a124      	add	r1, pc, #144	; (adr r1, 8003a70 <UART_SetConfig+0x8b8>)
 80039de:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e2:	0874      	lsrs	r4, r6, #1
 80039e4:	e7bb      	b.n	800395e <UART_SetConfig+0x7a6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e6:	4830      	ldr	r0, [pc, #192]	; (8003aa8 <UART_SetConfig+0x8f0>)
 80039e8:	e7f2      	b.n	80039d0 <UART_SetConfig+0x818>
 80039ea:	4832      	ldr	r0, [pc, #200]	; (8003ab4 <UART_SetConfig+0x8fc>)
 80039ec:	e7f0      	b.n	80039d0 <UART_SetConfig+0x818>
 80039ee:	a122      	add	r1, pc, #136	; (adr r1, 8003a78 <UART_SetConfig+0x8c0>)
 80039f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039f4:	e7f5      	b.n	80039e2 <UART_SetConfig+0x82a>
 80039f6:	4823      	ldr	r0, [pc, #140]	; (8003a84 <UART_SetConfig+0x8cc>)
 80039f8:	e7ea      	b.n	80039d0 <UART_SetConfig+0x818>
 80039fa:	482f      	ldr	r0, [pc, #188]	; (8003ab8 <UART_SetConfig+0x900>)
 80039fc:	e7e8      	b.n	80039d0 <UART_SetConfig+0x818>
 80039fe:	482f      	ldr	r0, [pc, #188]	; (8003abc <UART_SetConfig+0x904>)
 8003a00:	e7e6      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a02:	482f      	ldr	r0, [pc, #188]	; (8003ac0 <UART_SetConfig+0x908>)
 8003a04:	e7e4      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a06:	4825      	ldr	r0, [pc, #148]	; (8003a9c <UART_SetConfig+0x8e4>)
 8003a08:	e7e2      	b.n	80039d0 <UART_SetConfig+0x818>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d06b      	beq.n	8003ae8 <UART_SetConfig+0x930>
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d016      	beq.n	8003a42 <UART_SetConfig+0x88a>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d017      	beq.n	8003a48 <UART_SetConfig+0x890>
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d018      	beq.n	8003a4e <UART_SetConfig+0x896>
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d018      	beq.n	8003a52 <UART_SetConfig+0x89a>
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d019      	beq.n	8003a58 <UART_SetConfig+0x8a0>
 8003a24:	2b06      	cmp	r3, #6
 8003a26:	d051      	beq.n	8003acc <UART_SetConfig+0x914>
 8003a28:	2b07      	cmp	r3, #7
 8003a2a:	d051      	beq.n	8003ad0 <UART_SetConfig+0x918>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d052      	beq.n	8003ad6 <UART_SetConfig+0x91e>
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d053      	beq.n	8003adc <UART_SetConfig+0x924>
 8003a34:	2b0a      	cmp	r3, #10
 8003a36:	d054      	beq.n	8003ae2 <UART_SetConfig+0x92a>
 8003a38:	2b0b      	cmp	r3, #11
 8003a3a:	d155      	bne.n	8003ae8 <UART_SetConfig+0x930>
 8003a3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a40:	e7c6      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a42:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003a46:	e7c3      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a48:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a4c:	e7c0      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a4e:	481d      	ldr	r0, [pc, #116]	; (8003ac4 <UART_SetConfig+0x90c>)
 8003a50:	e7be      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a56:	e7bb      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a58:	481b      	ldr	r0, [pc, #108]	; (8003ac8 <UART_SetConfig+0x910>)
 8003a5a:	e7b9      	b.n	80039d0 <UART_SetConfig+0x818>
 8003a5c:	f3af 8000 	nop.w
 8003a60:	a2c2aa00 	.word	0xa2c2aa00
 8003a64:	00000000 	.word	0x00000000
 8003a68:	51615500 	.word	0x51615500
 8003a6c:	00000000 	.word	0x00000000
 8003a70:	0a2c2a00 	.word	0x0a2c2a00
 8003a74:	00000000 	.word	0x00000000
 8003a78:	05161500 	.word	0x05161500
 8003a7c:	00000000 	.word	0x00000000
 8003a80:	58024400 	.word	0x58024400
 8003a84:	03d09000 	.word	0x03d09000
 8003a88:	000ffcff 	.word	0x000ffcff
 8003a8c:	e8480000 	.word	0xe8480000
 8003a90:	f4240000 	.word	0xf4240000
 8003a94:	7a120000 	.word	0x7a120000
 8003a98:	61a80000 	.word	0x61a80000
 8003a9c:	3d090000 	.word	0x3d090000
 8003aa0:	1e848000 	.word	0x1e848000
 8003aa4:	0f424000 	.word	0x0f424000
 8003aa8:	07a12000 	.word	0x07a12000
 8003aac:	d0900000 	.word	0xd0900000
 8003ab0:	003d0900 	.word	0x003d0900
 8003ab4:	061a8000 	.word	0x061a8000
 8003ab8:	01e84800 	.word	0x01e84800
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	00155500 	.word	0x00155500
 8003ac8:	000ccc00 	.word	0x000ccc00
 8003acc:	48ad      	ldr	r0, [pc, #692]	; (8003d84 <UART_SetConfig+0xbcc>)
 8003ace:	e77f      	b.n	80039d0 <UART_SetConfig+0x818>
 8003ad0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ad4:	e77c      	b.n	80039d0 <UART_SetConfig+0x818>
 8003ad6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003ada:	e779      	b.n	80039d0 <UART_SetConfig+0x818>
 8003adc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003ae0:	e776      	b.n	80039d0 <UART_SetConfig+0x818>
 8003ae2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ae6:	e773      	b.n	80039d0 <UART_SetConfig+0x818>
 8003ae8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003aec:	e770      	b.n	80039d0 <UART_SetConfig+0x818>
    switch (clocksource)
 8003aee:	2c20      	cmp	r4, #32
 8003af0:	f000 8164 	beq.w	8003dbc <UART_SetConfig+0xc04>
 8003af4:	2c40      	cmp	r4, #64	; 0x40
 8003af6:	f000 819a 	beq.w	8003e2e <UART_SetConfig+0xc76>
 8003afa:	2c10      	cmp	r4, #16
 8003afc:	f47f abf8 	bne.w	80032f0 <UART_SetConfig+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b00:	4ba1      	ldr	r3, [pc, #644]	; (8003d88 <UART_SetConfig+0xbd0>)
 8003b02:	6869      	ldr	r1, [r5, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f012 0f20 	tst.w	r2, #32
 8003b0a:	f000 8113 	beq.w	8003d34 <UART_SetConfig+0xb7c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a9e      	ldr	r2, [pc, #632]	; (8003d8c <UART_SetConfig+0xbd4>)
 8003b12:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	f000 80f4 	beq.w	8003d08 <UART_SetConfig+0xb50>
 8003b20:	2801      	cmp	r0, #1
 8003b22:	f000 80f3 	beq.w	8003d0c <UART_SetConfig+0xb54>
 8003b26:	2802      	cmp	r0, #2
 8003b28:	f000 80f2 	beq.w	8003d10 <UART_SetConfig+0xb58>
 8003b2c:	2803      	cmp	r0, #3
 8003b2e:	f000 80f1 	beq.w	8003d14 <UART_SetConfig+0xb5c>
 8003b32:	2804      	cmp	r0, #4
 8003b34:	f000 80f0 	beq.w	8003d18 <UART_SetConfig+0xb60>
 8003b38:	2805      	cmp	r0, #5
 8003b3a:	f000 80ef 	beq.w	8003d1c <UART_SetConfig+0xb64>
 8003b3e:	2806      	cmp	r0, #6
 8003b40:	f000 80ee 	beq.w	8003d20 <UART_SetConfig+0xb68>
 8003b44:	2807      	cmp	r0, #7
 8003b46:	f000 80ed 	beq.w	8003d24 <UART_SetConfig+0xb6c>
 8003b4a:	2808      	cmp	r0, #8
 8003b4c:	f000 80ec 	beq.w	8003d28 <UART_SetConfig+0xb70>
 8003b50:	2809      	cmp	r0, #9
 8003b52:	f000 80eb 	beq.w	8003d2c <UART_SetConfig+0xb74>
 8003b56:	280a      	cmp	r0, #10
 8003b58:	f000 80ea 	beq.w	8003d30 <UART_SetConfig+0xb78>
 8003b5c:	280b      	cmp	r0, #11
 8003b5e:	bf14      	ite	ne
 8003b60:	2201      	movne	r2, #1
 8003b62:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b6a:	e01f      	b.n	8003bac <UART_SetConfig+0x9f4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7fd ff9c 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b70:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003b72:	b309      	cbz	r1, 8003bb8 <UART_SetConfig+0xa00>
 8003b74:	2901      	cmp	r1, #1
 8003b76:	d021      	beq.n	8003bbc <UART_SetConfig+0xa04>
 8003b78:	2902      	cmp	r1, #2
 8003b7a:	d021      	beq.n	8003bc0 <UART_SetConfig+0xa08>
 8003b7c:	2903      	cmp	r1, #3
 8003b7e:	d021      	beq.n	8003bc4 <UART_SetConfig+0xa0c>
 8003b80:	2904      	cmp	r1, #4
 8003b82:	d021      	beq.n	8003bc8 <UART_SetConfig+0xa10>
 8003b84:	2905      	cmp	r1, #5
 8003b86:	d021      	beq.n	8003bcc <UART_SetConfig+0xa14>
 8003b88:	2906      	cmp	r1, #6
 8003b8a:	d021      	beq.n	8003bd0 <UART_SetConfig+0xa18>
 8003b8c:	2907      	cmp	r1, #7
 8003b8e:	d021      	beq.n	8003bd4 <UART_SetConfig+0xa1c>
 8003b90:	2908      	cmp	r1, #8
 8003b92:	d021      	beq.n	8003bd8 <UART_SetConfig+0xa20>
 8003b94:	2909      	cmp	r1, #9
 8003b96:	d021      	beq.n	8003bdc <UART_SetConfig+0xa24>
 8003b98:	290a      	cmp	r1, #10
 8003b9a:	d021      	beq.n	8003be0 <UART_SetConfig+0xa28>
 8003b9c:	290b      	cmp	r1, #11
 8003b9e:	bf14      	ite	ne
 8003ba0:	2201      	movne	r2, #1
 8003ba2:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003ba6:	6869      	ldr	r1, [r5, #4]
 8003ba8:	fbb0 f2f2 	udiv	r2, r0, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bac:	084b      	lsrs	r3, r1, #1
 8003bae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bb6:	e03a      	b.n	8003c2e <UART_SetConfig+0xa76>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb8:	2201      	movs	r2, #1
 8003bba:	e7f4      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	e7f2      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	e7f0      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bc4:	2206      	movs	r2, #6
 8003bc6:	e7ee      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bc8:	2208      	movs	r2, #8
 8003bca:	e7ec      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bcc:	220a      	movs	r2, #10
 8003bce:	e7ea      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	e7e8      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	e7e6      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bd8:	2220      	movs	r2, #32
 8003bda:	e7e4      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	e7e2      	b.n	8003ba6 <UART_SetConfig+0x9ee>
 8003be0:	2280      	movs	r2, #128	; 0x80
 8003be2:	e7e0      	b.n	8003ba6 <UART_SetConfig+0x9ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be4:	f7fd ff72 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003bea:	b1c2      	cbz	r2, 8003c1e <UART_SetConfig+0xa66>
 8003bec:	2a01      	cmp	r2, #1
 8003bee:	d02f      	beq.n	8003c50 <UART_SetConfig+0xa98>
 8003bf0:	2a02      	cmp	r2, #2
 8003bf2:	d02f      	beq.n	8003c54 <UART_SetConfig+0xa9c>
 8003bf4:	2a03      	cmp	r2, #3
 8003bf6:	d02f      	beq.n	8003c58 <UART_SetConfig+0xaa0>
 8003bf8:	2a04      	cmp	r2, #4
 8003bfa:	d02f      	beq.n	8003c5c <UART_SetConfig+0xaa4>
 8003bfc:	2a05      	cmp	r2, #5
 8003bfe:	d02f      	beq.n	8003c60 <UART_SetConfig+0xaa8>
 8003c00:	2a06      	cmp	r2, #6
 8003c02:	d02f      	beq.n	8003c64 <UART_SetConfig+0xaac>
 8003c04:	2a07      	cmp	r2, #7
 8003c06:	d02f      	beq.n	8003c68 <UART_SetConfig+0xab0>
 8003c08:	2a08      	cmp	r2, #8
 8003c0a:	d02f      	beq.n	8003c6c <UART_SetConfig+0xab4>
 8003c0c:	2a09      	cmp	r2, #9
 8003c0e:	d02f      	beq.n	8003c70 <UART_SetConfig+0xab8>
 8003c10:	2a0a      	cmp	r2, #10
 8003c12:	d02f      	beq.n	8003c74 <UART_SetConfig+0xabc>
 8003c14:	2a0b      	cmp	r2, #11
 8003c16:	bf14      	ite	ne
 8003c18:	2401      	movne	r4, #1
 8003c1a:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003c1e:	686a      	ldr	r2, [r5, #4]
 8003c20:	fbb0 f4f4 	udiv	r4, r0, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c24:	0853      	lsrs	r3, r2, #1
 8003c26:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c30:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c32:	f1a3 0010 	sub.w	r0, r3, #16
 8003c36:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003c3a:	4288      	cmp	r0, r1
 8003c3c:	f63f abca 	bhi.w	80033d4 <UART_SetConfig+0x21c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c40:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c44:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003c48:	6828      	ldr	r0, [r5, #0]
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	60c3      	str	r3, [r0, #12]
 8003c4e:	e49a      	b.n	8003586 <UART_SetConfig+0x3ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c50:	2402      	movs	r4, #2
 8003c52:	e7e4      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c54:	2404      	movs	r4, #4
 8003c56:	e7e2      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c58:	2406      	movs	r4, #6
 8003c5a:	e7e0      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c5c:	2408      	movs	r4, #8
 8003c5e:	e7de      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c60:	240a      	movs	r4, #10
 8003c62:	e7dc      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c64:	240c      	movs	r4, #12
 8003c66:	e7da      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c68:	2410      	movs	r4, #16
 8003c6a:	e7d8      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c6c:	2420      	movs	r4, #32
 8003c6e:	e7d6      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c70:	2440      	movs	r4, #64	; 0x40
 8003c72:	e7d4      	b.n	8003c1e <UART_SetConfig+0xa66>
 8003c74:	2480      	movs	r4, #128	; 0x80
 8003c76:	e7d2      	b.n	8003c1e <UART_SetConfig+0xa66>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c78:	4668      	mov	r0, sp
 8003c7a:	f7fe fded 	bl	8002858 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003c80:	9b01      	ldr	r3, [sp, #4]
 8003c82:	b36a      	cbz	r2, 8003ce0 <UART_SetConfig+0xb28>
 8003c84:	2a01      	cmp	r2, #1
 8003c86:	d02d      	beq.n	8003ce4 <UART_SetConfig+0xb2c>
 8003c88:	2a02      	cmp	r2, #2
 8003c8a:	d016      	beq.n	8003cba <UART_SetConfig+0xb02>
 8003c8c:	2a03      	cmp	r2, #3
 8003c8e:	d02d      	beq.n	8003cec <UART_SetConfig+0xb34>
 8003c90:	2a04      	cmp	r2, #4
 8003c92:	d011      	beq.n	8003cb8 <UART_SetConfig+0xb00>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c94:	2a05      	cmp	r2, #5
 8003c96:	d02b      	beq.n	8003cf0 <UART_SetConfig+0xb38>
 8003c98:	2a06      	cmp	r2, #6
 8003c9a:	d02b      	beq.n	8003cf4 <UART_SetConfig+0xb3c>
 8003c9c:	2a07      	cmp	r2, #7
 8003c9e:	d02b      	beq.n	8003cf8 <UART_SetConfig+0xb40>
 8003ca0:	2a08      	cmp	r2, #8
 8003ca2:	d02b      	beq.n	8003cfc <UART_SetConfig+0xb44>
 8003ca4:	2a09      	cmp	r2, #9
 8003ca6:	d02b      	beq.n	8003d00 <UART_SetConfig+0xb48>
 8003ca8:	2a0a      	cmp	r2, #10
 8003caa:	d02b      	beq.n	8003d04 <UART_SetConfig+0xb4c>
 8003cac:	2a0b      	cmp	r2, #11
 8003cae:	bf14      	ite	ne
 8003cb0:	2401      	movne	r4, #1
 8003cb2:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003cb6:	e000      	b.n	8003cba <UART_SetConfig+0xb02>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb8:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cba:	686a      	ldr	r2, [r5, #4]
 8003cbc:	fbb3 f4f4 	udiv	r4, r3, r4
 8003cc0:	e7b0      	b.n	8003c24 <UART_SetConfig+0xa6c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cc2:	a803      	add	r0, sp, #12
 8003cc4:	f7fe fe72 	bl	80029ac <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003cca:	9b04      	ldr	r3, [sp, #16]
 8003ccc:	b142      	cbz	r2, 8003ce0 <UART_SetConfig+0xb28>
 8003cce:	2a01      	cmp	r2, #1
 8003cd0:	d008      	beq.n	8003ce4 <UART_SetConfig+0xb2c>
 8003cd2:	2a02      	cmp	r2, #2
 8003cd4:	d008      	beq.n	8003ce8 <UART_SetConfig+0xb30>
 8003cd6:	2a03      	cmp	r2, #3
 8003cd8:	d008      	beq.n	8003cec <UART_SetConfig+0xb34>
 8003cda:	2a04      	cmp	r2, #4
 8003cdc:	d1da      	bne.n	8003c94 <UART_SetConfig+0xadc>
 8003cde:	e7ec      	b.n	8003cba <UART_SetConfig+0xb02>
 8003ce0:	2401      	movs	r4, #1
 8003ce2:	e7ea      	b.n	8003cba <UART_SetConfig+0xb02>
 8003ce4:	2402      	movs	r4, #2
 8003ce6:	e7e8      	b.n	8003cba <UART_SetConfig+0xb02>
 8003ce8:	2404      	movs	r4, #4
 8003cea:	e7e6      	b.n	8003cba <UART_SetConfig+0xb02>
 8003cec:	2406      	movs	r4, #6
 8003cee:	e7e4      	b.n	8003cba <UART_SetConfig+0xb02>
 8003cf0:	240a      	movs	r4, #10
 8003cf2:	e7e2      	b.n	8003cba <UART_SetConfig+0xb02>
 8003cf4:	240c      	movs	r4, #12
 8003cf6:	e7e0      	b.n	8003cba <UART_SetConfig+0xb02>
 8003cf8:	2410      	movs	r4, #16
 8003cfa:	e7de      	b.n	8003cba <UART_SetConfig+0xb02>
 8003cfc:	2420      	movs	r4, #32
 8003cfe:	e7dc      	b.n	8003cba <UART_SetConfig+0xb02>
 8003d00:	2440      	movs	r4, #64	; 0x40
 8003d02:	e7da      	b.n	8003cba <UART_SetConfig+0xb02>
 8003d04:	2480      	movs	r4, #128	; 0x80
 8003d06:	e7d8      	b.n	8003cba <UART_SetConfig+0xb02>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d08:	2201      	movs	r2, #1
 8003d0a:	e72c      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	e72a      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d10:	2204      	movs	r2, #4
 8003d12:	e728      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d14:	2206      	movs	r2, #6
 8003d16:	e726      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d18:	2208      	movs	r2, #8
 8003d1a:	e724      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d1c:	220a      	movs	r2, #10
 8003d1e:	e722      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d20:	220c      	movs	r2, #12
 8003d22:	e720      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d24:	2210      	movs	r2, #16
 8003d26:	e71e      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d28:	2220      	movs	r2, #32
 8003d2a:	e71c      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d2c:	2240      	movs	r2, #64	; 0x40
 8003d2e:	e71a      	b.n	8003b66 <UART_SetConfig+0x9ae>
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	e718      	b.n	8003b66 <UART_SetConfig+0x9ae>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d34:	b1f0      	cbz	r0, 8003d74 <UART_SetConfig+0xbbc>
 8003d36:	2801      	cmp	r0, #1
 8003d38:	d01e      	beq.n	8003d78 <UART_SetConfig+0xbc0>
 8003d3a:	2802      	cmp	r0, #2
 8003d3c:	d01e      	beq.n	8003d7c <UART_SetConfig+0xbc4>
 8003d3e:	2803      	cmp	r0, #3
 8003d40:	d01e      	beq.n	8003d80 <UART_SetConfig+0xbc8>
 8003d42:	2804      	cmp	r0, #4
 8003d44:	d02c      	beq.n	8003da0 <UART_SetConfig+0xbe8>
 8003d46:	2805      	cmp	r0, #5
 8003d48:	d02c      	beq.n	8003da4 <UART_SetConfig+0xbec>
 8003d4a:	2806      	cmp	r0, #6
 8003d4c:	d02c      	beq.n	8003da8 <UART_SetConfig+0xbf0>
 8003d4e:	2807      	cmp	r0, #7
 8003d50:	d02c      	beq.n	8003dac <UART_SetConfig+0xbf4>
 8003d52:	2808      	cmp	r0, #8
 8003d54:	d02c      	beq.n	8003db0 <UART_SetConfig+0xbf8>
 8003d56:	2809      	cmp	r0, #9
 8003d58:	d02c      	beq.n	8003db4 <UART_SetConfig+0xbfc>
 8003d5a:	280a      	cmp	r0, #10
 8003d5c:	d02c      	beq.n	8003db8 <UART_SetConfig+0xc00>
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <UART_SetConfig+0xbd8>)
 8003d60:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <UART_SetConfig+0xbdc>)
 8003d62:	280b      	cmp	r0, #11
 8003d64:	bf14      	ite	ne
 8003d66:	4610      	movne	r0, r2
 8003d68:	4618      	moveq	r0, r3
 8003d6a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8003d6e:	fbb0 f3f1 	udiv	r3, r0, r1
 8003d72:	e75c      	b.n	8003c2e <UART_SetConfig+0xa76>
 8003d74:	4807      	ldr	r0, [pc, #28]	; (8003d94 <UART_SetConfig+0xbdc>)
 8003d76:	e7f8      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <UART_SetConfig+0xbd4>)
 8003d7a:	e7f6      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003d7c:	4806      	ldr	r0, [pc, #24]	; (8003d98 <UART_SetConfig+0xbe0>)
 8003d7e:	e7f4      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003d80:	4806      	ldr	r0, [pc, #24]	; (8003d9c <UART_SetConfig+0xbe4>)
 8003d82:	e7f2      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003d84:	000aaa00 	.word	0x000aaa00
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	03d09000 	.word	0x03d09000
 8003d90:	0007a120 	.word	0x0007a120
 8003d94:	07a12000 	.word	0x07a12000
 8003d98:	01e84800 	.word	0x01e84800
 8003d9c:	01458554 	.word	0x01458554
 8003da0:	48a1      	ldr	r0, [pc, #644]	; (8004028 <UART_SetConfig+0xe70>)
 8003da2:	e7e2      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003da4:	48a1      	ldr	r0, [pc, #644]	; (800402c <UART_SetConfig+0xe74>)
 8003da6:	e7e0      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003da8:	48a1      	ldr	r0, [pc, #644]	; (8004030 <UART_SetConfig+0xe78>)
 8003daa:	e7de      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003dac:	48a1      	ldr	r0, [pc, #644]	; (8004034 <UART_SetConfig+0xe7c>)
 8003dae:	e7dc      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003db0:	48a1      	ldr	r0, [pc, #644]	; (8004038 <UART_SetConfig+0xe80>)
 8003db2:	e7da      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003db4:	48a1      	ldr	r0, [pc, #644]	; (800403c <UART_SetConfig+0xe84>)
 8003db6:	e7d8      	b.n	8003d6a <UART_SetConfig+0xbb2>
 8003db8:	48a1      	ldr	r0, [pc, #644]	; (8004040 <UART_SetConfig+0xe88>)
 8003dba:	e7d6      	b.n	8003d6a <UART_SetConfig+0xbb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dbc:	b300      	cbz	r0, 8003e00 <UART_SetConfig+0xc48>
 8003dbe:	2801      	cmp	r0, #1
 8003dc0:	d020      	beq.n	8003e04 <UART_SetConfig+0xc4c>
 8003dc2:	2802      	cmp	r0, #2
 8003dc4:	d020      	beq.n	8003e08 <UART_SetConfig+0xc50>
 8003dc6:	2803      	cmp	r0, #3
 8003dc8:	d020      	beq.n	8003e0c <UART_SetConfig+0xc54>
 8003dca:	2804      	cmp	r0, #4
 8003dcc:	d020      	beq.n	8003e10 <UART_SetConfig+0xc58>
 8003dce:	2805      	cmp	r0, #5
 8003dd0:	d020      	beq.n	8003e14 <UART_SetConfig+0xc5c>
 8003dd2:	2806      	cmp	r0, #6
 8003dd4:	d020      	beq.n	8003e18 <UART_SetConfig+0xc60>
 8003dd6:	2807      	cmp	r0, #7
 8003dd8:	d020      	beq.n	8003e1c <UART_SetConfig+0xc64>
 8003dda:	2808      	cmp	r0, #8
 8003ddc:	d020      	beq.n	8003e20 <UART_SetConfig+0xc68>
 8003dde:	2809      	cmp	r0, #9
 8003de0:	d020      	beq.n	8003e24 <UART_SetConfig+0xc6c>
 8003de2:	280a      	cmp	r0, #10
 8003de4:	d020      	beq.n	8003e28 <UART_SetConfig+0xc70>
 8003de6:	f647 2212 	movw	r2, #31250	; 0x7a12
 8003dea:	4b92      	ldr	r3, [pc, #584]	; (8004034 <UART_SetConfig+0xe7c>)
 8003dec:	280b      	cmp	r0, #11
 8003dee:	bf14      	ite	ne
 8003df0:	4618      	movne	r0, r3
 8003df2:	4610      	moveq	r0, r2
 8003df4:	686b      	ldr	r3, [r5, #4]
 8003df6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfe:	e716      	b.n	8003c2e <UART_SetConfig+0xa76>
 8003e00:	488c      	ldr	r0, [pc, #560]	; (8004034 <UART_SetConfig+0xe7c>)
 8003e02:	e7f7      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e04:	488c      	ldr	r0, [pc, #560]	; (8004038 <UART_SetConfig+0xe80>)
 8003e06:	e7f5      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e08:	488c      	ldr	r0, [pc, #560]	; (800403c <UART_SetConfig+0xe84>)
 8003e0a:	e7f3      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e0c:	488d      	ldr	r0, [pc, #564]	; (8004044 <UART_SetConfig+0xe8c>)
 8003e0e:	e7f1      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e10:	488b      	ldr	r0, [pc, #556]	; (8004040 <UART_SetConfig+0xe88>)
 8003e12:	e7ef      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e14:	488c      	ldr	r0, [pc, #560]	; (8004048 <UART_SetConfig+0xe90>)
 8003e16:	e7ed      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e18:	488c      	ldr	r0, [pc, #560]	; (800404c <UART_SetConfig+0xe94>)
 8003e1a:	e7eb      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e1c:	488c      	ldr	r0, [pc, #560]	; (8004050 <UART_SetConfig+0xe98>)
 8003e1e:	e7e9      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e20:	488c      	ldr	r0, [pc, #560]	; (8004054 <UART_SetConfig+0xe9c>)
 8003e22:	e7e7      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e24:	488c      	ldr	r0, [pc, #560]	; (8004058 <UART_SetConfig+0xea0>)
 8003e26:	e7e5      	b.n	8003df4 <UART_SetConfig+0xc3c>
 8003e28:	f24f 4024 	movw	r0, #62500	; 0xf424
 8003e2c:	e7e2      	b.n	8003df4 <UART_SetConfig+0xc3c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e2e:	b1e8      	cbz	r0, 8003e6c <UART_SetConfig+0xcb4>
 8003e30:	2801      	cmp	r0, #1
 8003e32:	d017      	beq.n	8003e64 <UART_SetConfig+0xcac>
 8003e34:	2802      	cmp	r0, #2
 8003e36:	d01c      	beq.n	8003e72 <UART_SetConfig+0xcba>
 8003e38:	2803      	cmp	r0, #3
 8003e3a:	d01d      	beq.n	8003e78 <UART_SetConfig+0xcc0>
 8003e3c:	2804      	cmp	r0, #4
 8003e3e:	d01e      	beq.n	8003e7e <UART_SetConfig+0xcc6>
 8003e40:	2805      	cmp	r0, #5
 8003e42:	d01f      	beq.n	8003e84 <UART_SetConfig+0xccc>
 8003e44:	2806      	cmp	r0, #6
 8003e46:	d020      	beq.n	8003e8a <UART_SetConfig+0xcd2>
 8003e48:	2807      	cmp	r0, #7
 8003e4a:	d021      	beq.n	8003e90 <UART_SetConfig+0xcd8>
 8003e4c:	2808      	cmp	r0, #8
 8003e4e:	d022      	beq.n	8003e96 <UART_SetConfig+0xcde>
 8003e50:	2809      	cmp	r0, #9
 8003e52:	d023      	beq.n	8003e9c <UART_SetConfig+0xce4>
 8003e54:	280a      	cmp	r0, #10
 8003e56:	d024      	beq.n	8003ea2 <UART_SetConfig+0xcea>
 8003e58:	280b      	cmp	r0, #11
 8003e5a:	bf14      	ite	ne
 8003e5c:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8003e60:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003e64:	6869      	ldr	r1, [r5, #4]
 8003e66:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8003e6a:	e6a2      	b.n	8003bb2 <UART_SetConfig+0x9fa>
 8003e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e70:	e7f8      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e76:	e7f5      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e78:	f642 22aa 	movw	r2, #10922	; 0x2aaa
 8003e7c:	e7f2      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e82:	e7ef      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e84:	f641 1298 	movw	r2, #6552	; 0x1998
 8003e88:	e7ec      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e8a:	f241 5254 	movw	r2, #5460	; 0x1554
 8003e8e:	e7e9      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e94:	e7e6      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9a:	e7e3      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ea0:	e7e0      	b.n	8003e64 <UART_SetConfig+0xcac>
 8003ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea6:	e7dd      	b.n	8003e64 <UART_SetConfig+0xcac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f7fd fdfe 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003eae:	b363      	cbz	r3, 8003f0a <UART_SetConfig+0xd52>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d02c      	beq.n	8003f0e <UART_SetConfig+0xd56>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d02c      	beq.n	8003f12 <UART_SetConfig+0xd5a>
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d02c      	beq.n	8003f16 <UART_SetConfig+0xd5e>
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d02c      	beq.n	8003f1a <UART_SetConfig+0xd62>
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d02c      	beq.n	8003f1e <UART_SetConfig+0xd66>
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d02c      	beq.n	8003f22 <UART_SetConfig+0xd6a>
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	d02c      	beq.n	8003f26 <UART_SetConfig+0xd6e>
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d02c      	beq.n	8003f2a <UART_SetConfig+0xd72>
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d02c      	beq.n	8003f2e <UART_SetConfig+0xd76>
 8003ed4:	2b0a      	cmp	r3, #10
 8003ed6:	d02c      	beq.n	8003f32 <UART_SetConfig+0xd7a>
 8003ed8:	2b0b      	cmp	r3, #11
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003ee2:	686a      	ldr	r2, [r5, #4]
 8003ee4:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ee8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ef2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef4:	f1a3 0010 	sub.w	r0, r3, #16
 8003ef8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003efc:	4288      	cmp	r0, r1
 8003efe:	f63f aa69 	bhi.w	80033d4 <UART_SetConfig+0x21c>
      huart->Instance->BRR = usartdiv;
 8003f02:	6829      	ldr	r1, [r5, #0]
 8003f04:	60cb      	str	r3, [r1, #12]
 8003f06:	f7ff bb3e 	b.w	8003586 <UART_SetConfig+0x3ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e7e9      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e7e7      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e7e5      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f16:	2306      	movs	r3, #6
 8003f18:	e7e3      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	e7e1      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f1e:	230a      	movs	r3, #10
 8003f20:	e7df      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f22:	230c      	movs	r3, #12
 8003f24:	e7dd      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f26:	2310      	movs	r3, #16
 8003f28:	e7db      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	e7d9      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f2e:	2340      	movs	r3, #64	; 0x40
 8003f30:	e7d7      	b.n	8003ee2 <UART_SetConfig+0xd2a>
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	e7d5      	b.n	8003ee2 <UART_SetConfig+0xd2a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f36:	f7fd fdc9 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f3c:	b1c3      	cbz	r3, 8003f70 <UART_SetConfig+0xdb8>
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d01a      	beq.n	8003f78 <UART_SetConfig+0xdc0>
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d01a      	beq.n	8003f7c <UART_SetConfig+0xdc4>
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d01a      	beq.n	8003f80 <UART_SetConfig+0xdc8>
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d01a      	beq.n	8003f84 <UART_SetConfig+0xdcc>
 8003f4e:	2b05      	cmp	r3, #5
 8003f50:	d01a      	beq.n	8003f88 <UART_SetConfig+0xdd0>
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0xdd4>
 8003f56:	2b07      	cmp	r3, #7
 8003f58:	d01a      	beq.n	8003f90 <UART_SetConfig+0xdd8>
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d01a      	beq.n	8003f94 <UART_SetConfig+0xddc>
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	d01a      	beq.n	8003f98 <UART_SetConfig+0xde0>
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d01a      	beq.n	8003f9c <UART_SetConfig+0xde4>
 8003f66:	2b0b      	cmp	r3, #11
 8003f68:	bf14      	ite	ne
 8003f6a:	2401      	movne	r4, #1
 8003f6c:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003f70:	686a      	ldr	r2, [r5, #4]
 8003f72:	fbb0 f3f4 	udiv	r3, r0, r4
 8003f76:	e7b7      	b.n	8003ee8 <UART_SetConfig+0xd30>
 8003f78:	2402      	movs	r4, #2
 8003f7a:	e7f9      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f7c:	2404      	movs	r4, #4
 8003f7e:	e7f7      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f80:	2406      	movs	r4, #6
 8003f82:	e7f5      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f84:	2408      	movs	r4, #8
 8003f86:	e7f3      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f88:	240a      	movs	r4, #10
 8003f8a:	e7f1      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f8c:	240c      	movs	r4, #12
 8003f8e:	e7ef      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f90:	2410      	movs	r4, #16
 8003f92:	e7ed      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f94:	2420      	movs	r4, #32
 8003f96:	e7eb      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f98:	2440      	movs	r4, #64	; 0x40
 8003f9a:	e7e9      	b.n	8003f70 <UART_SetConfig+0xdb8>
 8003f9c:	2480      	movs	r4, #128	; 0x80
 8003f9e:	e7e7      	b.n	8003f70 <UART_SetConfig+0xdb8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa0:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa2:	6868      	ldr	r0, [r5, #4]
 8003fa4:	fbb3 f3f4 	udiv	r3, r3, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa8:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003fac:	fbb3 f3f0 	udiv	r3, r3, r0
 8003fb0:	e79e      	b.n	8003ef0 <UART_SetConfig+0xd38>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fb2:	a803      	add	r0, sp, #12
 8003fb4:	f7fe fcfa 	bl	80029ac <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003fba:	9b04      	ldr	r3, [sp, #16]
 8003fbc:	b14a      	cbz	r2, 8003fd2 <UART_SetConfig+0xe1a>
 8003fbe:	2a01      	cmp	r2, #1
 8003fc0:	d009      	beq.n	8003fd6 <UART_SetConfig+0xe1e>
 8003fc2:	2a02      	cmp	r2, #2
 8003fc4:	d009      	beq.n	8003fda <UART_SetConfig+0xe22>
 8003fc6:	2a03      	cmp	r2, #3
 8003fc8:	d009      	beq.n	8003fde <UART_SetConfig+0xe26>
 8003fca:	2a04      	cmp	r2, #4
 8003fcc:	f040 811d 	bne.w	800420a <UART_SetConfig+0x1052>
 8003fd0:	e7e7      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fd2:	2401      	movs	r4, #1
 8003fd4:	e7e5      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fd6:	2402      	movs	r4, #2
 8003fd8:	e7e3      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fda:	2404      	movs	r4, #4
 8003fdc:	e7e1      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fde:	2406      	movs	r4, #6
 8003fe0:	e7df      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fe2:	240a      	movs	r4, #10
 8003fe4:	e7dd      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fe6:	240c      	movs	r4, #12
 8003fe8:	e7db      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fea:	2410      	movs	r4, #16
 8003fec:	e7d9      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003fee:	2420      	movs	r4, #32
 8003ff0:	e7d7      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003ff2:	2440      	movs	r4, #64	; 0x40
 8003ff4:	e7d5      	b.n	8003fa2 <UART_SetConfig+0xdea>
 8003ff6:	2480      	movs	r4, #128	; 0x80
 8003ff8:	e7d3      	b.n	8003fa2 <UART_SetConfig+0xdea>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	e158      	b.n	80042b0 <UART_SetConfig+0x10f8>
 8003ffe:	2202      	movs	r2, #2
 8004000:	e156      	b.n	80042b0 <UART_SetConfig+0x10f8>
 8004002:	2204      	movs	r2, #4
 8004004:	e154      	b.n	80042b0 <UART_SetConfig+0x10f8>
 8004006:	2206      	movs	r2, #6
 8004008:	e152      	b.n	80042b0 <UART_SetConfig+0x10f8>
 800400a:	2208      	movs	r2, #8
 800400c:	e150      	b.n	80042b0 <UART_SetConfig+0x10f8>
 800400e:	220a      	movs	r2, #10
 8004010:	e14e      	b.n	80042b0 <UART_SetConfig+0x10f8>
 8004012:	220c      	movs	r2, #12
 8004014:	e14c      	b.n	80042b0 <UART_SetConfig+0x10f8>
 8004016:	2210      	movs	r2, #16
 8004018:	e14a      	b.n	80042b0 <UART_SetConfig+0x10f8>
 800401a:	2220      	movs	r2, #32
 800401c:	e148      	b.n	80042b0 <UART_SetConfig+0x10f8>
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	e146      	b.n	80042b0 <UART_SetConfig+0x10f8>
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	e144      	b.n	80042b0 <UART_SetConfig+0x10f8>
 8004026:	bf00      	nop
 8004028:	00f42400 	.word	0x00f42400
 800402c:	00c35000 	.word	0x00c35000
 8004030:	00a2c2aa 	.word	0x00a2c2aa
 8004034:	007a1200 	.word	0x007a1200
 8004038:	003d0900 	.word	0x003d0900
 800403c:	001e8480 	.word	0x001e8480
 8004040:	000f4240 	.word	0x000f4240
 8004044:	00145854 	.word	0x00145854
 8004048:	000c3500 	.word	0x000c3500
 800404c:	000a2c2a 	.word	0x000a2c2a
 8004050:	0007a120 	.word	0x0007a120
 8004054:	0003d090 	.word	0x0003d090
 8004058:	0001e848 	.word	0x0001e848
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800405c:	b1f0      	cbz	r0, 800409c <UART_SetConfig+0xee4>
 800405e:	2801      	cmp	r0, #1
 8004060:	d01e      	beq.n	80040a0 <UART_SetConfig+0xee8>
 8004062:	2802      	cmp	r0, #2
 8004064:	d01e      	beq.n	80040a4 <UART_SetConfig+0xeec>
 8004066:	2803      	cmp	r0, #3
 8004068:	d01e      	beq.n	80040a8 <UART_SetConfig+0xef0>
 800406a:	2804      	cmp	r0, #4
 800406c:	d01e      	beq.n	80040ac <UART_SetConfig+0xef4>
 800406e:	2805      	cmp	r0, #5
 8004070:	d01e      	beq.n	80040b0 <UART_SetConfig+0xef8>
 8004072:	2806      	cmp	r0, #6
 8004074:	d01e      	beq.n	80040b4 <UART_SetConfig+0xefc>
 8004076:	2807      	cmp	r0, #7
 8004078:	d01e      	beq.n	80040b8 <UART_SetConfig+0xf00>
 800407a:	2808      	cmp	r0, #8
 800407c:	d01e      	beq.n	80040bc <UART_SetConfig+0xf04>
 800407e:	2809      	cmp	r0, #9
 8004080:	d01e      	beq.n	80040c0 <UART_SetConfig+0xf08>
 8004082:	280a      	cmp	r0, #10
 8004084:	d01e      	beq.n	80040c4 <UART_SetConfig+0xf0c>
 8004086:	4b8e      	ldr	r3, [pc, #568]	; (80042c0 <UART_SetConfig+0x1108>)
 8004088:	4a8e      	ldr	r2, [pc, #568]	; (80042c4 <UART_SetConfig+0x110c>)
 800408a:	280b      	cmp	r0, #11
 800408c:	bf14      	ite	ne
 800408e:	4610      	movne	r0, r2
 8004090:	4618      	moveq	r0, r3
 8004092:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8004096:	fbb0 f3f1 	udiv	r3, r0, r1
 800409a:	e729      	b.n	8003ef0 <UART_SetConfig+0xd38>
 800409c:	4889      	ldr	r0, [pc, #548]	; (80042c4 <UART_SetConfig+0x110c>)
 800409e:	e7f8      	b.n	8004092 <UART_SetConfig+0xeda>
 80040a0:	4889      	ldr	r0, [pc, #548]	; (80042c8 <UART_SetConfig+0x1110>)
 80040a2:	e7f6      	b.n	8004092 <UART_SetConfig+0xeda>
 80040a4:	4889      	ldr	r0, [pc, #548]	; (80042cc <UART_SetConfig+0x1114>)
 80040a6:	e7f4      	b.n	8004092 <UART_SetConfig+0xeda>
 80040a8:	4889      	ldr	r0, [pc, #548]	; (80042d0 <UART_SetConfig+0x1118>)
 80040aa:	e7f2      	b.n	8004092 <UART_SetConfig+0xeda>
 80040ac:	4889      	ldr	r0, [pc, #548]	; (80042d4 <UART_SetConfig+0x111c>)
 80040ae:	e7f0      	b.n	8004092 <UART_SetConfig+0xeda>
 80040b0:	4889      	ldr	r0, [pc, #548]	; (80042d8 <UART_SetConfig+0x1120>)
 80040b2:	e7ee      	b.n	8004092 <UART_SetConfig+0xeda>
 80040b4:	4889      	ldr	r0, [pc, #548]	; (80042dc <UART_SetConfig+0x1124>)
 80040b6:	e7ec      	b.n	8004092 <UART_SetConfig+0xeda>
 80040b8:	4889      	ldr	r0, [pc, #548]	; (80042e0 <UART_SetConfig+0x1128>)
 80040ba:	e7ea      	b.n	8004092 <UART_SetConfig+0xeda>
 80040bc:	4889      	ldr	r0, [pc, #548]	; (80042e4 <UART_SetConfig+0x112c>)
 80040be:	e7e8      	b.n	8004092 <UART_SetConfig+0xeda>
 80040c0:	4889      	ldr	r0, [pc, #548]	; (80042e8 <UART_SetConfig+0x1130>)
 80040c2:	e7e6      	b.n	8004092 <UART_SetConfig+0xeda>
 80040c4:	4889      	ldr	r0, [pc, #548]	; (80042ec <UART_SetConfig+0x1134>)
 80040c6:	e7e4      	b.n	8004092 <UART_SetConfig+0xeda>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c8:	b300      	cbz	r0, 800410c <UART_SetConfig+0xf54>
 80040ca:	2801      	cmp	r0, #1
 80040cc:	d020      	beq.n	8004110 <UART_SetConfig+0xf58>
 80040ce:	2802      	cmp	r0, #2
 80040d0:	d020      	beq.n	8004114 <UART_SetConfig+0xf5c>
 80040d2:	2803      	cmp	r0, #3
 80040d4:	d020      	beq.n	8004118 <UART_SetConfig+0xf60>
 80040d6:	2804      	cmp	r0, #4
 80040d8:	d020      	beq.n	800411c <UART_SetConfig+0xf64>
 80040da:	2805      	cmp	r0, #5
 80040dc:	d020      	beq.n	8004120 <UART_SetConfig+0xf68>
 80040de:	2806      	cmp	r0, #6
 80040e0:	d020      	beq.n	8004124 <UART_SetConfig+0xf6c>
 80040e2:	2807      	cmp	r0, #7
 80040e4:	d020      	beq.n	8004128 <UART_SetConfig+0xf70>
 80040e6:	2808      	cmp	r0, #8
 80040e8:	d020      	beq.n	800412c <UART_SetConfig+0xf74>
 80040ea:	2809      	cmp	r0, #9
 80040ec:	d020      	beq.n	8004130 <UART_SetConfig+0xf78>
 80040ee:	280a      	cmp	r0, #10
 80040f0:	d021      	beq.n	8004136 <UART_SetConfig+0xf7e>
 80040f2:	f643 5209 	movw	r2, #15625	; 0x3d09
 80040f6:	4b7a      	ldr	r3, [pc, #488]	; (80042e0 <UART_SetConfig+0x1128>)
 80040f8:	280b      	cmp	r0, #11
 80040fa:	bf14      	ite	ne
 80040fc:	4618      	movne	r0, r3
 80040fe:	4610      	moveq	r0, r2
 8004100:	686b      	ldr	r3, [r5, #4]
 8004102:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	e6f1      	b.n	8003ef0 <UART_SetConfig+0xd38>
 800410c:	4874      	ldr	r0, [pc, #464]	; (80042e0 <UART_SetConfig+0x1128>)
 800410e:	e7f7      	b.n	8004100 <UART_SetConfig+0xf48>
 8004110:	4874      	ldr	r0, [pc, #464]	; (80042e4 <UART_SetConfig+0x112c>)
 8004112:	e7f5      	b.n	8004100 <UART_SetConfig+0xf48>
 8004114:	4874      	ldr	r0, [pc, #464]	; (80042e8 <UART_SetConfig+0x1130>)
 8004116:	e7f3      	b.n	8004100 <UART_SetConfig+0xf48>
 8004118:	4875      	ldr	r0, [pc, #468]	; (80042f0 <UART_SetConfig+0x1138>)
 800411a:	e7f1      	b.n	8004100 <UART_SetConfig+0xf48>
 800411c:	4873      	ldr	r0, [pc, #460]	; (80042ec <UART_SetConfig+0x1134>)
 800411e:	e7ef      	b.n	8004100 <UART_SetConfig+0xf48>
 8004120:	4874      	ldr	r0, [pc, #464]	; (80042f4 <UART_SetConfig+0x113c>)
 8004122:	e7ed      	b.n	8004100 <UART_SetConfig+0xf48>
 8004124:	4874      	ldr	r0, [pc, #464]	; (80042f8 <UART_SetConfig+0x1140>)
 8004126:	e7eb      	b.n	8004100 <UART_SetConfig+0xf48>
 8004128:	4865      	ldr	r0, [pc, #404]	; (80042c0 <UART_SetConfig+0x1108>)
 800412a:	e7e9      	b.n	8004100 <UART_SetConfig+0xf48>
 800412c:	4873      	ldr	r0, [pc, #460]	; (80042fc <UART_SetConfig+0x1144>)
 800412e:	e7e7      	b.n	8004100 <UART_SetConfig+0xf48>
 8004130:	f24f 4024 	movw	r0, #62500	; 0xf424
 8004134:	e7e4      	b.n	8004100 <UART_SetConfig+0xf48>
 8004136:	f647 2012 	movw	r0, #31250	; 0x7a12
 800413a:	e7e1      	b.n	8004100 <UART_SetConfig+0xf48>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800413c:	b1d0      	cbz	r0, 8004174 <UART_SetConfig+0xfbc>
 800413e:	2801      	cmp	r0, #1
 8004140:	d01b      	beq.n	800417a <UART_SetConfig+0xfc2>
 8004142:	2802      	cmp	r0, #2
 8004144:	d01c      	beq.n	8004180 <UART_SetConfig+0xfc8>
 8004146:	2803      	cmp	r0, #3
 8004148:	d01d      	beq.n	8004186 <UART_SetConfig+0xfce>
 800414a:	2804      	cmp	r0, #4
 800414c:	d01e      	beq.n	800418c <UART_SetConfig+0xfd4>
 800414e:	2805      	cmp	r0, #5
 8004150:	d01f      	beq.n	8004192 <UART_SetConfig+0xfda>
 8004152:	2806      	cmp	r0, #6
 8004154:	d020      	beq.n	8004198 <UART_SetConfig+0xfe0>
 8004156:	2807      	cmp	r0, #7
 8004158:	d021      	beq.n	800419e <UART_SetConfig+0xfe6>
 800415a:	2808      	cmp	r0, #8
 800415c:	d022      	beq.n	80041a4 <UART_SetConfig+0xfec>
 800415e:	2809      	cmp	r0, #9
 8004160:	d023      	beq.n	80041aa <UART_SetConfig+0xff2>
 8004162:	280a      	cmp	r0, #10
 8004164:	d024      	beq.n	80041b0 <UART_SetConfig+0xff8>
 8004166:	280b      	cmp	r0, #11
 8004168:	bf14      	ite	ne
 800416a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800416e:	2380      	moveq	r3, #128	; 0x80
 8004170:	6868      	ldr	r0, [r5, #4]
 8004172:	e719      	b.n	8003fa8 <UART_SetConfig+0xdf0>
 8004174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004178:	e7fa      	b.n	8004170 <UART_SetConfig+0xfb8>
 800417a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800417e:	e7f7      	b.n	8004170 <UART_SetConfig+0xfb8>
 8004180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004184:	e7f4      	b.n	8004170 <UART_SetConfig+0xfb8>
 8004186:	f241 5355 	movw	r3, #5461	; 0x1555
 800418a:	e7f1      	b.n	8004170 <UART_SetConfig+0xfb8>
 800418c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004190:	e7ee      	b.n	8004170 <UART_SetConfig+0xfb8>
 8004192:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004196:	e7eb      	b.n	8004170 <UART_SetConfig+0xfb8>
 8004198:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800419c:	e7e8      	b.n	8004170 <UART_SetConfig+0xfb8>
 800419e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041a2:	e7e5      	b.n	8004170 <UART_SetConfig+0xfb8>
 80041a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a8:	e7e2      	b.n	8004170 <UART_SetConfig+0xfb8>
 80041aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ae:	e7df      	b.n	8004170 <UART_SetConfig+0xfb8>
 80041b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041b4:	e7dc      	b.n	8004170 <UART_SetConfig+0xfb8>
 80041b6:	2480      	movs	r4, #128	; 0x80
 80041b8:	f7ff b889 	b.w	80032ce <UART_SetConfig+0x116>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80041c0:	f43f a896 	beq.w	80032f0 <UART_SetConfig+0x138>
        ret = HAL_ERROR;
 80041c4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e694      	b.n	8003ef4 <UART_SetConfig+0xd3c>
    switch (clocksource)
 80041ca:	2c08      	cmp	r4, #8
 80041cc:	f43f aef1 	beq.w	8003fb2 <UART_SetConfig+0xdfa>
 80041d0:	d833      	bhi.n	800423a <UART_SetConfig+0x1082>
 80041d2:	2c01      	cmp	r4, #1
 80041d4:	f43f aeaf 	beq.w	8003f36 <UART_SetConfig+0xd7e>
 80041d8:	f4ff ae66 	bcc.w	8003ea8 <UART_SetConfig+0xcf0>
 80041dc:	2c04      	cmp	r4, #4
 80041de:	f47f a8f9 	bne.w	80033d4 <UART_SetConfig+0x21c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041e2:	4668      	mov	r0, sp
 80041e4:	f7fe fb38 	bl	8002858 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80041ea:	9b01      	ldr	r3, [sp, #4]
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	f43f aef0 	beq.w	8003fd2 <UART_SetConfig+0xe1a>
 80041f2:	2a01      	cmp	r2, #1
 80041f4:	f43f aeef 	beq.w	8003fd6 <UART_SetConfig+0xe1e>
 80041f8:	2a02      	cmp	r2, #2
 80041fa:	f43f aed2 	beq.w	8003fa2 <UART_SetConfig+0xdea>
 80041fe:	2a03      	cmp	r2, #3
 8004200:	f43f aeed 	beq.w	8003fde <UART_SetConfig+0xe26>
 8004204:	2a04      	cmp	r2, #4
 8004206:	f43f aecb 	beq.w	8003fa0 <UART_SetConfig+0xde8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800420a:	2a05      	cmp	r2, #5
 800420c:	f43f aee9 	beq.w	8003fe2 <UART_SetConfig+0xe2a>
 8004210:	2a06      	cmp	r2, #6
 8004212:	f43f aee8 	beq.w	8003fe6 <UART_SetConfig+0xe2e>
 8004216:	2a07      	cmp	r2, #7
 8004218:	f43f aee7 	beq.w	8003fea <UART_SetConfig+0xe32>
 800421c:	2a08      	cmp	r2, #8
 800421e:	f43f aee6 	beq.w	8003fee <UART_SetConfig+0xe36>
 8004222:	2a09      	cmp	r2, #9
 8004224:	f43f aee5 	beq.w	8003ff2 <UART_SetConfig+0xe3a>
 8004228:	2a0a      	cmp	r2, #10
 800422a:	f43f aee4 	beq.w	8003ff6 <UART_SetConfig+0xe3e>
 800422e:	2a0b      	cmp	r2, #11
 8004230:	bf14      	ite	ne
 8004232:	2401      	movne	r4, #1
 8004234:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8004238:	e6b3      	b.n	8003fa2 <UART_SetConfig+0xdea>
    switch (clocksource)
 800423a:	2c20      	cmp	r4, #32
 800423c:	f43f af44 	beq.w	80040c8 <UART_SetConfig+0xf10>
 8004240:	2c40      	cmp	r4, #64	; 0x40
 8004242:	f43f af7b 	beq.w	800413c <UART_SetConfig+0xf84>
 8004246:	2c10      	cmp	r4, #16
 8004248:	f47f a8c4 	bne.w	80033d4 <UART_SetConfig+0x21c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <UART_SetConfig+0x1148>)
 800424e:	6869      	ldr	r1, [r5, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	f012 0f20 	tst.w	r2, #32
 8004256:	f43f af01 	beq.w	800405c <UART_SetConfig+0xea4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <UART_SetConfig+0x110c>)
 800425e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004262:	40d3      	lsrs	r3, r2
 8004264:	2800      	cmp	r0, #0
 8004266:	f43f aec8 	beq.w	8003ffa <UART_SetConfig+0xe42>
 800426a:	2801      	cmp	r0, #1
 800426c:	f43f aec7 	beq.w	8003ffe <UART_SetConfig+0xe46>
 8004270:	2802      	cmp	r0, #2
 8004272:	f43f aec6 	beq.w	8004002 <UART_SetConfig+0xe4a>
 8004276:	2803      	cmp	r0, #3
 8004278:	f43f aec5 	beq.w	8004006 <UART_SetConfig+0xe4e>
 800427c:	2804      	cmp	r0, #4
 800427e:	f43f aec4 	beq.w	800400a <UART_SetConfig+0xe52>
 8004282:	2805      	cmp	r0, #5
 8004284:	f43f aec3 	beq.w	800400e <UART_SetConfig+0xe56>
 8004288:	2806      	cmp	r0, #6
 800428a:	f43f aec2 	beq.w	8004012 <UART_SetConfig+0xe5a>
 800428e:	2807      	cmp	r0, #7
 8004290:	f43f aec1 	beq.w	8004016 <UART_SetConfig+0xe5e>
 8004294:	2808      	cmp	r0, #8
 8004296:	f43f aec0 	beq.w	800401a <UART_SetConfig+0xe62>
 800429a:	2809      	cmp	r0, #9
 800429c:	f43f aebf 	beq.w	800401e <UART_SetConfig+0xe66>
 80042a0:	280a      	cmp	r0, #10
 80042a2:	f43f aebe 	beq.w	8004022 <UART_SetConfig+0xe6a>
 80042a6:	280b      	cmp	r0, #11
 80042a8:	bf14      	ite	ne
 80042aa:	2201      	movne	r2, #1
 80042ac:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80042b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80042b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80042bc:	e618      	b.n	8003ef0 <UART_SetConfig+0xd38>
 80042be:	bf00      	nop
 80042c0:	0003d090 	.word	0x0003d090
 80042c4:	03d09000 	.word	0x03d09000
 80042c8:	01e84800 	.word	0x01e84800
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	00a2c2aa 	.word	0x00a2c2aa
 80042d4:	007a1200 	.word	0x007a1200
 80042d8:	0061a800 	.word	0x0061a800
 80042dc:	00516155 	.word	0x00516155
 80042e0:	003d0900 	.word	0x003d0900
 80042e4:	001e8480 	.word	0x001e8480
 80042e8:	000f4240 	.word	0x000f4240
 80042ec:	0007a120 	.word	0x0007a120
 80042f0:	000a2c2a 	.word	0x000a2c2a
 80042f4:	00061a80 	.word	0x00061a80
 80042f8:	00051615 	.word	0x00051615
 80042fc:	0001e848 	.word	0x0001e848
 8004300:	58024400 	.word	0x58024400

08004304 <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004304:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004306:	2bff      	cmp	r3, #255	; 0xff
{
 8004308:	b510      	push	{r4, lr}
 800430a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800430c:	d904      	bls.n	8004318 <UART_AdvFeatureConfig+0x14>
 800430e:	f640 4149 	movw	r1, #3145	; 0xc49
 8004312:	486a      	ldr	r0, [pc, #424]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 8004314:	f000 fed4 	bl	80050c0 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004318:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800431a:	07d8      	lsls	r0, r3, #31
 800431c:	d50f      	bpl.n	800433e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800431e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004320:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8004324:	d004      	beq.n	8004330 <UART_AdvFeatureConfig+0x2c>
 8004326:	f640 414e 	movw	r1, #3150	; 0xc4e
 800432a:	4864      	ldr	r0, [pc, #400]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 800432c:	f000 fec8 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004334:	6853      	ldr	r3, [r2, #4]
 8004336:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800433a:	430b      	orrs	r3, r1
 800433c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800433e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004340:	0799      	lsls	r1, r3, #30
 8004342:	d50f      	bpl.n	8004364 <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004344:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004346:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800434a:	d004      	beq.n	8004356 <UART_AdvFeatureConfig+0x52>
 800434c:	f640 4155 	movw	r1, #3157	; 0xc55
 8004350:	485a      	ldr	r0, [pc, #360]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 8004352:	f000 feb5 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800435a:	6853      	ldr	r3, [r2, #4]
 800435c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004360:	430b      	orrs	r3, r1
 8004362:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004364:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004366:	075a      	lsls	r2, r3, #29
 8004368:	d50f      	bpl.n	800438a <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800436a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800436c:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8004370:	d004      	beq.n	800437c <UART_AdvFeatureConfig+0x78>
 8004372:	f640 415c 	movw	r1, #3164	; 0xc5c
 8004376:	4851      	ldr	r0, [pc, #324]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 8004378:	f000 fea2 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004380:	6853      	ldr	r3, [r2, #4]
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	430b      	orrs	r3, r1
 8004388:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800438a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	d50f      	bpl.n	80043b0 <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004392:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8004396:	d004      	beq.n	80043a2 <UART_AdvFeatureConfig+0x9e>
 8004398:	f640 4163 	movw	r1, #3171	; 0xc63
 800439c:	4847      	ldr	r0, [pc, #284]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 800439e:	f000 fe8f 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043a6:	6853      	ldr	r3, [r2, #4]
 80043a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043b2:	06d8      	lsls	r0, r3, #27
 80043b4:	d50f      	bpl.n	80043d6 <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80043b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043b8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80043bc:	d004      	beq.n	80043c8 <UART_AdvFeatureConfig+0xc4>
 80043be:	f640 416a 	movw	r1, #3178	; 0xc6a
 80043c2:	483e      	ldr	r0, [pc, #248]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 80043c4:	f000 fe7c 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043d8:	0699      	lsls	r1, r3, #26
 80043da:	d50f      	bpl.n	80043fc <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80043dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043de:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80043e2:	d004      	beq.n	80043ee <UART_AdvFeatureConfig+0xea>
 80043e4:	f640 4171 	movw	r1, #3185	; 0xc71
 80043e8:	4834      	ldr	r0, [pc, #208]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 80043ea:	f000 fe69 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80043f2:	6893      	ldr	r3, [r2, #8]
 80043f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043fe:	065a      	lsls	r2, r3, #25
 8004400:	d548      	bpl.n	8004494 <UART_AdvFeatureConfig+0x190>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <UART_AdvFeatureConfig+0x1bc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d020      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 800440a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800440e:	4293      	cmp	r3, r2
 8004410:	d01c      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 8004412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 800441a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800441e:	4293      	cmp	r3, r2
 8004420:	d014      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 8004422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004426:	4293      	cmp	r3, r2
 8004428:	d010      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 800442a:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800442e:	4293      	cmp	r3, r2
 8004430:	d00c      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 8004432:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8004436:	4293      	cmp	r3, r2
 8004438:	d008      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 800443a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <UART_AdvFeatureConfig+0x148>
 8004442:	f640 4178 	movw	r1, #3192	; 0xc78
 8004446:	481d      	ldr	r0, [pc, #116]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 8004448:	f000 fe3a 	bl	80050c0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800444c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800444e:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8004452:	d004      	beq.n	800445e <UART_AdvFeatureConfig+0x15a>
 8004454:	f640 4179 	movw	r1, #3193	; 0xc79
 8004458:	4818      	ldr	r0, [pc, #96]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 800445a:	f000 fe31 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800445e:	6821      	ldr	r1, [r4, #0]
 8004460:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004462:	684b      	ldr	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004464:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004468:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800446c:	ea43 0302 	orr.w	r3, r3, r2
 8004470:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004472:	d10f      	bne.n	8004494 <UART_AdvFeatureConfig+0x190>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004474:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004476:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800447a:	d004      	beq.n	8004486 <UART_AdvFeatureConfig+0x182>
 800447c:	f640 417e 	movw	r1, #3198	; 0xc7e
 8004480:	480e      	ldr	r0, [pc, #56]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 8004482:	f000 fe1d 	bl	80050c0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004486:	6822      	ldr	r2, [r4, #0]
 8004488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800448a:	6853      	ldr	r3, [r2, #4]
 800448c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004490:	430b      	orrs	r3, r1
 8004492:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004494:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	d50f      	bpl.n	80044ba <UART_AdvFeatureConfig+0x1b6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800449a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800449c:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80044a0:	d004      	beq.n	80044ac <UART_AdvFeatureConfig+0x1a8>
 80044a2:	f640 4186 	movw	r1, #3206	; 0xc86
 80044a6:	4805      	ldr	r0, [pc, #20]	; (80044bc <UART_AdvFeatureConfig+0x1b8>)
 80044a8:	f000 fe0a 	bl	80050c0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044ac:	6822      	ldr	r2, [r4, #0]
 80044ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80044b0:	6853      	ldr	r3, [r2, #4]
 80044b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80044b6:	430b      	orrs	r3, r1
 80044b8:	6053      	str	r3, [r2, #4]
 80044ba:	bd10      	pop	{r4, pc}
 80044bc:	080068e3 	.word	0x080068e3
 80044c0:	40011000 	.word	0x40011000

080044c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c8:	9d06      	ldr	r5, [sp, #24]
 80044ca:	4604      	mov	r4, r0
 80044cc:	460f      	mov	r7, r1
 80044ce:	4616      	mov	r6, r2
 80044d0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d2:	6821      	ldr	r1, [r4, #0]
 80044d4:	69ca      	ldr	r2, [r1, #28]
 80044d6:	ea37 0302 	bics.w	r3, r7, r2
 80044da:	bf0c      	ite	eq
 80044dc:	2201      	moveq	r2, #1
 80044de:	2200      	movne	r2, #0
 80044e0:	42b2      	cmp	r2, r6
 80044e2:	d002      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80044e4:	2000      	movs	r0, #0
}
 80044e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	1c68      	adds	r0, r5, #1
 80044ec:	d0f2      	beq.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fc f92f 	bl	8000750 <HAL_GetTick>
 80044f2:	eba0 0008 	sub.w	r0, r0, r8
 80044f6:	4285      	cmp	r5, r0
 80044f8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80044fa:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	d300      	bcc.n	8004500 <UART_WaitOnFlagUntilTimeout+0x3c>
 80044fe:	b98d      	cbnz	r5, 8004524 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004500:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004504:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	6883      	ldr	r3, [r0, #8]
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800450e:	2320      	movs	r3, #32
 8004510:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004514:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004518:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800451a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800451c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004524:	075a      	lsls	r2, r3, #29
 8004526:	d5d4      	bpl.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004528:	69c3      	ldr	r3, [r0, #28]
 800452a:	051b      	lsls	r3, r3, #20
 800452c:	d5d1      	bpl.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800452e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004532:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004534:	6803      	ldr	r3, [r0, #0]
 8004536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800453a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	6883      	ldr	r3, [r0, #8]
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004544:	2320      	movs	r3, #32
 8004546:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800454a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800454e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004552:	e7e1      	b.n	8004518 <UART_WaitOnFlagUntilTimeout+0x54>

08004554 <HAL_UART_Transmit>:
{
 8004554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004558:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800455a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 800455e:	4604      	mov	r4, r0
 8004560:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004562:	2b20      	cmp	r3, #32
{
 8004564:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004566:	d14e      	bne.n	8004606 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8004568:	2900      	cmp	r1, #0
 800456a:	d04a      	beq.n	8004602 <HAL_UART_Transmit+0xae>
 800456c:	2a00      	cmp	r2, #0
 800456e:	d048      	beq.n	8004602 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8004570:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d046      	beq.n	8004606 <HAL_UART_Transmit+0xb2>
 8004578:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800457c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004580:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004586:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 800458a:	f7fc f8e1 	bl	8000750 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004590:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8004592:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800459a:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	d103      	bne.n	80045a8 <HAL_UART_Transmit+0x54>
 80045a0:	6923      	ldr	r3, [r4, #16]
 80045a2:	b90b      	cbnz	r3, 80045a8 <HAL_UART_Transmit+0x54>
 80045a4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80045a6:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80045a8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ac:	463b      	mov	r3, r7
 80045ae:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80045b2:	b292      	uxth	r2, r2
 80045b4:	b952      	cbnz	r2, 80045cc <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b6:	2140      	movs	r1, #64	; 0x40
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff ff83 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 80045be:	b958      	cbnz	r0, 80045d8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80045c0:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80045c2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 80045c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 80045ca:	e006      	b.n	80045da <HAL_UART_Transmit+0x86>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7ff ff77 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 80045d6:	b118      	cbz	r0, 80045e0 <HAL_UART_Transmit+0x8c>
        return HAL_TIMEOUT;
 80045d8:	2003      	movs	r0, #3
}
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045e0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80045e2:	b95e      	cbnz	r6, 80045fc <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80045e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ec:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80045ee:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80045fa:	e7d5      	b.n	80045a8 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045fc:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004600:	e7f4      	b.n	80045ec <HAL_UART_Transmit+0x98>
      return  HAL_ERROR;
 8004602:	2001      	movs	r0, #1
 8004604:	e7e9      	b.n	80045da <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8004606:	2002      	movs	r0, #2
 8004608:	e7e7      	b.n	80045da <HAL_UART_Transmit+0x86>

0800460a <UART_CheckIdleState>:
{
 800460a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	2600      	movs	r6, #0
{
 800460e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004614:	f7fc f89c 	bl	8000750 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004618:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800461a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	071a      	lsls	r2, r3, #28
 8004620:	d417      	bmi.n	8004652 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	075b      	lsls	r3, r3, #29
 8004628:	d50a      	bpl.n	8004640 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800462a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800462e:	2200      	movs	r2, #0
 8004630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004634:	4620      	mov	r0, r4
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	462b      	mov	r3, r5
 800463a:	f7ff ff43 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 800463e:	b9a0      	cbnz	r0, 800466a <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004640:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004642:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004644:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004648:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800464c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8004650:	e00c      	b.n	800466c <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004656:	4632      	mov	r2, r6
 8004658:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4603      	mov	r3, r0
 8004660:	4620      	mov	r0, r4
 8004662:	f7ff ff2f 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8004666:	2800      	cmp	r0, #0
 8004668:	d0db      	beq.n	8004622 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800466a:	2003      	movs	r0, #3
}
 800466c:	b002      	add	sp, #8
 800466e:	bd70      	pop	{r4, r5, r6, pc}

08004670 <HAL_UART_Init>:
{
 8004670:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004672:	4604      	mov	r4, r0
 8004674:	2800      	cmp	r0, #0
 8004676:	d079      	beq.n	800476c <HAL_UART_Init+0xfc>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004678:	6981      	ldr	r1, [r0, #24]
 800467a:	6803      	ldr	r3, [r0, #0]
 800467c:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <HAL_UART_Init+0x100>)
 800467e:	2900      	cmp	r1, #0
 8004680:	d051      	beq.n	8004726 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004682:	4293      	cmp	r3, r2
 8004684:	d023      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004686:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800468a:	4293      	cmp	r3, r2
 800468c:	d01f      	beq.n	80046ce <HAL_UART_Init+0x5e>
 800468e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004692:	4293      	cmp	r3, r2
 8004694:	d01b      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800469a:	4293      	cmp	r3, r2
 800469c:	d017      	beq.n	80046ce <HAL_UART_Init+0x5e>
 800469e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_UART_Init+0x5e>
 80046a6:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <HAL_UART_Init+0x5e>
 80046ae:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <HAL_UART_Init+0x5e>
 80046b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_UART_Init+0x5e>
 80046be:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <HAL_UART_Init+0x104>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_UART_Init+0x5e>
 80046c4:	f44f 7199 	mov.w	r1, #306	; 0x132
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80046c8:	482b      	ldr	r0, [pc, #172]	; (8004778 <HAL_UART_Init+0x108>)
 80046ca:	f000 fcf9 	bl	80050c0 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 80046ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80046d2:	b923      	cbnz	r3, 80046de <HAL_UART_Init+0x6e>
    huart->Lock = HAL_UNLOCKED;
 80046d4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80046d8:	4620      	mov	r0, r4
 80046da:	f000 fd5d 	bl	8005198 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80046de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80046e0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80046e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80046e8:	6813      	ldr	r3, [r2, #0]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046f0:	f7fe fd62 	bl	80031b8 <UART_SetConfig>
 80046f4:	2801      	cmp	r0, #1
 80046f6:	d039      	beq.n	800476c <HAL_UART_Init+0xfc>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046fa:	b113      	cbz	r3, 8004702 <HAL_UART_Init+0x92>
    UART_AdvFeatureConfig(huart);
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff fe01 	bl	8004304 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004702:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004704:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800470c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004714:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
}
 800471c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004720:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004722:	f7ff bf72 	b.w	800460a <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8004726:	4293      	cmp	r3, r2
 8004728:	d0d1      	beq.n	80046ce <HAL_UART_Init+0x5e>
 800472a:	4a14      	ldr	r2, [pc, #80]	; (800477c <HAL_UART_Init+0x10c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d0ce      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004734:	4293      	cmp	r3, r2
 8004736:	d0ca      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004738:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800473c:	4293      	cmp	r3, r2
 800473e:	d0c6      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004740:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004744:	4293      	cmp	r3, r2
 8004746:	d0c2      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004748:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800474c:	4293      	cmp	r3, r2
 800474e:	d0be      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004750:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8004754:	4293      	cmp	r3, r2
 8004756:	d0ba      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004758:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800475c:	4293      	cmp	r3, r2
 800475e:	d0b6      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <HAL_UART_Init+0x104>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d0b3      	beq.n	80046ce <HAL_UART_Init+0x5e>
 8004766:	f240 1137 	movw	r1, #311	; 0x137
 800476a:	e7ad      	b.n	80046c8 <HAL_UART_Init+0x58>
}
 800476c:	2001      	movs	r0, #1
 800476e:	bd10      	pop	{r4, pc}
 8004770:	40011000 	.word	0x40011000
 8004774:	58000c00 	.word	0x58000c00
 8004778:	080068e3 	.word	0x080068e3
 800477c:	40004400 	.word	0x40004400

08004780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004782:	2203      	movs	r2, #3
 8004784:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004786:	2104      	movs	r1, #4
 8004788:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800478a:	f88d 2003 	strb.w	r2, [sp, #3]
 800478e:	2207      	movs	r2, #7
 8004790:	f88d 3000 	strb.w	r3, [sp]
 8004794:	f88d 2004 	strb.w	r2, [sp, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f88d 3001 	strb.w	r3, [sp, #1]
 800479e:	f88d 2006 	strb.w	r2, [sp, #6]
 80047a2:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047a6:	2208      	movs	r2, #8
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80047a8:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047ac:	f88d 2008 	strb.w	r2, [sp, #8]
 80047b0:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047b4:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80047b6:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047ba:	f88d 1009 	strb.w	r1, [sp, #9]
 80047be:	f88d 400a 	strb.w	r4, [sp, #10]
 80047c2:	f88d 100b 	strb.w	r1, [sp, #11]
 80047c6:	f88d 300d 	strb.w	r3, [sp, #13]
 80047ca:	f88d 300e 	strb.w	r3, [sp, #14]
 80047ce:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047d2:	b92a      	cbnz	r2, 80047e0 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 80047d4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80047d8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80047dc:	b004      	add	sp, #16
 80047de:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047e0:	6802      	ldr	r2, [r0, #0]
 80047e2:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047e4:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80047e6:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80047e8:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80047ec:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 80047f0:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80047f4:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 80047f8:	00d2      	lsls	r2, r2, #3
 80047fa:	fb92 f2f1 	sdiv	r2, r2, r1
 80047fe:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004802:	aa04      	add	r2, sp, #16
 8004804:	4413      	add	r3, r2
 8004806:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800480a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800480e:	00d2      	lsls	r2, r2, #3
 8004810:	fb92 f3f3 	sdiv	r3, r2, r3
 8004814:	e7e0      	b.n	80047d8 <UARTEx_SetNbDataToProcess+0x58>
	...

08004818 <HAL_UARTEx_DisableFifoMode>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8004818:	6803      	ldr	r3, [r0, #0]
 800481a:	4a20      	ldr	r2, [pc, #128]	; (800489c <HAL_UARTEx_DisableFifoMode+0x84>)
 800481c:	4293      	cmp	r3, r2
{
 800481e:	b510      	push	{r4, lr}
 8004820:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8004822:	d020      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004824:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004828:	4293      	cmp	r3, r2
 800482a:	d01c      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 800482c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004834:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004838:	4293      	cmp	r3, r2
 800483a:	d014      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 800483c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004840:	4293      	cmp	r3, r2
 8004842:	d010      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004844:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004848:	4293      	cmp	r3, r2
 800484a:	d00c      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 800484c:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8004850:	4293      	cmp	r3, r2
 8004852:	d008      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004854:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_UARTEx_DisableFifoMode+0x4e>
 800485c:	f240 2111 	movw	r1, #529	; 0x211
 8004860:	480f      	ldr	r0, [pc, #60]	; (80048a0 <HAL_UARTEx_DisableFifoMode+0x88>)
 8004862:	f000 fc2d 	bl	80050c0 <assert_failed>
  __HAL_LOCK(huart);
 8004866:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800486a:	2b01      	cmp	r3, #1
 800486c:	d013      	beq.n	8004896 <HAL_UARTEx_DisableFifoMode+0x7e>
  huart->gState = HAL_UART_STATE_BUSY;
 800486e:	2324      	movs	r3, #36	; 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004870:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8004872:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800487a:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800487c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8004880:	f021 0101 	bic.w	r1, r1, #1
 8004884:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004886:	6660      	str	r0, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004888:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800488a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800488c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 8004890:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 8004894:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8004896:	2002      	movs	r0, #2
}
 8004898:	bd10      	pop	{r4, pc}
 800489a:	bf00      	nop
 800489c:	40011000 	.word	0x40011000
 80048a0:	0800691c 	.word	0x0800691c

080048a4 <HAL_UARTEx_SetTxFifoThreshold>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <HAL_UARTEx_SetTxFifoThreshold+0xb0>)
 80048a8:	4293      	cmp	r3, r2
{
 80048aa:	b570      	push	{r4, r5, r6, lr}
 80048ac:	4604      	mov	r4, r0
 80048ae:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80048b0:	d020      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048b2:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01c      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048be:	4293      	cmp	r3, r2
 80048c0:	d018      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d014      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d010      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048d2:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00c      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048da:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80048de:	4293      	cmp	r3, r2
 80048e0:	d008      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048ea:	f240 213f 	movw	r1, #575	; 0x23f
 80048ee:	481a      	ldr	r0, [pc, #104]	; (8004958 <HAL_UARTEx_SetTxFifoThreshold+0xb4>)
 80048f0:	f000 fbe6 	bl	80050c0 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 80048f4:	f035 42c0 	bics.w	r2, r5, #1610612736	; 0x60000000
 80048f8:	f025 5300 	bic.w	r3, r5, #536870912	; 0x20000000
 80048fc:	d007      	beq.n	800490e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 80048fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004902:	d004      	beq.n	800490e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 8004904:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004908:	4813      	ldr	r0, [pc, #76]	; (8004958 <HAL_UARTEx_SetTxFifoThreshold+0xb4>)
 800490a:	f000 fbd9 	bl	80050c0 <assert_failed>
  __HAL_LOCK(huart);
 800490e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d01c      	beq.n	8004950 <HAL_UARTEx_SetTxFifoThreshold+0xac>
 8004916:	2301      	movs	r3, #1
  UARTEx_SetNbDataToProcess(huart);
 8004918:	4620      	mov	r0, r4
  __HAL_LOCK(huart);
 800491a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800491e:	2324      	movs	r3, #36	; 0x24
 8004920:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004930:	6899      	ldr	r1, [r3, #8]
 8004932:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8004936:	4329      	orrs	r1, r5
 8004938:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800493a:	f7ff ff21 	bl	8004780 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800493e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004940:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004942:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004944:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004946:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 800494a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 800494e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004950:	2002      	movs	r0, #2
}
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	40011000 	.word	0x40011000
 8004958:	0800691c 	.word	0x0800691c

0800495c <HAL_UARTEx_SetRxFifoThreshold>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800495c:	6803      	ldr	r3, [r0, #0]
 800495e:	4a2b      	ldr	r2, [pc, #172]	; (8004a0c <HAL_UARTEx_SetRxFifoThreshold+0xb0>)
 8004960:	4293      	cmp	r3, r2
{
 8004962:	b570      	push	{r4, r5, r6, lr}
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8004968:	d020      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800496a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800496e:	4293      	cmp	r3, r2
 8004970:	d01c      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8004972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800497a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800497e:	4293      	cmp	r3, r2
 8004980:	d014      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8004982:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004986:	4293      	cmp	r3, r2
 8004988:	d010      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800498a:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800498e:	4293      	cmp	r3, r2
 8004990:	d00c      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8004992:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8004996:	4293      	cmp	r3, r2
 8004998:	d008      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800499a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80049a2:	f44f 711c 	mov.w	r1, #624	; 0x270
 80049a6:	481a      	ldr	r0, [pc, #104]	; (8004a10 <HAL_UARTEx_SetRxFifoThreshold+0xb4>)
 80049a8:	f000 fb8a 	bl	80050c0 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80049ac:	f035 62c0 	bics.w	r2, r5, #100663296	; 0x6000000
 80049b0:	f025 7300 	bic.w	r3, r5, #33554432	; 0x2000000
 80049b4:	d007      	beq.n	80049c6 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 80049b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ba:	d004      	beq.n	80049c6 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 80049bc:	f240 2171 	movw	r1, #625	; 0x271
 80049c0:	4813      	ldr	r0, [pc, #76]	; (8004a10 <HAL_UARTEx_SetRxFifoThreshold+0xb4>)
 80049c2:	f000 fb7d 	bl	80050c0 <assert_failed>
  __HAL_LOCK(huart);
 80049c6:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d01c      	beq.n	8004a08 <HAL_UARTEx_SetRxFifoThreshold+0xac>
 80049ce:	2301      	movs	r3, #1
  UARTEx_SetNbDataToProcess(huart);
 80049d0:	4620      	mov	r0, r4
  __HAL_LOCK(huart);
 80049d2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80049d6:	2324      	movs	r3, #36	; 0x24
 80049d8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	f021 6160 	bic.w	r1, r1, #234881024	; 0xe000000
 80049ee:	4329      	orrs	r1, r5
 80049f0:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80049f2:	f7ff fec5 	bl	8004780 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049f6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80049f8:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049fa:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80049fc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80049fe:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 8004a02:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004a08:	2002      	movs	r0, #2
}
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	0800691c 	.word	0x0800691c

08004a14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a16:	3b01      	subs	r3, #1
 8004a18:	d101      	bne.n	8004a1e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8004a1a:	2003      	movs	r0, #3
 8004a1c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a1e:	6902      	ldr	r2, [r0, #16]
 8004a20:	2a00      	cmp	r2, #0
 8004a22:	daf8      	bge.n	8004a16 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a24:	6903      	ldr	r3, [r0, #16]
 8004a26:	4a06      	ldr	r2, [pc, #24]	; (8004a40 <USB_CoreReset+0x2c>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	d0f3      	beq.n	8004a1a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a32:	6903      	ldr	r3, [r0, #16]
 8004a34:	f013 0301 	ands.w	r3, r3, #1
 8004a38:	d1f9      	bne.n	8004a2e <USB_CoreReset+0x1a>

  return HAL_OK;
 8004a3a:	4618      	mov	r0, r3
}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	00030d41 	.word	0x00030d41

08004a44 <USB_CoreInit>:
{
 8004a44:	b084      	sub	sp, #16
 8004a46:	b538      	push	{r3, r4, r5, lr}
 8004a48:	ad05      	add	r5, sp, #20
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d126      	bne.n	8004aa4 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a56:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a5e:	68c3      	ldr	r3, [r0, #12]
 8004a60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a68:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a6a:	68c3      	ldr	r3, [r0, #12]
 8004a6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a70:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d103      	bne.n	8004a80 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a78:	68c3      	ldr	r3, [r0, #12]
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7ff ffc7 	bl	8004a14 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004a86:	9b08      	ldr	r3, [sp, #32]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a8c:	68a3      	ldr	r3, [r4, #8]
 8004a8e:	f043 0308 	orr.w	r3, r3, #8
 8004a92:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a94:	68a3      	ldr	r3, [r4, #8]
 8004a96:	f043 0320 	orr.w	r3, r3, #32
 8004a9a:	60a3      	str	r3, [r4, #8]
}
 8004a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aa0:	b004      	add	sp, #16
 8004aa2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aa4:	68c3      	ldr	r3, [r0, #12]
 8004aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aaa:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004aac:	f7ff ffb2 	bl	8004a14 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab2:	b923      	cbnz	r3, 8004abe <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ab4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aba:	63a3      	str	r3, [r4, #56]	; 0x38
 8004abc:	e7e3      	b.n	8004a86 <USB_CoreInit+0x42>
 8004abe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac4:	e7f9      	b.n	8004aba <USB_CoreInit+0x76>

08004ac6 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ac6:	6883      	ldr	r3, [r0, #8]
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	6083      	str	r3, [r0, #8]
}
 8004ace:	2000      	movs	r0, #0
 8004ad0:	4770      	bx	lr

08004ad2 <USB_SetCurrentMode>:
{
 8004ad2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ad4:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004ad6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ad8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004adc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004ade:	d108      	bne.n	8004af2 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ae0:	68c3      	ldr	r3, [r0, #12]
 8004ae2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ae6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004ae8:	2032      	movs	r0, #50	; 0x32
 8004aea:	f7fb fe37 	bl	800075c <HAL_Delay>
  return HAL_OK;
 8004aee:	2000      	movs	r0, #0
 8004af0:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004af2:	b919      	cbnz	r1, 8004afc <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004af4:	68c3      	ldr	r3, [r0, #12]
 8004af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004afa:	e7f4      	b.n	8004ae6 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8004afc:	2001      	movs	r0, #1
}
 8004afe:	bd08      	pop	{r3, pc}

08004b00 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b00:	0189      	lsls	r1, r1, #6
 8004b02:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <USB_FlushTxFifo+0x20>)
 8004b04:	f041 0120 	orr.w	r1, r1, #32
 8004b08:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	d005      	beq.n	8004b1a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b0e:	6903      	ldr	r3, [r0, #16]
 8004b10:	f013 0320 	ands.w	r3, r3, #32
 8004b14:	d1f9      	bne.n	8004b0a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004b16:	4618      	mov	r0, r3
 8004b18:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004b1a:	2003      	movs	r0, #3
}
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	00030d41 	.word	0x00030d41

08004b24 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b24:	2310      	movs	r3, #16
 8004b26:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <USB_FlushRxFifo+0x1c>)
 8004b28:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8004b2a:	3a01      	subs	r2, #1
 8004b2c:	d005      	beq.n	8004b3a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b2e:	6903      	ldr	r3, [r0, #16]
 8004b30:	f013 0310 	ands.w	r3, r3, #16
 8004b34:	d1f9      	bne.n	8004b2a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004b36:	4618      	mov	r0, r3
 8004b38:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004b3a:	2003      	movs	r0, #3
}
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	00030d41 	.word	0x00030d41

08004b44 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004b44:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004b48:	4319      	orrs	r1, r3
 8004b4a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004b4e:	2000      	movs	r0, #0
 8004b50:	4770      	bx	lr
	...

08004b54 <USB_DevInit>:
{
 8004b54:	b084      	sub	sp, #16
 8004b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	a809      	add	r0, sp, #36	; 0x24
 8004b5e:	4688      	mov	r8, r1
 8004b60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004b64:	2300      	movs	r3, #0
 8004b66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004b68:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8004b70:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8004b72:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8004b76:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8004b78:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004b7a:	d1f7      	bne.n	8004b6c <USB_DevInit+0x18>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8004b7e:	2e00      	cmp	r6, #0
 8004b80:	d172      	bne.n	8004c68 <USB_DevInit+0x114>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b86:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004b98:	2300      	movs	r3, #0
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b9a:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8004b9e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ba2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004ba6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d161      	bne.n	8004c74 <USB_DevInit+0x120>
    if (cfg.speed == USBD_HS_SPEED)
 8004bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bb2:	2900      	cmp	r1, #0
 8004bb4:	d15c      	bne.n	8004c70 <USB_DevInit+0x11c>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff ffc4 	bl	8004b44 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bbc:	2110      	movs	r1, #16
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff ff9e 	bl	8004b00 <USB_FlushTxFifo>
 8004bc4:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7ff ffac 	bl	8004b24 <USB_FlushRxFifo>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d153      	bne.n	8004c78 <USB_DevInit+0x124>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd0:	1c08      	adds	r0, r1, #0
 8004bd2:	bf18      	it	ne
 8004bd4:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bdc:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004be0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004be4:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004be6:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8004bea:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bec:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bee:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf0:	4543      	cmp	r3, r8
 8004bf2:	d143      	bne.n	8004c7c <USB_DevInit+0x128>
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bfa:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bfe:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c02:	468e      	mov	lr, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c04:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c08:	428b      	cmp	r3, r1
 8004c0a:	d14a      	bne.n	8004ca2 <USB_DevInit+0x14e>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c0c:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8004c0e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c14:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8004c16:	d107      	bne.n	8004c28 <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <USB_DevInit+0x178>)
 8004c1a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004c1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c22:	f043 0303 	orr.w	r3, r3, #3
 8004c26:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c2c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004c30:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004c32:	b91f      	cbnz	r7, 8004c3c <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c34:	69a3      	ldr	r3, [r4, #24]
 8004c36:	f043 0310 	orr.w	r3, r3, #16
 8004c3a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c3c:	69a2      	ldr	r2, [r4, #24]
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <USB_DevInit+0x17c>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c46:	b11b      	cbz	r3, 8004c50 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c48:	69a3      	ldr	r3, [r4, #24]
 8004c4a:	f043 0308 	orr.w	r3, r3, #8
 8004c4e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004c50:	2e01      	cmp	r6, #1
 8004c52:	d105      	bne.n	8004c60 <USB_DevInit+0x10c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c54:	69a3      	ldr	r3, [r4, #24]
 8004c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	61a3      	str	r3, [r4, #24]
}
 8004c60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	b004      	add	sp, #16
 8004c66:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c6e:	e793      	b.n	8004b98 <USB_DevInit+0x44>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c70:	4619      	mov	r1, r3
 8004c72:	e7a0      	b.n	8004bb6 <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c74:	2103      	movs	r1, #3
 8004c76:	e79e      	b.n	8004bb6 <USB_DevInit+0x62>
 8004c78:	2001      	movs	r0, #1
 8004c7a:	e7ac      	b.n	8004bd6 <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c7c:	f8d2 a000 	ldr.w	sl, [r2]
 8004c80:	f1ba 0f00 	cmp.w	sl, #0
 8004c84:	da0b      	bge.n	8004c9e <USB_DevInit+0x14a>
      if (i == 0U)
 8004c86:	b93b      	cbnz	r3, 8004c98 <USB_DevInit+0x144>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c88:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c8c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c8e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c90:	f8c2 9008 	str.w	r9, [r2, #8]
 8004c94:	3220      	adds	r2, #32
 8004c96:	e7ab      	b.n	8004bf0 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c98:	f8c2 e000 	str.w	lr, [r2]
 8004c9c:	e7f6      	b.n	8004c8c <USB_DevInit+0x138>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c9e:	6011      	str	r1, [r2, #0]
 8004ca0:	e7f4      	b.n	8004c8c <USB_DevInit+0x138>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ca2:	f8d2 a000 	ldr.w	sl, [r2]
 8004ca6:	f1ba 0f00 	cmp.w	sl, #0
 8004caa:	da0c      	bge.n	8004cc6 <USB_DevInit+0x172>
      if (i == 0U)
 8004cac:	b941      	cbnz	r1, 8004cc0 <USB_DevInit+0x16c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cae:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cb2:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cb8:	f8c2 9008 	str.w	r9, [r2, #8]
 8004cbc:	3220      	adds	r2, #32
 8004cbe:	e7a3      	b.n	8004c08 <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cc0:	f8c2 c000 	str.w	ip, [r2]
 8004cc4:	e7f5      	b.n	8004cb2 <USB_DevInit+0x15e>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cc6:	f8c2 e000 	str.w	lr, [r2]
 8004cca:	e7f2      	b.n	8004cb2 <USB_DevInit+0x15e>
 8004ccc:	00800100 	.word	0x00800100
 8004cd0:	803c3800 	.word	0x803c3800

08004cd4 <USB_DevDisconnect>:
{
 8004cd4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cd6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004cda:	f043 0302 	orr.w	r3, r3, #2
 8004cde:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8004ce2:	2003      	movs	r0, #3
 8004ce4:	f7fb fd3a 	bl	800075c <HAL_Delay>
}
 8004ce8:	2000      	movs	r0, #0
 8004cea:	bd08      	pop	{r3, pc}

08004cec <SDCardIsDetected>:
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	SDCardIsDetected(void)
{
 8004cec:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) != GPIO_PIN_RESET)
 8004cee:	2104      	movs	r1, #4
 8004cf0:	4803      	ldr	r0, [pc, #12]	; (8004d00 <SDCardIsDetected+0x14>)
 8004cf2:	f7fc f831 	bl	8000d58 <HAL_GPIO_ReadPin>
    {
        status = SD_NOT_PRESENT;
    }

    return status;
}  
 8004cf6:	fab0 f080 	clz	r0, r0
 8004cfa:	0940      	lsrs	r0, r0, #5
 8004cfc:	bd08      	pop	{r3, pc}
 8004cfe:	bf00      	nop
 8004d00:	58021800 	.word	0x58021800

08004d04 <__io_putchar>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;



int __io_putchar(int ch)
{
 8004d04:	b507      	push	{r0, r1, r2, lr}
	uint8_t temp = (uint8_t)ch;
 8004d06:	f88d 0007 	strb.w	r0, [sp, #7]

	while(HAL_UART_GetState(&huart3) != HAL_UART_STATE_READY);
 8004d0a:	4808      	ldr	r0, [pc, #32]	; (8004d2c <__io_putchar+0x28>)
 8004d0c:	f7fe fa4b 	bl	80031a6 <HAL_UART_GetState>
 8004d10:	2820      	cmp	r0, #32
 8004d12:	d1fa      	bne.n	8004d0a <__io_putchar+0x6>
	HAL_UART_Transmit(&huart3, &temp, sizeof(uint8_t), 100);
 8004d14:	2364      	movs	r3, #100	; 0x64
 8004d16:	2201      	movs	r2, #1
 8004d18:	f10d 0107 	add.w	r1, sp, #7
 8004d1c:	4803      	ldr	r0, [pc, #12]	; (8004d2c <__io_putchar+0x28>)
 8004d1e:	f7ff fc19 	bl	8004554 <HAL_UART_Transmit>

	return 0;
}
 8004d22:	2000      	movs	r0, #0
 8004d24:	b003      	add	sp, #12
 8004d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d2a:	bf00      	nop
 8004d2c:	20000138 	.word	0x20000138

08004d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d30:	b530      	push	{r4, r5, lr}
 8004d32:	b0cd      	sub	sp, #308	; 0x134
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d34:	224c      	movs	r2, #76	; 0x4c
 8004d36:	2100      	movs	r1, #0
 8004d38:	a80a      	add	r0, sp, #40	; 0x28
 8004d3a:	f000 fd7f 	bl	800583c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d3e:	2220      	movs	r2, #32
 8004d40:	2100      	movs	r1, #0
 8004d42:	a802      	add	r0, sp, #8
 8004d44:	f000 fd7a 	bl	800583c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d48:	22bc      	movs	r2, #188	; 0xbc
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	a81d      	add	r0, sp, #116	; 0x74
 8004d4e:	f000 fd75 	bl	800583c <memset>

	/** Supply configuration update enable
	*/
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004d52:	2002      	movs	r0, #2
 8004d54:	f7fc f8f0 	bl	8000f38 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	4b33      	ldr	r3, [pc, #204]	; (8004e2c <SystemClock_Config+0xfc>)
 8004d5e:	699a      	ldr	r2, [r3, #24]
 8004d60:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004d64:	619a      	str	r2, [r3, #24]
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004d6c:	9201      	str	r2, [sp, #4]
 8004d6e:	4a30      	ldr	r2, [pc, #192]	; (8004e30 <SystemClock_Config+0x100>)
 8004d70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d72:	f041 0101 	orr.w	r1, r1, #1
 8004d76:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d7a:	f002 0201 	and.w	r2, r2, #1
 8004d7e:	9201      	str	r2, [sp, #4]
 8004d80:	9a01      	ldr	r2, [sp, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	0492      	lsls	r2, r2, #18
 8004d86:	d5fc      	bpl.n	8004d82 <SystemClock_Config+0x52>
	/** Macro to configure the PLL clock source
	*/
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <SystemClock_Config+0x104>)
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d8a:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d8c:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLQ = 20;
	RCC_OscInitStruct.PLL.PLLR = 2;
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d8e:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004d90:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	f043 0302 	orr.w	r3, r3, #2
 8004d9a:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004d9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004da0:	950a      	str	r5, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004da2:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 120;
 8004da4:	2378      	movs	r3, #120	; 0x78
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004da6:	9413      	str	r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 120;
 8004da8:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 20;
 8004daa:	2314      	movs	r3, #20
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004dac:	9414      	str	r4, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = 20;
 8004dae:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004db0:	230c      	movs	r3, #12
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004db2:	9515      	str	r5, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004db4:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004db6:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLP = 2;
 8004db8:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004dba:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004dbc:	931b      	str	r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004dbe:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dc0:	f7fc f8f2 	bl	8000fa8 <HAL_RCC_OscConfig>
 8004dc4:	b100      	cbz	r0, 8004dc8 <SystemClock_Config+0x98>
 8004dc6:	e7fe      	b.n	8004dc6 <SystemClock_Config+0x96>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dc8:	233f      	movs	r3, #63	; 0x3f
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004dce:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dd0:	2104      	movs	r1, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dd2:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dd4:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dd6:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004dd8:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dda:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004ddc:	2308      	movs	r3, #8
 8004dde:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004de4:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004de6:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004de8:	f7fc fc78 	bl	80016dc <HAL_RCC_ClockConfig>
 8004dec:	b100      	cbz	r0, 8004df0 <SystemClock_Config+0xc0>
 8004dee:	e7fe      	b.n	8004dee <SystemClock_Config+0xbe>
	{
		Error_Handler();
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI5
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <SystemClock_Config+0x108>)
	PeriphClkInitStruct.PLL2.PLL2N = 50;
	PeriphClkInitStruct.PLL2.PLL2P = 2;
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
	PeriphClkInitStruct.PLL2.PLL2R = 2;
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004df2:	9024      	str	r0, [sp, #144]	; 0x90
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI5
 8004df4:	931d      	str	r3, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLL2.PLL2N = 50;
 8004df6:	2332      	movs	r3, #50	; 0x32
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004df8:	9025      	str	r0, [sp, #148]	; 0x94
	PeriphClkInitStruct.PLL2.PLL2N = 50;
 8004dfa:	931f      	str	r3, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8004dfc:	2304      	movs	r3, #4
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004dfe:	903a      	str	r0, [sp, #232]	; 0xe8
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e00:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8004e02:	9321      	str	r3, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004e04:	23c0      	movs	r3, #192	; 0xc0
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 8004e06:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004e08:	9323      	str	r3, [sp, #140]	; 0x8c
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8004e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8004e0e:	9420      	str	r4, [sp, #128]	; 0x80
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8004e10:	9335      	str	r3, [sp, #212]	; 0xd4
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004e12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004e16:	9422      	str	r4, [sp, #136]	; 0x88
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004e18:	933e      	str	r3, [sp, #248]	; 0xf8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e1a:	f7fc ffed 	bl	8001df8 <HAL_RCCEx_PeriphCLKConfig>
 8004e1e:	b100      	cbz	r0, 8004e22 <SystemClock_Config+0xf2>
 8004e20:	e7fe      	b.n	8004e20 <SystemClock_Config+0xf0>
	{
		Error_Handler();
	}
	/** Enable USB Voltage detector
	*/
	HAL_PWREx_EnableUSBVoltageDetector();
 8004e22:	f7fc f8b9 	bl	8000f98 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8004e26:	b04d      	add	sp, #308	; 0x134
 8004e28:	bd30      	pop	{r4, r5, pc}
 8004e2a:	bf00      	nop
 8004e2c:	58024800 	.word	0x58024800
 8004e30:	58000400 	.word	0x58000400
 8004e34:	58024400 	.word	0x58024400
 8004e38:	00042002 	.word	0x00042002

08004e3c <main>:
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e40:	2500      	movs	r5, #0
	HAL_Init();
 8004e42:	f7fb fc4b 	bl	80006dc <HAL_Init>
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SD_DETECT_Pin */
	GPIO_InitStruct.Pin = SD_DETECT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e46:	2601      	movs	r6, #1
	SystemClock_Config();
 8004e48:	f7ff ff72 	bl	8004d30 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4c:	2214      	movs	r2, #20
 8004e4e:	2100      	movs	r1, #0
 8004e50:	a807      	add	r0, sp, #28
 8004e52:	f000 fcf3 	bl	800583c <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004e56:	4b8b      	ldr	r3, [pc, #556]	; (8005084 <main+0x248>)
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 8004e58:	488b      	ldr	r0, [pc, #556]	; (8005088 <main+0x24c>)

	/*Configure GPIO pin : SD_SELECT_Pin */
	GPIO_InitStruct.Pin = SD_SELECT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e5a:	2702      	movs	r7, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004e5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	huart3.Instance = USART3;
 8004e60:	4c8a      	ldr	r4, [pc, #552]	; (800508c <main+0x250>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004e62:	f042 0204 	orr.w	r2, r2, #4
 8004e66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e6e:	f002 0204 	and.w	r2, r2, #4
 8004e72:	9200      	str	r2, [sp, #0]
 8004e74:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004e76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e7a:	f042 0220 	orr.w	r2, r2, #32
 8004e7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e86:	f002 0220 	and.w	r2, r2, #32
 8004e8a:	9201      	str	r2, [sp, #4]
 8004e8c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004e8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004e9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004e9e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004ea2:	9202      	str	r2, [sp, #8]
 8004ea4:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004eaa:	f042 0202 	orr.w	r2, r2, #2
 8004eae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004eb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004eb6:	f002 0202 	and.w	r2, r2, #2
 8004eba:	9203      	str	r2, [sp, #12]
 8004ebc:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004ebe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ec2:	f042 0208 	orr.w	r2, r2, #8
 8004ec6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004eca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ece:	f002 0208 	and.w	r2, r2, #8
 8004ed2:	9204      	str	r2, [sp, #16]
 8004ed4:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8004ed6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ede:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004ee2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ee6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004eea:	9205      	str	r2, [sp, #20]
 8004eec:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004eee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 8004efa:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 8004f00:	4611      	mov	r1, r2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	9306      	str	r3, [sp, #24]
 8004f08:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 8004f0a:	f7fb ff37 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8004f14:	485e      	ldr	r0, [pc, #376]	; (8005090 <main+0x254>)
 8004f16:	f7fb ff31 	bl	8000d7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2140      	movs	r1, #64	; 0x40
 8004f1e:	485d      	ldr	r0, [pc, #372]	; (8005094 <main+0x258>)
 8004f20:	f7fb ff2c 	bl	8000d7c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004f28:	a907      	add	r1, sp, #28
 8004f2a:	4857      	ldr	r0, [pc, #348]	; (8005088 <main+0x24c>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004f2c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	; (8005098 <main+0x25c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f32:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004f34:	f7fb fca6 	bl	8000884 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8004f38:	2304      	movs	r3, #4
	HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004f3a:	a907      	add	r1, sp, #28
 8004f3c:	4855      	ldr	r0, [pc, #340]	; (8005094 <main+0x258>)
	GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8004f3e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f40:	4b56      	ldr	r3, [pc, #344]	; (800509c <main+0x260>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f42:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f44:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8004f46:	f7fb fc9d 	bl	8000884 <HAL_GPIO_Init>
	HAL_GPIO_Init(SD_SELECT_GPIO_Port, &GPIO_InitStruct);
 8004f4a:	a907      	add	r1, sp, #28
 8004f4c:	484e      	ldr	r0, [pc, #312]	; (8005088 <main+0x24c>)
	GPIO_InitStruct.Pin = SD_SELECT_Pin;
 8004f4e:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f50:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f52:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f54:	970a      	str	r7, [sp, #40]	; 0x28
	HAL_GPIO_Init(SD_SELECT_GPIO_Port, &GPIO_InitStruct);
 8004f56:	f7fb fc95 	bl	8000884 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004f5a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5e:	a907      	add	r1, sp, #28
 8004f60:	484b      	ldr	r0, [pc, #300]	; (8005090 <main+0x254>)
	GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8004f62:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f64:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f68:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f6a:	f7fb fc8b 	bl	8000884 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004f6e:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004f70:	a907      	add	r1, sp, #28
 8004f72:	4848      	ldr	r0, [pc, #288]	; (8005094 <main+0x258>)
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004f74:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f76:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f78:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004f7c:	f7fb fc82 	bl	8000884 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004f80:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004f82:	a907      	add	r1, sp, #28
 8004f84:	4843      	ldr	r0, [pc, #268]	; (8005094 <main+0x258>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004f86:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f88:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8a:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004f8c:	f7fb fc7a 	bl	8000884 <HAL_GPIO_Init>
	huart3.Init.BaudRate = 115200;
 8004f90:	4b43      	ldr	r3, [pc, #268]	; (80050a0 <main+0x264>)
 8004f92:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f96:	4620      	mov	r0, r4
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f98:	60a5      	str	r5, [r4, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004f9a:	60e5      	str	r5, [r4, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004f9c:	6125      	str	r5, [r4, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f9e:	61a5      	str	r5, [r4, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fa0:	61e5      	str	r5, [r4, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fa2:	6225      	str	r5, [r4, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fa4:	6265      	str	r5, [r4, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fa6:	62a5      	str	r5, [r4, #40]	; 0x28
	huart3.Init.BaudRate = 115200;
 8004fa8:	e884 4008 	stmia.w	r4, {r3, lr}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004fac:	230c      	movs	r3, #12
 8004fae:	6163      	str	r3, [r4, #20]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004fb0:	f7ff fb5e 	bl	8004670 <HAL_UART_Init>
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	b100      	cbz	r0, 8004fba <main+0x17e>
 8004fb8:	e7fe      	b.n	8004fb8 <main+0x17c>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7ff fc72 	bl	80048a4 <HAL_UARTEx_SetTxFifoThreshold>
 8004fc0:	4601      	mov	r1, r0
 8004fc2:	b100      	cbz	r0, 8004fc6 <main+0x18a>
 8004fc4:	e7fe      	b.n	8004fc4 <main+0x188>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7ff fcc8 	bl	800495c <HAL_UARTEx_SetRxFifoThreshold>
 8004fcc:	b100      	cbz	r0, 8004fd0 <main+0x194>
 8004fce:	e7fe      	b.n	8004fce <main+0x192>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff fc21 	bl	8004818 <HAL_UARTEx_DisableFifoMode>
 8004fd6:	b100      	cbz	r0, 8004fda <main+0x19e>
 8004fd8:	e7fe      	b.n	8004fd8 <main+0x19c>
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004fda:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <main+0x268>)
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004fdc:	2409      	movs	r4, #9
 8004fde:	4a32      	ldr	r2, [pc, #200]	; (80050a8 <main+0x26c>)
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004fe0:	6118      	str	r0, [r3, #16]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004fe2:	6218      	str	r0, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004fe4:	6258      	str	r0, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004fe6:	6318      	str	r0, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004fe8:	4618      	mov	r0, r3
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004fea:	60df      	str	r7, [r3, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004fec:	619f      	str	r7, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004fee:	61de      	str	r6, [r3, #28]
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8004ff0:	629e      	str	r6, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004ff2:	62de      	str	r6, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004ff4:	e883 0014 	stmia.w	r3, {r2, r4}
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004ff8:	f7fb feec 	bl	8000dd4 <HAL_PCD_Init>
 8004ffc:	b100      	cbz	r0, 8005000 <main+0x1c4>
 8004ffe:	e7fe      	b.n	8004ffe <main+0x1c2>
	hspi5.Instance = SPI5;
 8005000:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <main+0x270>)
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8005002:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005006:	492a      	ldr	r1, [pc, #168]	; (80050b0 <main+0x274>)
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8005008:	6098      	str	r0, [r3, #8]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800500a:	6118      	str	r0, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800500c:	6158      	str	r0, [r3, #20]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800500e:	6218      	str	r0, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005010:	6258      	str	r0, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005012:	6298      	str	r0, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 0x0;
 8005014:	62d8      	str	r0, [r3, #44]	; 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005016:	6358      	str	r0, [r3, #52]	; 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005018:	6398      	str	r0, [r3, #56]	; 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800501a:	63d8      	str	r0, [r3, #60]	; 0x3c
	hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800501c:	6418      	str	r0, [r3, #64]	; 0x40
	hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800501e:	6458      	str	r0, [r3, #68]	; 0x44
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005020:	6498      	str	r0, [r3, #72]	; 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8005022:	64d8      	str	r0, [r3, #76]	; 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005024:	6518      	str	r0, [r3, #80]	; 0x50
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005026:	6598      	str	r0, [r3, #88]	; 0x58
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 8005028:	4618      	mov	r0, r3
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800502a:	e883 0006 	stmia.w	r3, {r1, r2}
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800502e:	2207      	movs	r2, #7
 8005030:	60da      	str	r2, [r3, #12]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8005032:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005036:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503c:	61da      	str	r2, [r3, #28]
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 800503e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005042:	655a      	str	r2, [r3, #84]	; 0x54
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 8005044:	f7fd fdc8 	bl	8002bd8 <HAL_SPI_Init>
 8005048:	b100      	cbz	r0, 800504c <main+0x210>
 800504a:	e7fe      	b.n	800504a <main+0x20e>
	md = MDD_SDSPI_MediaInitialize();
 800504c:	f000 fa9e 	bl	800558c <MDD_SDSPI_MediaInitialize>
 8005050:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <main+0x278>)
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8005052:	4c0f      	ldr	r4, [pc, #60]	; (8005090 <main+0x254>)
	md = MDD_SDSPI_MediaInitialize();
 8005054:	6018      	str	r0, [r3, #0]
	printf("%i\n", md->errorCode);
 8005056:	7801      	ldrb	r1, [r0, #0]
 8005058:	4817      	ldr	r0, [pc, #92]	; (80050b8 <main+0x27c>)
 800505a:	f000 fbf7 	bl	800584c <iprintf>
		if(SDCardIsDetected())
 800505e:	f7ff fe45 	bl	8004cec <SDCardIsDetected>
 8005062:	4602      	mov	r2, r0
 8005064:	b100      	cbz	r0, 8005068 <main+0x22c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8005066:	2201      	movs	r2, #1
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8005068:	4620      	mov	r0, r4
 800506a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800506e:	f7fb fe85 	bl	8000d7c <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8005072:	4620      	mov	r0, r4
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	f7fb fe9b 	bl	8000db0 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800507a:	2064      	movs	r0, #100	; 0x64
 800507c:	f7fb fb6e 	bl	800075c <HAL_Delay>
		if(SDCardIsDetected())
 8005080:	e7ed      	b.n	800505e <main+0x222>
 8005082:	bf00      	nop
 8005084:	58024400 	.word	0x58024400
 8005088:	58020800 	.word	0x58020800
 800508c:	20000138 	.word	0x20000138
 8005090:	58020400 	.word	0x58020400
 8005094:	58021800 	.word	0x58021800
 8005098:	11110000 	.word	0x11110000
 800509c:	11210000 	.word	0x11210000
 80050a0:	40004800 	.word	0x40004800
 80050a4:	200001c4 	.word	0x200001c4
 80050a8:	40080000 	.word	0x40080000
 80050ac:	200000b0 	.word	0x200000b0
 80050b0:	40015000 	.word	0x40015000
 80050b4:	200005cc 	.word	0x200005cc
 80050b8:	08006985 	.word	0x08006985

080050bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050bc:	e7fe      	b.n	80050bc <Error_Handler>
	...

080050c0 <assert_failed>:
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
	printf("Wrong parameters value: file %s on line %u\r\n", file, line);
 80050c0:	460a      	mov	r2, r1
 80050c2:	4601      	mov	r1, r0
 80050c4:	4801      	ldr	r0, [pc, #4]	; (80050cc <assert_failed+0xc>)
 80050c6:	f000 bbc1 	b.w	800584c <iprintf>
 80050ca:	bf00      	nop
 80050cc:	08006958 	.word	0x08006958

080050d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <HAL_MspInit+0x20>)
{
 80050d2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80050d8:	f042 0202 	orr.w	r2, r2, #2
 80050dc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80050e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ec:	b002      	add	sp, #8
 80050ee:	4770      	bx	lr
 80050f0:	58024400 	.word	0x58024400

080050f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050f4:	b510      	push	{r4, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050fa:	2214      	movs	r2, #20
 80050fc:	2100      	movs	r1, #0
 80050fe:	a803      	add	r0, sp, #12
 8005100:	f000 fb9c 	bl	800583c <memset>
  if(hspi->Instance==SPI5)
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_SPI_MspInit+0x68>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d124      	bne.n	8005156 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800510c:	4b14      	ldr	r3, [pc, #80]	; (8005160 <HAL_SPI_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800510e:	a903      	add	r1, sp, #12
 8005110:	4814      	ldr	r0, [pc, #80]	; (8005164 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005112:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005116:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800511a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800511e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005122:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005126:	9201      	str	r2, [sp, #4]
 8005128:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800512a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800512e:	f042 0220 	orr.w	r2, r2, #32
 8005132:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	9302      	str	r3, [sp, #8]
 8005140:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005142:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005146:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800514c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800514e:	2305      	movs	r3, #5
 8005150:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005152:	f7fb fb97 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8005156:	b008      	add	sp, #32
 8005158:	bd10      	pop	{r4, pc}
 800515a:	bf00      	nop
 800515c:	40015000 	.word	0x40015000
 8005160:	58024400 	.word	0x58024400
 8005164:	58021400 	.word	0x58021400

08005168 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI5)
 8005168:	6802      	ldr	r2, [r0, #0]
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <HAL_SPI_MspDeInit+0x24>)
 800516c:	429a      	cmp	r2, r3
 800516e:	d10b      	bne.n	8005188 <HAL_SPI_MspDeInit+0x20>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8005170:	4a07      	ldr	r2, [pc, #28]	; (8005190 <HAL_SPI_MspDeInit+0x28>)
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8005172:	f44f 7160 	mov.w	r1, #896	; 0x380
 8005176:	4807      	ldr	r0, [pc, #28]	; (8005194 <HAL_SPI_MspDeInit+0x2c>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 8005178:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 800517c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005180:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8005184:	f7fb bd0a 	b.w	8000b9c <HAL_GPIO_DeInit>
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40015000 	.word	0x40015000
 8005190:	58024400 	.word	0x58024400
 8005194:	58021400 	.word	0x58021400

08005198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005198:	b510      	push	{r4, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800519e:	2214      	movs	r2, #20
 80051a0:	2100      	movs	r1, #0
 80051a2:	a803      	add	r0, sp, #12
 80051a4:	f000 fb4a 	bl	800583c <memset>
  if(huart->Instance==USART3)
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <HAL_UART_MspInit+0x64>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d123      	bne.n	80051f8 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80051b0:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b2:	a903      	add	r1, sp, #12
 80051b4:	4813      	ldr	r0, [pc, #76]	; (8005204 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80051b6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80051ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80051be:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80051c2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80051c6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80051ca:	9201      	str	r2, [sp, #4]
 80051cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80051d2:	f042 0208 	orr.w	r2, r2, #8
 80051d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80051da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	9302      	str	r3, [sp, #8]
 80051e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80051e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ec:	2302      	movs	r3, #2
 80051ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051f0:	2307      	movs	r3, #7
 80051f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051f4:	f7fb fb46 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80051f8:	b008      	add	sp, #32
 80051fa:	bd10      	pop	{r4, pc}
 80051fc:	40004800 	.word	0x40004800
 8005200:	58024400 	.word	0x58024400
 8005204:	58020c00 	.word	0x58020c00

08005208 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005208:	b510      	push	{r4, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520e:	2214      	movs	r2, #20
 8005210:	2100      	movs	r1, #0
 8005212:	a803      	add	r0, sp, #12
 8005214:	f000 fb12 	bl	800583c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	4b19      	ldr	r3, [pc, #100]	; (8005280 <HAL_PCD_MspInit+0x78>)
 800521c:	429a      	cmp	r2, r3
 800521e:	d12d      	bne.n	800527c <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005220:	4c18      	ldr	r4, [pc, #96]	; (8005284 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005222:	a903      	add	r1, sp, #12
 8005224:	4818      	ldr	r0, [pc, #96]	; (8005288 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005226:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005232:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800523e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005242:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	2302      	movs	r3, #2
 8005246:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005248:	230a      	movs	r3, #10
 800524a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524c:	f7fb fb1a 	bl	8000884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005250:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005254:	a903      	add	r1, sp, #12
 8005256:	480c      	ldr	r0, [pc, #48]	; (8005288 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005258:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800525a:	2300      	movs	r3, #0
 800525c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005260:	f7fb fb10 	bl	8000884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005264:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8005268:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800526c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005270:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	9302      	str	r3, [sp, #8]
 800527a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800527c:	b008      	add	sp, #32
 800527e:	bd10      	pop	{r4, pc}
 8005280:	40080000 	.word	0x40080000
 8005284:	58024400 	.word	0x58024400
 8005288:	58020000 	.word	0x58020000

0800528c <NMI_Handler>:
 800528c:	4770      	bx	lr

0800528e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800528e:	e7fe      	b.n	800528e <HardFault_Handler>

08005290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005290:	e7fe      	b.n	8005290 <MemManage_Handler>

08005292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005292:	e7fe      	b.n	8005292 <BusFault_Handler>

08005294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005294:	e7fe      	b.n	8005294 <UsageFault_Handler>

08005296 <SVC_Handler>:
 8005296:	4770      	bx	lr

08005298 <DebugMon_Handler>:
 8005298:	4770      	bx	lr

0800529a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800529a:	4770      	bx	lr

0800529c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800529c:	f7fb ba4c 	b.w	8000738 <HAL_IncTick>

080052a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	460e      	mov	r6, r1
 80052a4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a6:	460c      	mov	r4, r1
 80052a8:	1ba3      	subs	r3, r4, r6
 80052aa:	429d      	cmp	r5, r3
 80052ac:	dc01      	bgt.n	80052b2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80052ae:	4628      	mov	r0, r5
 80052b0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80052b2:	f3af 8000 	nop.w
 80052b6:	f804 0b01 	strb.w	r0, [r4], #1
 80052ba:	e7f5      	b.n	80052a8 <_read+0x8>

080052bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	460e      	mov	r6, r1
 80052c0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052c2:	460c      	mov	r4, r1
 80052c4:	1ba3      	subs	r3, r4, r6
 80052c6:	429d      	cmp	r5, r3
 80052c8:	dc01      	bgt.n	80052ce <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80052ca:	4628      	mov	r0, r5
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80052ce:	f814 0b01 	ldrb.w	r0, [r4], #1
 80052d2:	f7ff fd17 	bl	8004d04 <__io_putchar>
 80052d6:	e7f5      	b.n	80052c4 <_write+0x8>

080052d8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80052d8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <_sbrk+0x2c>)
{
 80052dc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	b909      	cbnz	r1, 80052e6 <_sbrk+0xe>
		heap_end = &end;
 80052e2:	4909      	ldr	r1, [pc, #36]	; (8005308 <_sbrk+0x30>)
 80052e4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80052e6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80052e8:	4669      	mov	r1, sp
 80052ea:	4402      	add	r2, r0
 80052ec:	428a      	cmp	r2, r1
 80052ee:	d906      	bls.n	80052fe <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80052f0:	f000 fa7a 	bl	80057e8 <__errno>
 80052f4:	230c      	movs	r3, #12
 80052f6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80052fe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005300:	bd08      	pop	{r3, pc}
 8005302:	bf00      	nop
 8005304:	20000090 	.word	0x20000090
 8005308:	200005d4 	.word	0x200005d4

0800530c <_close>:

int _close(int file)
{
	return -1;
}
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	4770      	bx	lr

08005312 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005316:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005318:	604b      	str	r3, [r1, #4]
}
 800531a:	4770      	bx	lr

0800531c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800531c:	2001      	movs	r0, #1
 800531e:	4770      	bx	lr

08005320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005320:	2000      	movs	r0, #0
 8005322:	4770      	bx	lr

08005324 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005324:	4918      	ldr	r1, [pc, #96]	; (8005388 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005326:	4819      	ldr	r0, [pc, #100]	; (800538c <SystemInit+0x68>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005328:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800532c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8005330:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <SystemInit+0x6c>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005340:	2200      	movs	r2, #0
 8005342:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8005344:	681c      	ldr	r4, [r3, #0]
 8005346:	4020      	ands	r0, r4
 8005348:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800534a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800534c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800534e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8005350:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8005358:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800535a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800535e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005366:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005368:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <SystemInit+0x70>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005376:	d202      	bcs.n	800537e <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005378:	2201      	movs	r2, #1
 800537a:	4b07      	ldr	r3, [pc, #28]	; (8005398 <SystemInit+0x74>)
 800537c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800537e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005382:	608b      	str	r3, [r1, #8]
 8005384:	bd10      	pop	{r4, pc}
 8005386:	bf00      	nop
 8005388:	e000ed00 	.word	0xe000ed00
 800538c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005390:	58024400 	.word	0x58024400
 8005394:	5c001000 	.word	0x5c001000
 8005398:	51008108 	.word	0x51008108

0800539c <SD_Select>:
}


static void SD_Select(void)
{
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_RESET);
 800539c:	2200      	movs	r2, #0
 800539e:	2101      	movs	r1, #1
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <SD_Select+0xc>)
 80053a2:	f7fb bceb 	b.w	8000d7c <HAL_GPIO_WritePin>
 80053a6:	bf00      	nop
 80053a8:	58020800 	.word	0x58020800

080053ac <SD_DeSelect>:
}

static void SD_DeSelect(void)
{
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 80053ac:	2201      	movs	r2, #1
 80053ae:	4802      	ldr	r0, [pc, #8]	; (80053b8 <SD_DeSelect+0xc>)
 80053b0:	4611      	mov	r1, r2
 80053b2:	f7fb bce3 	b.w	8000d7c <HAL_GPIO_WritePin>
 80053b6:	bf00      	nop
 80053b8:	58020800 	.word	0x58020800

080053bc <SPI_WriteByte>:
{
 80053bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80053be:	f88d 000f 	strb.w	r0, [sp, #15]
	while(HAL_SPI_GetState(&hspi5) != HAL_SPI_STATE_READY);
 80053c2:	480a      	ldr	r0, [pc, #40]	; (80053ec <SPI_WriteByte+0x30>)
 80053c4:	f7fd feec 	bl	80031a0 <HAL_SPI_GetState>
 80053c8:	2801      	cmp	r0, #1
 80053ca:	4603      	mov	r3, r0
 80053cc:	d1f9      	bne.n	80053c2 <SPI_WriteByte+0x6>
	HAL_SPI_TransmitReceive(&hspi5, &byte, &receive, 1, 1000);
 80053ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053d2:	f10d 010f 	add.w	r1, sp, #15
 80053d6:	4805      	ldr	r0, [pc, #20]	; (80053ec <SPI_WriteByte+0x30>)
 80053d8:	9200      	str	r2, [sp, #0]
 80053da:	f10d 0217 	add.w	r2, sp, #23
 80053de:	f7fd fd4b 	bl	8002e78 <HAL_SPI_TransmitReceive>
}
 80053e2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80053e6:	b007      	add	sp, #28
 80053e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80053ec:	200000b0 	.word	0x200000b0

080053f0 <SetCommand>:
{
 80053f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053f4:	9f07      	ldr	r7, [sp, #28]
    (*((unsigned long long*)command_array)) |= ((unsigned long long)argument) << 8;
 80053f6:	2600      	movs	r6, #0
    (*((unsigned long long*)command_array)) |= ((unsigned long long)command) << 40;
 80053f8:	ea4f 2903 	mov.w	r9, r3, lsl #8
    (*((unsigned long long*)command_array)) |= ((unsigned long long)argument) << 8;
 80053fc:	0e3d      	lsrs	r5, r7, #24
 80053fe:	023c      	lsls	r4, r7, #8
    (*((unsigned long long*)command_array)) |= ((unsigned char)crc7) << 1;
 8005400:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8005404:	007f      	lsls	r7, r7, #1
    (*((unsigned long long*)command_array)) |= ((unsigned char)end_bit) & 0x0000000000000001;
 8005406:	433c      	orrs	r4, r7
 8005408:	ea45 75e7 	orr.w	r5, r5, r7, asr #31
 800540c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8005410:	ea45 0509 	orr.w	r5, r5, r9
    (*((unsigned long long*)command_array)) |= ((unsigned long long)host_bit) << 46;
 8005414:	ea4f 3982 	mov.w	r9, r2, lsl #14
    (*((unsigned long long*)command_array)) |= ((unsigned char)end_bit) & 0x0000000000000001;
 8005418:	f007 0701 	and.w	r7, r7, #1
 800541c:	ea45 0509 	orr.w	r5, r5, r9
 8005420:	433c      	orrs	r4, r7
 8005422:	4334      	orrs	r4, r6
 8005424:	e9d0 2300 	ldrd	r2, r3, [r0]
 8005428:	4334      	orrs	r4, r6
 800542a:	431d      	orrs	r5, r3
    (*((unsigned long long*)command_array)) |= (((unsigned long long)start_bit) << 47);
 800542c:	03cb      	lsls	r3, r1, #15
    (*((unsigned long long*)command_array)) |= ((unsigned char)end_bit) & 0x0000000000000001;
 800542e:	4314      	orrs	r4, r2
 8005430:	431d      	orrs	r5, r3
 8005432:	4334      	orrs	r4, r6
 8005434:	e9c0 4500 	strd	r4, r5, [r0]
 8005438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800543c <SendMMCCmd>:

	return TRUE;
}

static MMC_RESPONSE SendMMCCmd(SdCMD cmd, DWORD address)
{
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE cmd_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	MMC_RESPONSE response;
	int i;
	int timeout = 0x8;

	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 8005440:	4d41      	ldr	r5, [pc, #260]	; (8005548 <SendMMCCmd+0x10c>)
 8005442:	008e      	lsls	r6, r1, #2
 8005444:	f04f 0e01 	mov.w	lr, #1
{
 8005448:	b087      	sub	sp, #28
	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 800544a:	eb05 0a06 	add.w	sl, r5, r6
 800544e:	f815 3021 	ldrb.w	r3, [r5, r1, lsl #2]
{
 8005452:	4607      	mov	r7, r0
	BYTE cmd_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8005454:	2000      	movs	r0, #0
	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 8005456:	f89a 1001 	ldrb.w	r1, [sl, #1]
 800545a:	f8cd e008 	str.w	lr, [sp, #8]
 800545e:	fa21 f10e 	lsr.w	r1, r1, lr
	BYTE cmd_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8005462:	9004      	str	r0, [sp, #16]
 8005464:	9005      	str	r0, [sp, #20]
	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 8005466:	9101      	str	r1, [sp, #4]
 8005468:	4601      	mov	r1, r0
 800546a:	9200      	str	r2, [sp, #0]
 800546c:	a804      	add	r0, sp, #16
 800546e:	4672      	mov	r2, lr
 8005470:	f7ff ffbe 	bl	80053f0 <SetCommand>
//	if(SD_ReadyWait() != 0xFF)
//	{
//		response.r1._byte = 0xFF;
//		return response;
//	}
	SD_Select();
 8005474:	f7ff ff92 	bl	800539c <SD_Select>
	(void)SPI_WriteByte(cmd_array[5]);
 8005478:	f89d 0015 	ldrb.w	r0, [sp, #21]
 800547c:	f7ff ff9e 	bl	80053bc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[4]);
 8005480:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8005484:	f7ff ff9a 	bl	80053bc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[3]);
 8005488:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800548c:	f7ff ff96 	bl	80053bc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[2]);
 8005490:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8005494:	f7ff ff92 	bl	80053bc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[1]);
 8005498:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800549c:	f7ff ff8e 	bl	80053bc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[0]);
 80054a0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80054a4:	f7ff ff8a 	bl	80053bc <SPI_WriteByte>

	if(cmdTable[cmd].responsetype == R1 || cmdTable[cmd].responsetype == R1b  || cmdTable[cmd].responsetype == R7)
 80054a8:	f89a a002 	ldrb.w	sl, [sl, #2]
 80054ac:	f1ba 0f01 	cmp.w	sl, #1
 80054b0:	d902      	bls.n	80054b8 <SendMMCCmd+0x7c>
 80054b2:	f1ba 0f04 	cmp.w	sl, #4
 80054b6:	d125      	bne.n	8005504 <SendMMCCmd+0xc8>
 80054b8:	f04f 0b08 	mov.w	fp, #8
	{
		do
		{
			response.r1._byte = SPI_ReadByte();
 80054bc:	20ff      	movs	r0, #255	; 0xff
 80054be:	f7ff ff7d 	bl	80053bc <SPI_WriteByte>
			timeout--;
		}while(response.r1._byte == MMC_FLOATING_BUS && timeout != 0);
 80054c2:	28ff      	cmp	r0, #255	; 0xff
			response.r1._byte = SPI_ReadByte();
 80054c4:	4680      	mov	r8, r0
		}while(response.r1._byte == MMC_FLOATING_BUS && timeout != 0);
 80054c6:	d102      	bne.n	80054ce <SendMMCCmd+0x92>
 80054c8:	f1bb 0b01 	subs.w	fp, fp, #1
 80054cc:	d1f6      	bne.n	80054bc <SendMMCCmd+0x80>
	{
		(void)SPI_WriteByte(0xFF);
		response.r2._byte1 = SPI_ReadByte();
		response.r2._byte0 = SPI_ReadByte();
	}
	if(cmdTable[cmd].responsetype == R1b)
 80054ce:	f1ba 0f01 	cmp.w	sl, #1
 80054d2:	d036      	beq.n	8005542 <SendMMCCmd+0x106>
				timeout--;
			}while((response.r1._byte != 0x00) && (timeout != 0));
		}
	}

	if(cmdTable[cmd].responsetype == R7)
 80054d4:	f1ba 0f04 	cmp.w	sl, #4
 80054d8:	d122      	bne.n	8005520 <SendMMCCmd+0xe4>
	{
		response.r7.bytewise._returnVal = ((DWORD)SPI_ReadByte()) << 24;
 80054da:	20ff      	movs	r0, #255	; 0xff
 80054dc:	f7ff ff6e 	bl	80053bc <SPI_WriteByte>
 80054e0:	4604      	mov	r4, r0
		response.r7.bytewise._returnVal += ((DWORD)SPI_ReadByte()) << 16;
 80054e2:	20ff      	movs	r0, #255	; 0xff
 80054e4:	f7ff ff6a 	bl	80053bc <SPI_WriteByte>
 80054e8:	0400      	lsls	r0, r0, #16
 80054ea:	eb00 6404 	add.w	r4, r0, r4, lsl #24
		response.r7.bytewise._returnVal += ((DWORD)SPI_ReadByte()) << 8;
 80054ee:	20ff      	movs	r0, #255	; 0xff
 80054f0:	f7ff ff64 	bl	80053bc <SPI_WriteByte>
 80054f4:	4682      	mov	sl, r0
		response.r7.bytewise._returnVal += ((DWORD)SPI_ReadByte());
 80054f6:	20ff      	movs	r0, #255	; 0xff
 80054f8:	f7ff ff60 	bl	80053bc <SPI_WriteByte>
 80054fc:	4404      	add	r4, r0
 80054fe:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8005502:	e00d      	b.n	8005520 <SendMMCCmd+0xe4>
	else if(cmdTable[cmd].responsetype == R2)
 8005504:	f1ba 0f02 	cmp.w	sl, #2
 8005508:	d10a      	bne.n	8005520 <SendMMCCmd+0xe4>
		(void)SPI_WriteByte(0xFF);
 800550a:	20ff      	movs	r0, #255	; 0xff
 800550c:	f7ff ff56 	bl	80053bc <SPI_WriteByte>
		response.r2._byte1 = SPI_ReadByte();
 8005510:	20ff      	movs	r0, #255	; 0xff
 8005512:	f7ff ff53 	bl	80053bc <SPI_WriteByte>
 8005516:	4681      	mov	r9, r0
		response.r2._byte0 = SPI_ReadByte();
 8005518:	20ff      	movs	r0, #255	; 0xff
 800551a:	f7ff ff4f 	bl	80053bc <SPI_WriteByte>
 800551e:	4680      	mov	r8, r0
	}

	(void)SPI_WriteByte(0xFF);
	if(!(cmdTable[cmd].moredataexpected))
 8005520:	4435      	add	r5, r6
	(void)SPI_WriteByte(0xFF);
 8005522:	20ff      	movs	r0, #255	; 0xff
 8005524:	f7ff ff4a 	bl	80053bc <SPI_WriteByte>
	if(!(cmdTable[cmd].moredataexpected))
 8005528:	78eb      	ldrb	r3, [r5, #3]
 800552a:	b90b      	cbnz	r3, 8005530 <SendMMCCmd+0xf4>
		SD_DeSelect();
 800552c:	f7ff ff3e 	bl	80053ac <SD_DeSelect>

	return response;
}
 8005530:	4638      	mov	r0, r7
	return response;
 8005532:	f887 8000 	strb.w	r8, [r7]
 8005536:	f887 9001 	strb.w	r9, [r7, #1]
 800553a:	607c      	str	r4, [r7, #4]
}
 800553c:	b007      	add	sp, #28
 800553e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	e7eb      	b.n	8005520 <SendMMCCmd+0xe4>
 8005548:	080069ae 	.word	0x080069ae

0800554c <MX_SPI5_FreqSwitch>:
{
 800554c:	b510      	push	{r4, lr}
 800554e:	4604      	mov	r4, r0
	if(HAL_SPI_DeInit(&hspi5) != HAL_OK)
 8005550:	480c      	ldr	r0, [pc, #48]	; (8005584 <MX_SPI5_FreqSwitch+0x38>)
 8005552:	f7fd fc57 	bl	8002e04 <HAL_SPI_DeInit>
 8005556:	b108      	cbz	r0, 800555c <MX_SPI5_FreqSwitch+0x10>
		Error_Handler();
 8005558:	f7ff fdb0 	bl	80050bc <Error_Handler>
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <MX_SPI5_FreqSwitch+0x38>)
	if(freq)
 800555e:	b16c      	cbz	r4, 800557c <MX_SPI5_FreqSwitch+0x30>
		hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 8005564:	4807      	ldr	r0, [pc, #28]	; (8005584 <MX_SPI5_FreqSwitch+0x38>)
		hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005566:	61da      	str	r2, [r3, #28]
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 8005568:	f7fd fb36 	bl	8002bd8 <HAL_SPI_Init>
 800556c:	b148      	cbz	r0, 8005582 <MX_SPI5_FreqSwitch+0x36>
		printf("SPI init error\n");
 800556e:	4806      	ldr	r0, [pc, #24]	; (8005588 <MX_SPI5_FreqSwitch+0x3c>)
 8005570:	f000 f9e0 	bl	8005934 <puts>
}
 8005574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 8005578:	f7ff bda0 	b.w	80050bc <Error_Handler>
		hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800557c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8005580:	e7f0      	b.n	8005564 <MX_SPI5_FreqSwitch+0x18>
 8005582:	bd10      	pop	{r4, pc}
 8005584:	200000b0 	.word	0x200000b0
 8005588:	0800699f 	.word	0x0800699f

0800558c <MDD_SDSPI_MediaInitialize>:



MEDIA_INFORMATION* MDD_SDSPI_MediaInitialize(void)
{
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BYTE CSDResponse[20];
	DWORD c_size;
	BYTE c_size_mult;
	BYTE block_len;

	MDD_SDSPI_finalLBA = 0;
 800558e:	2000      	movs	r0, #0
 8005590:	4c7a      	ldr	r4, [pc, #488]	; (800577c <MDD_SDSPI_MediaInitialize+0x1f0>)
    MX_SPI5_FreqSwitch(LOW_SPEED);

	SD_DeSelect();
 8005592:	250a      	movs	r5, #10
{
 8005594:	b089      	sub	sp, #36	; 0x24
	MDD_SDSPI_finalLBA = 0;
 8005596:	6020      	str	r0, [r4, #0]
    MX_SPI5_FreqSwitch(LOW_SPEED);
 8005598:	f7ff ffd8 	bl	800554c <MX_SPI5_FreqSwitch>
	SD_DeSelect();
 800559c:	f7ff ff06 	bl	80053ac <SD_DeSelect>

	for(i = 0; i < 10; i++)
	{
		(void)SPI_WriteByte(0xFF);
 80055a0:	20ff      	movs	r0, #255	; 0xff
 80055a2:	f7ff ff0b 	bl	80053bc <SPI_WriteByte>
	for(i = 0; i < 10; i++)
 80055a6:	3d01      	subs	r5, #1
 80055a8:	d1fa      	bne.n	80055a0 <MDD_SDSPI_MediaInitialize+0x14>
	}
	SD_Select();
 80055aa:	f7ff fef7 	bl	800539c <SD_Select>

	response = SendMMCCmd(GO_IDLE_STATE, 0);
 80055ae:	462a      	mov	r2, r5
 80055b0:	4629      	mov	r1, r5
 80055b2:	a801      	add	r0, sp, #4
 80055b4:	f7ff ff42 	bl	800543c <SendMMCCmd>
 80055b8:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if((response.r1._byte == MMC_BAD_RESPONSE) || ((response.r1._byte & 0xF7) != 0x01) )
 80055bc:	2bff      	cmp	r3, #255	; 0xff
 80055be:	d003      	beq.n	80055c8 <MDD_SDSPI_MediaInitialize+0x3c>
 80055c0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d007      	beq.n	80055d8 <MDD_SDSPI_MediaInitialize+0x4c>
	{
#ifdef SD_CARD_DEBUG
		DEBUG_Message("Sd not Initialized",__FUNCTION__ ,__FILE__, __LINE__);
#endif
		SD_DeSelect();
 80055c8:	f7ff fef0 	bl	80053ac <SD_DeSelect>
		mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 80055cc:	2202      	movs	r2, #2
 80055ce:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <MDD_SDSPI_MediaInitialize+0x1f4>)
 80055d0:	701a      	strb	r2, [r3, #0]


	//MX_SPI5_FreqSwitch(MAX_FREQ);

    return &mediaInformation;
}
 80055d2:	486b      	ldr	r0, [pc, #428]	; (8005780 <MDD_SDSPI_MediaInitialize+0x1f4>)
 80055d4:	b009      	add	sp, #36	; 0x24
 80055d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	response = SendMMCCmd(SEND_IF_COND, 0x1AA);
 80055d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80055dc:	2102      	movs	r1, #2
 80055de:	a801      	add	r0, sp, #4
 80055e0:	f7ff ff2c 	bl	800543c <SendMMCCmd>
	if(((response.r7.bytewise._returnVal & 0xFFF) == 0x1AA) && (!response.r7.bitwise.bits.ILLEGAL_CMD))
 80055e4:	9b02      	ldr	r3, [sp, #8]
 80055e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ea:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 80055ee:	f040 8086 	bne.w	80056fe <MDD_SDSPI_MediaInitialize+0x172>
 80055f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055f6:	075b      	lsls	r3, r3, #29
 80055f8:	f100 8081 	bmi.w	80056fe <MDD_SDSPI_MediaInitialize+0x172>
 80055fc:	f640 75ff 	movw	r5, #4095	; 0xfff
			response = SendMMCCmd(SEND_OP_COND, 0x40000000);
 8005600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005604:	2101      	movs	r1, #1
 8005606:	a801      	add	r0, sp, #4
			timeout--;
 8005608:	3d01      	subs	r5, #1
			response = SendMMCCmd(SEND_OP_COND, 0x40000000);
 800560a:	f7ff ff17 	bl	800543c <SendMMCCmd>
		while(response.r1._byte  != 0x00 && timeout != 0);
 800560e:	f89d 3004 	ldrb.w	r3, [sp, #4]
			timeout--;
 8005612:	b2ad      	uxth	r5, r5
		while(response.r1._byte  != 0x00 && timeout != 0);
 8005614:	b10b      	cbz	r3, 800561a <MDD_SDSPI_MediaInitialize+0x8e>
 8005616:	2d00      	cmp	r5, #0
 8005618:	d1f2      	bne.n	8005600 <MDD_SDSPI_MediaInitialize+0x74>
		response = SendMMCCmd(READ_OCR, 0x0);
 800561a:	2200      	movs	r2, #0
 800561c:	2110      	movs	r1, #16
 800561e:	a801      	add	r0, sp, #4
 8005620:	f7ff ff0c 	bl	800543c <SendMMCCmd>
		if(((response.r7.bytewise._returnVal & 0xC0000000) == 0xC0000000) && (response.r7.bytewise._byte == 0))
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800562a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800562e:	4b55      	ldr	r3, [pc, #340]	; (8005784 <MDD_SDSPI_MediaInitialize+0x1f8>)
 8005630:	d163      	bne.n	80056fa <MDD_SDSPI_MediaInitialize+0x16e>
 8005632:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005636:	2a00      	cmp	r2, #0
 8005638:	d15f      	bne.n	80056fa <MDD_SDSPI_MediaInitialize+0x16e>
			gSDMode = SD_MODE_HC;
 800563a:	2201      	movs	r2, #1
			gSDMode = SD_MODE_NORMAL;
 800563c:	701a      	strb	r2, [r3, #0]
	if(timeout == 0)
 800563e:	2d00      	cmp	r5, #0
 8005640:	d06f      	beq.n	8005722 <MDD_SDSPI_MediaInitialize+0x196>
		HAL_Delay(2);
 8005642:	2002      	movs	r0, #2
		SD_DeSelect();
 8005644:	f640 76ff 	movw	r6, #4095	; 0xfff
		HAL_Delay(2);
 8005648:	f7fb f888 	bl	800075c <HAL_Delay>
		MX_SPI5_FreqSwitch(MAX_SPEED);
 800564c:	2001      	movs	r0, #1
 800564e:	f7ff ff7d 	bl	800554c <MX_SPI5_FreqSwitch>
		SD_DeSelect();
 8005652:	f7ff feab 	bl	80053ac <SD_DeSelect>
			response = SendMMCCmd(SEND_CSD, 0x00);
 8005656:	2200      	movs	r2, #0
 8005658:	2103      	movs	r1, #3
 800565a:	a801      	add	r0, sp, #4
 800565c:	f7ff feee 	bl	800543c <SendMMCCmd>
		}while((response.r1._byte != 0x00) && (timeout != 0));
 8005660:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8005664:	2d00      	cmp	r5, #0
 8005666:	d067      	beq.n	8005738 <MDD_SDSPI_MediaInitialize+0x1ac>
 8005668:	1e75      	subs	r5, r6, #1
 800566a:	b2ae      	uxth	r6, r5
 800566c:	2e00      	cmp	r6, #0
 800566e:	d1f2      	bne.n	8005656 <MDD_SDSPI_MediaInitialize+0xca>
 8005670:	4635      	mov	r5, r6
			printf("[%i]\n", CSDResponse[index]);
 8005672:	4f45      	ldr	r7, [pc, #276]	; (8005788 <MDD_SDSPI_MediaInitialize+0x1fc>)
			CSDResponse[index] = SPI_ReadByte();
 8005674:	20ff      	movs	r0, #255	; 0xff
 8005676:	f7ff fea1 	bl	80053bc <SPI_WriteByte>
 800567a:	ab08      	add	r3, sp, #32
 800567c:	4601      	mov	r1, r0
 800567e:	442b      	add	r3, r5
			index++;
 8005680:	3501      	adds	r5, #1
			CSDResponse[index] = SPI_ReadByte();
 8005682:	f803 0c14 	strb.w	r0, [r3, #-20]
			printf("[%i]\n", CSDResponse[index]);
 8005686:	4638      	mov	r0, r7
 8005688:	f000 f8e0 	bl	800584c <iprintf>
			if((i == 0) && (CSDResponse[0] == DATA_START_TOKEN))
 800568c:	b926      	cbnz	r6, 8005698 <MDD_SDSPI_MediaInitialize+0x10c>
 800568e:	f89d 300c 	ldrb.w	r3, [sp, #12]
				index = 0;
 8005692:	2bfe      	cmp	r3, #254	; 0xfe
 8005694:	bf08      	it	eq
 8005696:	2500      	moveq	r5, #0
		for(i = 0; i < 20; i++)
 8005698:	3601      	adds	r6, #1
 800569a:	2e14      	cmp	r6, #20
 800569c:	d1ea      	bne.n	8005674 <MDD_SDSPI_MediaInitialize+0xe8>
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 800569e:	4b38      	ldr	r3, [pc, #224]	; (8005780 <MDD_SDSPI_MediaInitialize+0x1f4>)
		gMediaSectorSize = 512u;
 80056a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056a4:	4d39      	ldr	r5, [pc, #228]	; (800578c <MDD_SDSPI_MediaInitialize+0x200>)
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 80056a6:	785a      	ldrb	r2, [r3, #1]
		mediaInformation.sectorSize = gMediaSectorSize;
 80056a8:	8059      	strh	r1, [r3, #2]
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 80056aa:	f042 0201 	orr.w	r2, r2, #1
		gMediaSectorSize = 512u;
 80056ae:	8029      	strh	r1, [r5, #0]
 80056b0:	f89d 1015 	ldrb.w	r1, [sp, #21]
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 80056b4:	705a      	strb	r2, [r3, #1]
		if(CSDResponse[0] & 0xC0)	//Check CSD_STRUCTURE field for v2+ struct device
 80056b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80056ba:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80056be:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 80056c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80056c6:	d039      	beq.n	800573c <MDD_SDSPI_MediaInitialize+0x1b0>
			c_size = (((DWORD)CSDResponse[7] & 0x3F) << 16) | ((WORD)CSDResponse[8] << 8) | CSDResponse[9];
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80056ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056d2:	430b      	orrs	r3, r1
			MDD_SDSPI_finalLBA = ((DWORD)(c_size + 1) * (WORD)(1024u)) - 1; //-1 on end is correction factor, since LBA = 0 is valid.
 80056d4:	029b      	lsls	r3, r3, #10
 80056d6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80056da:	6023      	str	r3, [r4, #0]
		printf("%i\n", MDD_SDSPI_finalLBA);
 80056dc:	6821      	ldr	r1, [r4, #0]
 80056de:	482c      	ldr	r0, [pc, #176]	; (8005790 <MDD_SDSPI_MediaInitialize+0x204>)
 80056e0:	f000 f8b4 	bl	800584c <iprintf>
		response = SendMMCCmd(CRC_ON_OFF, 0x0);
 80056e4:	a801      	add	r0, sp, #4
 80056e6:	2200      	movs	r2, #0
 80056e8:	2111      	movs	r1, #17
 80056ea:	f7ff fea7 	bl	800543c <SendMMCCmd>
		response = SendMMCCmd(SET_BLOCKLEN, gMediaSectorSize);
 80056ee:	882a      	ldrh	r2, [r5, #0]
 80056f0:	2107      	movs	r1, #7
 80056f2:	a801      	add	r0, sp, #4
 80056f4:	f7ff fea2 	bl	800543c <SendMMCCmd>
 80056f8:	e018      	b.n	800572c <MDD_SDSPI_MediaInitialize+0x1a0>
			gSDMode = SD_MODE_NORMAL;
 80056fa:	2200      	movs	r2, #0
 80056fc:	e79e      	b.n	800563c <MDD_SDSPI_MediaInitialize+0xb0>
		gSDMode = SD_MODE_NORMAL;
 80056fe:	2200      	movs	r2, #0
 8005700:	4b20      	ldr	r3, [pc, #128]	; (8005784 <MDD_SDSPI_MediaInitialize+0x1f8>)
		timeout = 0xFFF;
 8005702:	f640 75ff 	movw	r5, #4095	; 0xfff
		gSDMode = SD_MODE_NORMAL;
 8005706:	701a      	strb	r2, [r3, #0]
			response = SendMMCCmd(SEND_OP_COND, 0x0);
 8005708:	2200      	movs	r2, #0
 800570a:	2101      	movs	r1, #1
 800570c:	a801      	add	r0, sp, #4
			timeout--;
 800570e:	3d01      	subs	r5, #1
			response = SendMMCCmd(SEND_OP_COND, 0x0);
 8005710:	f7ff fe94 	bl	800543c <SendMMCCmd>
		}while(response.r1._byte != 0x00 && timeout != 0);
 8005714:	f89d 3004 	ldrb.w	r3, [sp, #4]
			timeout--;
 8005718:	b2ad      	uxth	r5, r5
		}while(response.r1._byte != 0x00 && timeout != 0);
 800571a:	2b00      	cmp	r3, #0
 800571c:	d08f      	beq.n	800563e <MDD_SDSPI_MediaInitialize+0xb2>
 800571e:	2d00      	cmp	r5, #0
 8005720:	d1f2      	bne.n	8005708 <MDD_SDSPI_MediaInitialize+0x17c>
		mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 8005722:	2202      	movs	r2, #2
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <MDD_SDSPI_MediaInitialize+0x1f4>)
 8005726:	701a      	strb	r2, [r3, #0]
		SD_DeSelect();
 8005728:	f7ff fe40 	bl	80053ac <SD_DeSelect>
	SPI_WriteByte(0xFF);
 800572c:	20ff      	movs	r0, #255	; 0xff
 800572e:	f7ff fe45 	bl	80053bc <SPI_WriteByte>
	SD_DeSelect();
 8005732:	f7ff fe3b 	bl	80053ac <SD_DeSelect>
    return &mediaInformation;
 8005736:	e74c      	b.n	80055d2 <MDD_SDSPI_MediaInitialize+0x46>
 8005738:	462e      	mov	r6, r5
 800573a:	e79a      	b.n	8005672 <MDD_SDSPI_MediaInitialize+0xe6>
			c_size = ((DWORD)CSDResponse[6] << 16) | ((WORD)CSDResponse[7] << 8) | CSDResponse[8];	//Get the bytes in the correct positions
 800573c:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8005740:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005744:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			block_len = CSDResponse[5] & 0x0F;
 8005748:	f89d 2011 	ldrb.w	r2, [sp, #17]
			block_len = 1 << (block_len - 9); //-9 because we report the size in sectors of 512 bytes each
 800574c:	f002 020f 	and.w	r2, r2, #15
			c_size = c_size >> 6;	//Shift value down, so the 12-bit C_SIZE is properly right justified in the DWORD.
 8005750:	f3c3 138b 	ubfx	r3, r3, #6, #12
			block_len = 1 << (block_len - 9); //-9 because we report the size in sectors of 512 bytes each
 8005754:	f1a2 0009 	sub.w	r0, r2, #9
 8005758:	2201      	movs	r2, #1
 800575a:	4082      	lsls	r2, r0
			MDD_SDSPI_finalLBA = ((DWORD)(c_size + 1) * (WORD)((WORD)1 << (c_size_mult + 2)) * block_len) - 1;	//-1 on end is correction factor, since LBA = 0 is valid.
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	fb03 2202 	mla	r2, r3, r2, r2
			c_size_mult = ((WORD)((CSDResponse[9] & 0x03) << 1)) | ((WORD)((CSDResponse[10] & 0x80) >> 7));
 8005762:	004b      	lsls	r3, r1, #1
 8005764:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8005768:	f003 0306 	and.w	r3, r3, #6
			MDD_SDSPI_finalLBA = ((DWORD)(c_size + 1) * (WORD)((WORD)1 << (c_size_mult + 2)) * block_len) - 1;	//-1 on end is correction factor, since LBA = 0 is valid.
 800576c:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8005770:	3302      	adds	r3, #2
 8005772:	409a      	lsls	r2, r3
 8005774:	3a01      	subs	r2, #1
 8005776:	6022      	str	r2, [r4, #0]
 8005778:	e7b0      	b.n	80056dc <MDD_SDSPI_MediaInitialize+0x150>
 800577a:	bf00      	nop
 800577c:	20000094 	.word	0x20000094
 8005780:	2000009c 	.word	0x2000009c
 8005784:	2000009a 	.word	0x2000009a
 8005788:	08006999 	.word	0x08006999
 800578c:	20000098 	.word	0x20000098
 8005790:	08006985 	.word	0x08006985

08005794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800579a:	e003      	b.n	80057a4 <LoopCopyDataInit>

0800579c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800579e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057a2:	3104      	adds	r1, #4

080057a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057a4:	480b      	ldr	r0, [pc, #44]	; (80057d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057a6:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057ac:	d3f6      	bcc.n	800579c <CopyDataInit>
  ldr  r2, =_sbss
 80057ae:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057b0:	e002      	b.n	80057b8 <LoopFillZerobss>

080057b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057b4:	f842 3b04 	str.w	r3, [r2], #4

080057b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80057ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057bc:	d3f9      	bcc.n	80057b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057be:	f7ff fdb1 	bl	8005324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057c2:	f000 f817 	bl	80057f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057c6:	f7ff fb39 	bl	8004e3c <main>
  bx  lr    
 80057ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80057d0:	08006aa0 	.word	0x08006aa0
  ldr  r0, =_sdata
 80057d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80057d8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80057dc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80057e0:	200005d4 	.word	0x200005d4

080057e4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057e4:	e7fe      	b.n	80057e4 <ADC3_IRQHandler>
	...

080057e8 <__errno>:
 80057e8:	4b01      	ldr	r3, [pc, #4]	; (80057f0 <__errno+0x8>)
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000010 	.word	0x20000010

080057f4 <__libc_init_array>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	4e0d      	ldr	r6, [pc, #52]	; (800582c <__libc_init_array+0x38>)
 80057f8:	4c0d      	ldr	r4, [pc, #52]	; (8005830 <__libc_init_array+0x3c>)
 80057fa:	1ba4      	subs	r4, r4, r6
 80057fc:	10a4      	asrs	r4, r4, #2
 80057fe:	2500      	movs	r5, #0
 8005800:	42a5      	cmp	r5, r4
 8005802:	d109      	bne.n	8005818 <__libc_init_array+0x24>
 8005804:	4e0b      	ldr	r6, [pc, #44]	; (8005834 <__libc_init_array+0x40>)
 8005806:	4c0c      	ldr	r4, [pc, #48]	; (8005838 <__libc_init_array+0x44>)
 8005808:	f000 ff7c 	bl	8006704 <_init>
 800580c:	1ba4      	subs	r4, r4, r6
 800580e:	10a4      	asrs	r4, r4, #2
 8005810:	2500      	movs	r5, #0
 8005812:	42a5      	cmp	r5, r4
 8005814:	d105      	bne.n	8005822 <__libc_init_array+0x2e>
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800581c:	4798      	blx	r3
 800581e:	3501      	adds	r5, #1
 8005820:	e7ee      	b.n	8005800 <__libc_init_array+0xc>
 8005822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005826:	4798      	blx	r3
 8005828:	3501      	adds	r5, #1
 800582a:	e7f2      	b.n	8005812 <__libc_init_array+0x1e>
 800582c:	08006a98 	.word	0x08006a98
 8005830:	08006a98 	.word	0x08006a98
 8005834:	08006a98 	.word	0x08006a98
 8005838:	08006a9c 	.word	0x08006a9c

0800583c <memset>:
 800583c:	4402      	add	r2, r0
 800583e:	4603      	mov	r3, r0
 8005840:	4293      	cmp	r3, r2
 8005842:	d100      	bne.n	8005846 <memset+0xa>
 8005844:	4770      	bx	lr
 8005846:	f803 1b01 	strb.w	r1, [r3], #1
 800584a:	e7f9      	b.n	8005840 <memset+0x4>

0800584c <iprintf>:
 800584c:	b40f      	push	{r0, r1, r2, r3}
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <iprintf+0x2c>)
 8005850:	b513      	push	{r0, r1, r4, lr}
 8005852:	681c      	ldr	r4, [r3, #0]
 8005854:	b124      	cbz	r4, 8005860 <iprintf+0x14>
 8005856:	69a3      	ldr	r3, [r4, #24]
 8005858:	b913      	cbnz	r3, 8005860 <iprintf+0x14>
 800585a:	4620      	mov	r0, r4
 800585c:	f000 fa24 	bl	8005ca8 <__sinit>
 8005860:	ab05      	add	r3, sp, #20
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	68a1      	ldr	r1, [r4, #8]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fbe1 	bl	8006030 <_vfiprintf_r>
 800586e:	b002      	add	sp, #8
 8005870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005874:	b004      	add	sp, #16
 8005876:	4770      	bx	lr
 8005878:	20000010 	.word	0x20000010

0800587c <_puts_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	460e      	mov	r6, r1
 8005880:	4605      	mov	r5, r0
 8005882:	b118      	cbz	r0, 800588c <_puts_r+0x10>
 8005884:	6983      	ldr	r3, [r0, #24]
 8005886:	b90b      	cbnz	r3, 800588c <_puts_r+0x10>
 8005888:	f000 fa0e 	bl	8005ca8 <__sinit>
 800588c:	69ab      	ldr	r3, [r5, #24]
 800588e:	68ac      	ldr	r4, [r5, #8]
 8005890:	b913      	cbnz	r3, 8005898 <_puts_r+0x1c>
 8005892:	4628      	mov	r0, r5
 8005894:	f000 fa08 	bl	8005ca8 <__sinit>
 8005898:	4b23      	ldr	r3, [pc, #140]	; (8005928 <_puts_r+0xac>)
 800589a:	429c      	cmp	r4, r3
 800589c:	d117      	bne.n	80058ce <_puts_r+0x52>
 800589e:	686c      	ldr	r4, [r5, #4]
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	071b      	lsls	r3, r3, #28
 80058a4:	d51d      	bpl.n	80058e2 <_puts_r+0x66>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	b1db      	cbz	r3, 80058e2 <_puts_r+0x66>
 80058aa:	3e01      	subs	r6, #1
 80058ac:	68a3      	ldr	r3, [r4, #8]
 80058ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058b2:	3b01      	subs	r3, #1
 80058b4:	60a3      	str	r3, [r4, #8]
 80058b6:	b9e9      	cbnz	r1, 80058f4 <_puts_r+0x78>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da2e      	bge.n	800591a <_puts_r+0x9e>
 80058bc:	4622      	mov	r2, r4
 80058be:	210a      	movs	r1, #10
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 f83f 	bl	8005944 <__swbuf_r>
 80058c6:	3001      	adds	r0, #1
 80058c8:	d011      	beq.n	80058ee <_puts_r+0x72>
 80058ca:	200a      	movs	r0, #10
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <_puts_r+0xb0>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	d101      	bne.n	80058d8 <_puts_r+0x5c>
 80058d4:	68ac      	ldr	r4, [r5, #8]
 80058d6:	e7e3      	b.n	80058a0 <_puts_r+0x24>
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <_puts_r+0xb4>)
 80058da:	429c      	cmp	r4, r3
 80058dc:	bf08      	it	eq
 80058de:	68ec      	ldreq	r4, [r5, #12]
 80058e0:	e7de      	b.n	80058a0 <_puts_r+0x24>
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f87f 	bl	80059e8 <__swsetup_r>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d0dd      	beq.n	80058aa <_puts_r+0x2e>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da04      	bge.n	8005902 <_puts_r+0x86>
 80058f8:	69a2      	ldr	r2, [r4, #24]
 80058fa:	4293      	cmp	r3, r2
 80058fc:	db06      	blt.n	800590c <_puts_r+0x90>
 80058fe:	290a      	cmp	r1, #10
 8005900:	d004      	beq.n	800590c <_puts_r+0x90>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	7019      	strb	r1, [r3, #0]
 800590a:	e7cf      	b.n	80058ac <_puts_r+0x30>
 800590c:	4622      	mov	r2, r4
 800590e:	4628      	mov	r0, r5
 8005910:	f000 f818 	bl	8005944 <__swbuf_r>
 8005914:	3001      	adds	r0, #1
 8005916:	d1c9      	bne.n	80058ac <_puts_r+0x30>
 8005918:	e7e9      	b.n	80058ee <_puts_r+0x72>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	200a      	movs	r0, #10
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	6022      	str	r2, [r4, #0]
 8005922:	7018      	strb	r0, [r3, #0]
 8005924:	bd70      	pop	{r4, r5, r6, pc}
 8005926:	bf00      	nop
 8005928:	08006a1c 	.word	0x08006a1c
 800592c:	08006a3c 	.word	0x08006a3c
 8005930:	080069fc 	.word	0x080069fc

08005934 <puts>:
 8005934:	4b02      	ldr	r3, [pc, #8]	; (8005940 <puts+0xc>)
 8005936:	4601      	mov	r1, r0
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	f7ff bf9f 	b.w	800587c <_puts_r>
 800593e:	bf00      	nop
 8005940:	20000010 	.word	0x20000010

08005944 <__swbuf_r>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	460e      	mov	r6, r1
 8005948:	4614      	mov	r4, r2
 800594a:	4605      	mov	r5, r0
 800594c:	b118      	cbz	r0, 8005956 <__swbuf_r+0x12>
 800594e:	6983      	ldr	r3, [r0, #24]
 8005950:	b90b      	cbnz	r3, 8005956 <__swbuf_r+0x12>
 8005952:	f000 f9a9 	bl	8005ca8 <__sinit>
 8005956:	4b21      	ldr	r3, [pc, #132]	; (80059dc <__swbuf_r+0x98>)
 8005958:	429c      	cmp	r4, r3
 800595a:	d12a      	bne.n	80059b2 <__swbuf_r+0x6e>
 800595c:	686c      	ldr	r4, [r5, #4]
 800595e:	69a3      	ldr	r3, [r4, #24]
 8005960:	60a3      	str	r3, [r4, #8]
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	071a      	lsls	r2, r3, #28
 8005966:	d52e      	bpl.n	80059c6 <__swbuf_r+0x82>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	b363      	cbz	r3, 80059c6 <__swbuf_r+0x82>
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	1ac0      	subs	r0, r0, r3
 8005972:	6963      	ldr	r3, [r4, #20]
 8005974:	b2f6      	uxtb	r6, r6
 8005976:	4298      	cmp	r0, r3
 8005978:	4637      	mov	r7, r6
 800597a:	db04      	blt.n	8005986 <__swbuf_r+0x42>
 800597c:	4621      	mov	r1, r4
 800597e:	4628      	mov	r0, r5
 8005980:	f000 f928 	bl	8005bd4 <_fflush_r>
 8005984:	bb28      	cbnz	r0, 80059d2 <__swbuf_r+0x8e>
 8005986:	68a3      	ldr	r3, [r4, #8]
 8005988:	3b01      	subs	r3, #1
 800598a:	60a3      	str	r3, [r4, #8]
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	701e      	strb	r6, [r3, #0]
 8005994:	6963      	ldr	r3, [r4, #20]
 8005996:	3001      	adds	r0, #1
 8005998:	4298      	cmp	r0, r3
 800599a:	d004      	beq.n	80059a6 <__swbuf_r+0x62>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	07db      	lsls	r3, r3, #31
 80059a0:	d519      	bpl.n	80059d6 <__swbuf_r+0x92>
 80059a2:	2e0a      	cmp	r6, #10
 80059a4:	d117      	bne.n	80059d6 <__swbuf_r+0x92>
 80059a6:	4621      	mov	r1, r4
 80059a8:	4628      	mov	r0, r5
 80059aa:	f000 f913 	bl	8005bd4 <_fflush_r>
 80059ae:	b190      	cbz	r0, 80059d6 <__swbuf_r+0x92>
 80059b0:	e00f      	b.n	80059d2 <__swbuf_r+0x8e>
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <__swbuf_r+0x9c>)
 80059b4:	429c      	cmp	r4, r3
 80059b6:	d101      	bne.n	80059bc <__swbuf_r+0x78>
 80059b8:	68ac      	ldr	r4, [r5, #8]
 80059ba:	e7d0      	b.n	800595e <__swbuf_r+0x1a>
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <__swbuf_r+0xa0>)
 80059be:	429c      	cmp	r4, r3
 80059c0:	bf08      	it	eq
 80059c2:	68ec      	ldreq	r4, [r5, #12]
 80059c4:	e7cb      	b.n	800595e <__swbuf_r+0x1a>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 f80d 	bl	80059e8 <__swsetup_r>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d0cc      	beq.n	800596c <__swbuf_r+0x28>
 80059d2:	f04f 37ff 	mov.w	r7, #4294967295
 80059d6:	4638      	mov	r0, r7
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059da:	bf00      	nop
 80059dc:	08006a1c 	.word	0x08006a1c
 80059e0:	08006a3c 	.word	0x08006a3c
 80059e4:	080069fc 	.word	0x080069fc

080059e8 <__swsetup_r>:
 80059e8:	4b32      	ldr	r3, [pc, #200]	; (8005ab4 <__swsetup_r+0xcc>)
 80059ea:	b570      	push	{r4, r5, r6, lr}
 80059ec:	681d      	ldr	r5, [r3, #0]
 80059ee:	4606      	mov	r6, r0
 80059f0:	460c      	mov	r4, r1
 80059f2:	b125      	cbz	r5, 80059fe <__swsetup_r+0x16>
 80059f4:	69ab      	ldr	r3, [r5, #24]
 80059f6:	b913      	cbnz	r3, 80059fe <__swsetup_r+0x16>
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 f955 	bl	8005ca8 <__sinit>
 80059fe:	4b2e      	ldr	r3, [pc, #184]	; (8005ab8 <__swsetup_r+0xd0>)
 8005a00:	429c      	cmp	r4, r3
 8005a02:	d10f      	bne.n	8005a24 <__swsetup_r+0x3c>
 8005a04:	686c      	ldr	r4, [r5, #4]
 8005a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	0715      	lsls	r5, r2, #28
 8005a0e:	d42c      	bmi.n	8005a6a <__swsetup_r+0x82>
 8005a10:	06d0      	lsls	r0, r2, #27
 8005a12:	d411      	bmi.n	8005a38 <__swsetup_r+0x50>
 8005a14:	2209      	movs	r2, #9
 8005a16:	6032      	str	r2, [r6, #0]
 8005a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a1c:	81a3      	strh	r3, [r4, #12]
 8005a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <__swsetup_r+0xd4>)
 8005a26:	429c      	cmp	r4, r3
 8005a28:	d101      	bne.n	8005a2e <__swsetup_r+0x46>
 8005a2a:	68ac      	ldr	r4, [r5, #8]
 8005a2c:	e7eb      	b.n	8005a06 <__swsetup_r+0x1e>
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <__swsetup_r+0xd8>)
 8005a30:	429c      	cmp	r4, r3
 8005a32:	bf08      	it	eq
 8005a34:	68ec      	ldreq	r4, [r5, #12]
 8005a36:	e7e6      	b.n	8005a06 <__swsetup_r+0x1e>
 8005a38:	0751      	lsls	r1, r2, #29
 8005a3a:	d512      	bpl.n	8005a62 <__swsetup_r+0x7a>
 8005a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a3e:	b141      	cbz	r1, 8005a52 <__swsetup_r+0x6a>
 8005a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a44:	4299      	cmp	r1, r3
 8005a46:	d002      	beq.n	8005a4e <__swsetup_r+0x66>
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 fa1b 	bl	8005e84 <_free_r>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6363      	str	r3, [r4, #52]	; 0x34
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	81a3      	strh	r3, [r4, #12]
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	b94b      	cbnz	r3, 8005a82 <__swsetup_r+0x9a>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a78:	d003      	beq.n	8005a82 <__swsetup_r+0x9a>
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f000 f9c1 	bl	8005e04 <__smakebuf_r>
 8005a82:	89a2      	ldrh	r2, [r4, #12]
 8005a84:	f012 0301 	ands.w	r3, r2, #1
 8005a88:	d00c      	beq.n	8005aa4 <__swsetup_r+0xbc>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60a3      	str	r3, [r4, #8]
 8005a8e:	6963      	ldr	r3, [r4, #20]
 8005a90:	425b      	negs	r3, r3
 8005a92:	61a3      	str	r3, [r4, #24]
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	b953      	cbnz	r3, 8005aae <__swsetup_r+0xc6>
 8005a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005aa0:	d1ba      	bne.n	8005a18 <__swsetup_r+0x30>
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	0792      	lsls	r2, r2, #30
 8005aa6:	bf58      	it	pl
 8005aa8:	6963      	ldrpl	r3, [r4, #20]
 8005aaa:	60a3      	str	r3, [r4, #8]
 8005aac:	e7f2      	b.n	8005a94 <__swsetup_r+0xac>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e7f7      	b.n	8005aa2 <__swsetup_r+0xba>
 8005ab2:	bf00      	nop
 8005ab4:	20000010 	.word	0x20000010
 8005ab8:	08006a1c 	.word	0x08006a1c
 8005abc:	08006a3c 	.word	0x08006a3c
 8005ac0:	080069fc 	.word	0x080069fc

08005ac4 <__sflush_r>:
 8005ac4:	898a      	ldrh	r2, [r1, #12]
 8005ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	4605      	mov	r5, r0
 8005acc:	0710      	lsls	r0, r2, #28
 8005ace:	460c      	mov	r4, r1
 8005ad0:	d45a      	bmi.n	8005b88 <__sflush_r+0xc4>
 8005ad2:	684b      	ldr	r3, [r1, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dc05      	bgt.n	8005ae4 <__sflush_r+0x20>
 8005ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dc02      	bgt.n	8005ae4 <__sflush_r+0x20>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	d0f9      	beq.n	8005ade <__sflush_r+0x1a>
 8005aea:	2300      	movs	r3, #0
 8005aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005af0:	682f      	ldr	r7, [r5, #0]
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	d033      	beq.n	8005b5e <__sflush_r+0x9a>
 8005af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	075a      	lsls	r2, r3, #29
 8005afc:	d505      	bpl.n	8005b0a <__sflush_r+0x46>
 8005afe:	6863      	ldr	r3, [r4, #4]
 8005b00:	1ac0      	subs	r0, r0, r3
 8005b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b04:	b10b      	cbz	r3, 8005b0a <__sflush_r+0x46>
 8005b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b08:	1ac0      	subs	r0, r0, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b10:	6a21      	ldr	r1, [r4, #32]
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b0      	blx	r6
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	d106      	bne.n	8005b2a <__sflush_r+0x66>
 8005b1c:	6829      	ldr	r1, [r5, #0]
 8005b1e:	291d      	cmp	r1, #29
 8005b20:	d84b      	bhi.n	8005bba <__sflush_r+0xf6>
 8005b22:	4a2b      	ldr	r2, [pc, #172]	; (8005bd0 <__sflush_r+0x10c>)
 8005b24:	40ca      	lsrs	r2, r1
 8005b26:	07d6      	lsls	r6, r2, #31
 8005b28:	d547      	bpl.n	8005bba <__sflush_r+0xf6>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	6062      	str	r2, [r4, #4]
 8005b2e:	04d9      	lsls	r1, r3, #19
 8005b30:	6922      	ldr	r2, [r4, #16]
 8005b32:	6022      	str	r2, [r4, #0]
 8005b34:	d504      	bpl.n	8005b40 <__sflush_r+0x7c>
 8005b36:	1c42      	adds	r2, r0, #1
 8005b38:	d101      	bne.n	8005b3e <__sflush_r+0x7a>
 8005b3a:	682b      	ldr	r3, [r5, #0]
 8005b3c:	b903      	cbnz	r3, 8005b40 <__sflush_r+0x7c>
 8005b3e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b42:	602f      	str	r7, [r5, #0]
 8005b44:	2900      	cmp	r1, #0
 8005b46:	d0ca      	beq.n	8005ade <__sflush_r+0x1a>
 8005b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b4c:	4299      	cmp	r1, r3
 8005b4e:	d002      	beq.n	8005b56 <__sflush_r+0x92>
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f997 	bl	8005e84 <_free_r>
 8005b56:	2000      	movs	r0, #0
 8005b58:	6360      	str	r0, [r4, #52]	; 0x34
 8005b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b5e:	6a21      	ldr	r1, [r4, #32]
 8005b60:	2301      	movs	r3, #1
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b0      	blx	r6
 8005b66:	1c41      	adds	r1, r0, #1
 8005b68:	d1c6      	bne.n	8005af8 <__sflush_r+0x34>
 8005b6a:	682b      	ldr	r3, [r5, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0c3      	beq.n	8005af8 <__sflush_r+0x34>
 8005b70:	2b1d      	cmp	r3, #29
 8005b72:	d001      	beq.n	8005b78 <__sflush_r+0xb4>
 8005b74:	2b16      	cmp	r3, #22
 8005b76:	d101      	bne.n	8005b7c <__sflush_r+0xb8>
 8005b78:	602f      	str	r7, [r5, #0]
 8005b7a:	e7b0      	b.n	8005ade <__sflush_r+0x1a>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b88:	690f      	ldr	r7, [r1, #16]
 8005b8a:	2f00      	cmp	r7, #0
 8005b8c:	d0a7      	beq.n	8005ade <__sflush_r+0x1a>
 8005b8e:	0793      	lsls	r3, r2, #30
 8005b90:	680e      	ldr	r6, [r1, #0]
 8005b92:	bf08      	it	eq
 8005b94:	694b      	ldreq	r3, [r1, #20]
 8005b96:	600f      	str	r7, [r1, #0]
 8005b98:	bf18      	it	ne
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	eba6 0807 	sub.w	r8, r6, r7
 8005ba0:	608b      	str	r3, [r1, #8]
 8005ba2:	f1b8 0f00 	cmp.w	r8, #0
 8005ba6:	dd9a      	ble.n	8005ade <__sflush_r+0x1a>
 8005ba8:	4643      	mov	r3, r8
 8005baa:	463a      	mov	r2, r7
 8005bac:	6a21      	ldr	r1, [r4, #32]
 8005bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b0      	blx	r6
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	dc07      	bgt.n	8005bc8 <__sflush_r+0x104>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbe:	81a3      	strh	r3, [r4, #12]
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc8:	4407      	add	r7, r0
 8005bca:	eba8 0800 	sub.w	r8, r8, r0
 8005bce:	e7e8      	b.n	8005ba2 <__sflush_r+0xde>
 8005bd0:	20400001 	.word	0x20400001

08005bd4 <_fflush_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	690b      	ldr	r3, [r1, #16]
 8005bd8:	4605      	mov	r5, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	b1db      	cbz	r3, 8005c16 <_fflush_r+0x42>
 8005bde:	b118      	cbz	r0, 8005be8 <_fflush_r+0x14>
 8005be0:	6983      	ldr	r3, [r0, #24]
 8005be2:	b90b      	cbnz	r3, 8005be8 <_fflush_r+0x14>
 8005be4:	f000 f860 	bl	8005ca8 <__sinit>
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <_fflush_r+0x48>)
 8005bea:	429c      	cmp	r4, r3
 8005bec:	d109      	bne.n	8005c02 <_fflush_r+0x2e>
 8005bee:	686c      	ldr	r4, [r5, #4]
 8005bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf4:	b17b      	cbz	r3, 8005c16 <_fflush_r+0x42>
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfe:	f7ff bf61 	b.w	8005ac4 <__sflush_r>
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <_fflush_r+0x4c>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	d101      	bne.n	8005c0c <_fflush_r+0x38>
 8005c08:	68ac      	ldr	r4, [r5, #8]
 8005c0a:	e7f1      	b.n	8005bf0 <_fflush_r+0x1c>
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <_fflush_r+0x50>)
 8005c0e:	429c      	cmp	r4, r3
 8005c10:	bf08      	it	eq
 8005c12:	68ec      	ldreq	r4, [r5, #12]
 8005c14:	e7ec      	b.n	8005bf0 <_fflush_r+0x1c>
 8005c16:	2000      	movs	r0, #0
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08006a1c 	.word	0x08006a1c
 8005c20:	08006a3c 	.word	0x08006a3c
 8005c24:	080069fc 	.word	0x080069fc

08005c28 <_cleanup_r>:
 8005c28:	4901      	ldr	r1, [pc, #4]	; (8005c30 <_cleanup_r+0x8>)
 8005c2a:	f000 b8a9 	b.w	8005d80 <_fwalk_reent>
 8005c2e:	bf00      	nop
 8005c30:	08005bd5 	.word	0x08005bd5

08005c34 <std.isra.0>:
 8005c34:	2300      	movs	r3, #0
 8005c36:	b510      	push	{r4, lr}
 8005c38:	4604      	mov	r4, r0
 8005c3a:	6003      	str	r3, [r0, #0]
 8005c3c:	6043      	str	r3, [r0, #4]
 8005c3e:	6083      	str	r3, [r0, #8]
 8005c40:	8181      	strh	r1, [r0, #12]
 8005c42:	6643      	str	r3, [r0, #100]	; 0x64
 8005c44:	81c2      	strh	r2, [r0, #14]
 8005c46:	6103      	str	r3, [r0, #16]
 8005c48:	6143      	str	r3, [r0, #20]
 8005c4a:	6183      	str	r3, [r0, #24]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	2208      	movs	r2, #8
 8005c50:	305c      	adds	r0, #92	; 0x5c
 8005c52:	f7ff fdf3 	bl	800583c <memset>
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <std.isra.0+0x38>)
 8005c58:	6263      	str	r3, [r4, #36]	; 0x24
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <std.isra.0+0x3c>)
 8005c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <std.isra.0+0x40>)
 8005c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c62:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <std.isra.0+0x44>)
 8005c64:	6224      	str	r4, [r4, #32]
 8005c66:	6323      	str	r3, [r4, #48]	; 0x30
 8005c68:	bd10      	pop	{r4, pc}
 8005c6a:	bf00      	nop
 8005c6c:	080065a9 	.word	0x080065a9
 8005c70:	080065cb 	.word	0x080065cb
 8005c74:	08006603 	.word	0x08006603
 8005c78:	08006627 	.word	0x08006627

08005c7c <__sfmoreglue>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	1e4a      	subs	r2, r1, #1
 8005c80:	2568      	movs	r5, #104	; 0x68
 8005c82:	4355      	muls	r5, r2
 8005c84:	460e      	mov	r6, r1
 8005c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c8a:	f000 f949 	bl	8005f20 <_malloc_r>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	b140      	cbz	r0, 8005ca4 <__sfmoreglue+0x28>
 8005c92:	2100      	movs	r1, #0
 8005c94:	e880 0042 	stmia.w	r0, {r1, r6}
 8005c98:	300c      	adds	r0, #12
 8005c9a:	60a0      	str	r0, [r4, #8]
 8005c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ca0:	f7ff fdcc 	bl	800583c <memset>
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}

08005ca8 <__sinit>:
 8005ca8:	6983      	ldr	r3, [r0, #24]
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	bb33      	cbnz	r3, 8005cfe <__sinit+0x56>
 8005cb0:	6483      	str	r3, [r0, #72]	; 0x48
 8005cb2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005cb4:	6503      	str	r3, [r0, #80]	; 0x50
 8005cb6:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <__sinit+0x58>)
 8005cb8:	4a12      	ldr	r2, [pc, #72]	; (8005d04 <__sinit+0x5c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6282      	str	r2, [r0, #40]	; 0x28
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	bf04      	itt	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	6183      	streq	r3, [r0, #24]
 8005cc6:	f000 f81f 	bl	8005d08 <__sfp>
 8005cca:	6060      	str	r0, [r4, #4]
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f81b 	bl	8005d08 <__sfp>
 8005cd2:	60a0      	str	r0, [r4, #8]
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 f817 	bl	8005d08 <__sfp>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60e0      	str	r0, [r4, #12]
 8005cde:	2104      	movs	r1, #4
 8005ce0:	6860      	ldr	r0, [r4, #4]
 8005ce2:	f7ff ffa7 	bl	8005c34 <std.isra.0>
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	2109      	movs	r1, #9
 8005cea:	68a0      	ldr	r0, [r4, #8]
 8005cec:	f7ff ffa2 	bl	8005c34 <std.isra.0>
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	2112      	movs	r1, #18
 8005cf4:	68e0      	ldr	r0, [r4, #12]
 8005cf6:	f7ff ff9d 	bl	8005c34 <std.isra.0>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61a3      	str	r3, [r4, #24]
 8005cfe:	bd10      	pop	{r4, pc}
 8005d00:	080069f8 	.word	0x080069f8
 8005d04:	08005c29 	.word	0x08005c29

08005d08 <__sfp>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <__sfp+0x74>)
 8005d0c:	681e      	ldr	r6, [r3, #0]
 8005d0e:	69b3      	ldr	r3, [r6, #24]
 8005d10:	4607      	mov	r7, r0
 8005d12:	b913      	cbnz	r3, 8005d1a <__sfp+0x12>
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff ffc7 	bl	8005ca8 <__sinit>
 8005d1a:	3648      	adds	r6, #72	; 0x48
 8005d1c:	68b4      	ldr	r4, [r6, #8]
 8005d1e:	6873      	ldr	r3, [r6, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	d503      	bpl.n	8005d2c <__sfp+0x24>
 8005d24:	6833      	ldr	r3, [r6, #0]
 8005d26:	b133      	cbz	r3, 8005d36 <__sfp+0x2e>
 8005d28:	6836      	ldr	r6, [r6, #0]
 8005d2a:	e7f7      	b.n	8005d1c <__sfp+0x14>
 8005d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d30:	b16d      	cbz	r5, 8005d4e <__sfp+0x46>
 8005d32:	3468      	adds	r4, #104	; 0x68
 8005d34:	e7f4      	b.n	8005d20 <__sfp+0x18>
 8005d36:	2104      	movs	r1, #4
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff ff9f 	bl	8005c7c <__sfmoreglue>
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d1f1      	bne.n	8005d28 <__sfp+0x20>
 8005d44:	230c      	movs	r3, #12
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d52:	81e3      	strh	r3, [r4, #14]
 8005d54:	2301      	movs	r3, #1
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	6665      	str	r5, [r4, #100]	; 0x64
 8005d5a:	6025      	str	r5, [r4, #0]
 8005d5c:	60a5      	str	r5, [r4, #8]
 8005d5e:	6065      	str	r5, [r4, #4]
 8005d60:	6125      	str	r5, [r4, #16]
 8005d62:	6165      	str	r5, [r4, #20]
 8005d64:	61a5      	str	r5, [r4, #24]
 8005d66:	2208      	movs	r2, #8
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d6e:	f7ff fd65 	bl	800583c <memset>
 8005d72:	6365      	str	r5, [r4, #52]	; 0x34
 8005d74:	63a5      	str	r5, [r4, #56]	; 0x38
 8005d76:	64a5      	str	r5, [r4, #72]	; 0x48
 8005d78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005d7a:	e7e6      	b.n	8005d4a <__sfp+0x42>
 8005d7c:	080069f8 	.word	0x080069f8

08005d80 <_fwalk_reent>:
 8005d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d84:	4680      	mov	r8, r0
 8005d86:	4689      	mov	r9, r1
 8005d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d8c:	2600      	movs	r6, #0
 8005d8e:	b914      	cbnz	r4, 8005d96 <_fwalk_reent+0x16>
 8005d90:	4630      	mov	r0, r6
 8005d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d96:	68a5      	ldr	r5, [r4, #8]
 8005d98:	6867      	ldr	r7, [r4, #4]
 8005d9a:	3f01      	subs	r7, #1
 8005d9c:	d501      	bpl.n	8005da2 <_fwalk_reent+0x22>
 8005d9e:	6824      	ldr	r4, [r4, #0]
 8005da0:	e7f5      	b.n	8005d8e <_fwalk_reent+0xe>
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d907      	bls.n	8005db8 <_fwalk_reent+0x38>
 8005da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dac:	3301      	adds	r3, #1
 8005dae:	d003      	beq.n	8005db8 <_fwalk_reent+0x38>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4640      	mov	r0, r8
 8005db4:	47c8      	blx	r9
 8005db6:	4306      	orrs	r6, r0
 8005db8:	3568      	adds	r5, #104	; 0x68
 8005dba:	e7ee      	b.n	8005d9a <_fwalk_reent+0x1a>

08005dbc <__swhatbuf_r>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	460e      	mov	r6, r1
 8005dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	b090      	sub	sp, #64	; 0x40
 8005dc8:	4614      	mov	r4, r2
 8005dca:	461d      	mov	r5, r3
 8005dcc:	da07      	bge.n	8005dde <__swhatbuf_r+0x22>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	602b      	str	r3, [r5, #0]
 8005dd2:	89b3      	ldrh	r3, [r6, #12]
 8005dd4:	061a      	lsls	r2, r3, #24
 8005dd6:	d410      	bmi.n	8005dfa <__swhatbuf_r+0x3e>
 8005dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ddc:	e00e      	b.n	8005dfc <__swhatbuf_r+0x40>
 8005dde:	aa01      	add	r2, sp, #4
 8005de0:	f000 fc48 	bl	8006674 <_fstat_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	dbf2      	blt.n	8005dce <__swhatbuf_r+0x12>
 8005de8:	9a02      	ldr	r2, [sp, #8]
 8005dea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005df2:	425a      	negs	r2, r3
 8005df4:	415a      	adcs	r2, r3
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	e7ee      	b.n	8005dd8 <__swhatbuf_r+0x1c>
 8005dfa:	2340      	movs	r3, #64	; 0x40
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	b010      	add	sp, #64	; 0x40
 8005e02:	bd70      	pop	{r4, r5, r6, pc}

08005e04 <__smakebuf_r>:
 8005e04:	898b      	ldrh	r3, [r1, #12]
 8005e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e08:	079d      	lsls	r5, r3, #30
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	d507      	bpl.n	8005e20 <__smakebuf_r+0x1c>
 8005e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	6123      	str	r3, [r4, #16]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	6163      	str	r3, [r4, #20]
 8005e1c:	b002      	add	sp, #8
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	ab01      	add	r3, sp, #4
 8005e22:	466a      	mov	r2, sp
 8005e24:	f7ff ffca 	bl	8005dbc <__swhatbuf_r>
 8005e28:	9900      	ldr	r1, [sp, #0]
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f000 f877 	bl	8005f20 <_malloc_r>
 8005e32:	b948      	cbnz	r0, 8005e48 <__smakebuf_r+0x44>
 8005e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e38:	059a      	lsls	r2, r3, #22
 8005e3a:	d4ef      	bmi.n	8005e1c <__smakebuf_r+0x18>
 8005e3c:	f023 0303 	bic.w	r3, r3, #3
 8005e40:	f043 0302 	orr.w	r3, r3, #2
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	e7e3      	b.n	8005e10 <__smakebuf_r+0xc>
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <__smakebuf_r+0x7c>)
 8005e4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	6020      	str	r0, [r4, #0]
 8005e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	9b00      	ldr	r3, [sp, #0]
 8005e58:	6163      	str	r3, [r4, #20]
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	6120      	str	r0, [r4, #16]
 8005e5e:	b15b      	cbz	r3, 8005e78 <__smakebuf_r+0x74>
 8005e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e64:	4630      	mov	r0, r6
 8005e66:	f000 fc17 	bl	8006698 <_isatty_r>
 8005e6a:	b128      	cbz	r0, 8005e78 <__smakebuf_r+0x74>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	f043 0301 	orr.w	r3, r3, #1
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	431d      	orrs	r5, r3
 8005e7c:	81a5      	strh	r5, [r4, #12]
 8005e7e:	e7cd      	b.n	8005e1c <__smakebuf_r+0x18>
 8005e80:	08005c29 	.word	0x08005c29

08005e84 <_free_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4605      	mov	r5, r0
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d045      	beq.n	8005f18 <_free_r+0x94>
 8005e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e90:	1f0c      	subs	r4, r1, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfb8      	it	lt
 8005e96:	18e4      	addlt	r4, r4, r3
 8005e98:	f000 fc20 	bl	80066dc <__malloc_lock>
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <_free_r+0x98>)
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	b933      	cbnz	r3, 8005eb2 <_free_r+0x2e>
 8005ea4:	6063      	str	r3, [r4, #4]
 8005ea6:	6014      	str	r4, [r2, #0]
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eae:	f000 bc16 	b.w	80066de <__malloc_unlock>
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	d90c      	bls.n	8005ed0 <_free_r+0x4c>
 8005eb6:	6821      	ldr	r1, [r4, #0]
 8005eb8:	1862      	adds	r2, r4, r1
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	bf04      	itt	eq
 8005ebe:	681a      	ldreq	r2, [r3, #0]
 8005ec0:	685b      	ldreq	r3, [r3, #4]
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	bf04      	itt	eq
 8005ec6:	1852      	addeq	r2, r2, r1
 8005ec8:	6022      	streq	r2, [r4, #0]
 8005eca:	6004      	str	r4, [r0, #0]
 8005ecc:	e7ec      	b.n	8005ea8 <_free_r+0x24>
 8005ece:	4613      	mov	r3, r2
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	b10a      	cbz	r2, 8005ed8 <_free_r+0x54>
 8005ed4:	42a2      	cmp	r2, r4
 8005ed6:	d9fa      	bls.n	8005ece <_free_r+0x4a>
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	1858      	adds	r0, r3, r1
 8005edc:	42a0      	cmp	r0, r4
 8005ede:	d10b      	bne.n	8005ef8 <_free_r+0x74>
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	1858      	adds	r0, r3, r1
 8005ee6:	4282      	cmp	r2, r0
 8005ee8:	6019      	str	r1, [r3, #0]
 8005eea:	d1dd      	bne.n	8005ea8 <_free_r+0x24>
 8005eec:	6810      	ldr	r0, [r2, #0]
 8005eee:	6852      	ldr	r2, [r2, #4]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	4401      	add	r1, r0
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	e7d7      	b.n	8005ea8 <_free_r+0x24>
 8005ef8:	d902      	bls.n	8005f00 <_free_r+0x7c>
 8005efa:	230c      	movs	r3, #12
 8005efc:	602b      	str	r3, [r5, #0]
 8005efe:	e7d3      	b.n	8005ea8 <_free_r+0x24>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	1821      	adds	r1, r4, r0
 8005f04:	428a      	cmp	r2, r1
 8005f06:	bf04      	itt	eq
 8005f08:	6811      	ldreq	r1, [r2, #0]
 8005f0a:	6852      	ldreq	r2, [r2, #4]
 8005f0c:	6062      	str	r2, [r4, #4]
 8005f0e:	bf04      	itt	eq
 8005f10:	1809      	addeq	r1, r1, r0
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	605c      	str	r4, [r3, #4]
 8005f16:	e7c7      	b.n	8005ea8 <_free_r+0x24>
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200000a4 	.word	0x200000a4

08005f20 <_malloc_r>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	1ccd      	adds	r5, r1, #3
 8005f24:	f025 0503 	bic.w	r5, r5, #3
 8005f28:	3508      	adds	r5, #8
 8005f2a:	2d0c      	cmp	r5, #12
 8005f2c:	bf38      	it	cc
 8005f2e:	250c      	movcc	r5, #12
 8005f30:	2d00      	cmp	r5, #0
 8005f32:	4606      	mov	r6, r0
 8005f34:	db01      	blt.n	8005f3a <_malloc_r+0x1a>
 8005f36:	42a9      	cmp	r1, r5
 8005f38:	d903      	bls.n	8005f42 <_malloc_r+0x22>
 8005f3a:	230c      	movs	r3, #12
 8005f3c:	6033      	str	r3, [r6, #0]
 8005f3e:	2000      	movs	r0, #0
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
 8005f42:	f000 fbcb 	bl	80066dc <__malloc_lock>
 8005f46:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <_malloc_r+0xb4>)
 8005f48:	6814      	ldr	r4, [r2, #0]
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	b991      	cbnz	r1, 8005f74 <_malloc_r+0x54>
 8005f4e:	4c22      	ldr	r4, [pc, #136]	; (8005fd8 <_malloc_r+0xb8>)
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	b91b      	cbnz	r3, 8005f5c <_malloc_r+0x3c>
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 fb17 	bl	8006588 <_sbrk_r>
 8005f5a:	6020      	str	r0, [r4, #0]
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 fb12 	bl	8006588 <_sbrk_r>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d126      	bne.n	8005fb6 <_malloc_r+0x96>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f000 fbb6 	bl	80066de <__malloc_unlock>
 8005f72:	e7e4      	b.n	8005f3e <_malloc_r+0x1e>
 8005f74:	680b      	ldr	r3, [r1, #0]
 8005f76:	1b5b      	subs	r3, r3, r5
 8005f78:	d41a      	bmi.n	8005fb0 <_malloc_r+0x90>
 8005f7a:	2b0b      	cmp	r3, #11
 8005f7c:	d90f      	bls.n	8005f9e <_malloc_r+0x7e>
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	50cd      	str	r5, [r1, r3]
 8005f82:	18cc      	adds	r4, r1, r3
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 fbaa 	bl	80066de <__malloc_unlock>
 8005f8a:	f104 000b 	add.w	r0, r4, #11
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	f020 0007 	bic.w	r0, r0, #7
 8005f94:	1ac3      	subs	r3, r0, r3
 8005f96:	d01b      	beq.n	8005fd0 <_malloc_r+0xb0>
 8005f98:	425a      	negs	r2, r3
 8005f9a:	50e2      	str	r2, [r4, r3]
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	428c      	cmp	r4, r1
 8005fa0:	bf0d      	iteet	eq
 8005fa2:	6863      	ldreq	r3, [r4, #4]
 8005fa4:	684b      	ldrne	r3, [r1, #4]
 8005fa6:	6063      	strne	r3, [r4, #4]
 8005fa8:	6013      	streq	r3, [r2, #0]
 8005faa:	bf18      	it	ne
 8005fac:	460c      	movne	r4, r1
 8005fae:	e7e9      	b.n	8005f84 <_malloc_r+0x64>
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	6849      	ldr	r1, [r1, #4]
 8005fb4:	e7ca      	b.n	8005f4c <_malloc_r+0x2c>
 8005fb6:	1cc4      	adds	r4, r0, #3
 8005fb8:	f024 0403 	bic.w	r4, r4, #3
 8005fbc:	42a0      	cmp	r0, r4
 8005fbe:	d005      	beq.n	8005fcc <_malloc_r+0xac>
 8005fc0:	1a21      	subs	r1, r4, r0
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 fae0 	bl	8006588 <_sbrk_r>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d0cd      	beq.n	8005f68 <_malloc_r+0x48>
 8005fcc:	6025      	str	r5, [r4, #0]
 8005fce:	e7d9      	b.n	8005f84 <_malloc_r+0x64>
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200000a4 	.word	0x200000a4
 8005fd8:	200000a8 	.word	0x200000a8

08005fdc <__sfputc_r>:
 8005fdc:	6893      	ldr	r3, [r2, #8]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	b410      	push	{r4}
 8005fe4:	6093      	str	r3, [r2, #8]
 8005fe6:	da09      	bge.n	8005ffc <__sfputc_r+0x20>
 8005fe8:	6994      	ldr	r4, [r2, #24]
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	db02      	blt.n	8005ff4 <__sfputc_r+0x18>
 8005fee:	b2cb      	uxtb	r3, r1
 8005ff0:	2b0a      	cmp	r3, #10
 8005ff2:	d103      	bne.n	8005ffc <__sfputc_r+0x20>
 8005ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff8:	f7ff bca4 	b.w	8005944 <__swbuf_r>
 8005ffc:	6813      	ldr	r3, [r2, #0]
 8005ffe:	1c58      	adds	r0, r3, #1
 8006000:	6010      	str	r0, [r2, #0]
 8006002:	7019      	strb	r1, [r3, #0]
 8006004:	b2c8      	uxtb	r0, r1
 8006006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800600a:	4770      	bx	lr

0800600c <__sfputs_r>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	4606      	mov	r6, r0
 8006010:	460f      	mov	r7, r1
 8006012:	4614      	mov	r4, r2
 8006014:	18d5      	adds	r5, r2, r3
 8006016:	42ac      	cmp	r4, r5
 8006018:	d101      	bne.n	800601e <__sfputs_r+0x12>
 800601a:	2000      	movs	r0, #0
 800601c:	e007      	b.n	800602e <__sfputs_r+0x22>
 800601e:	463a      	mov	r2, r7
 8006020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff ffd9 	bl	8005fdc <__sfputc_r>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	d1f3      	bne.n	8006016 <__sfputs_r+0xa>
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006030 <_vfiprintf_r>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	b09d      	sub	sp, #116	; 0x74
 8006036:	460c      	mov	r4, r1
 8006038:	4617      	mov	r7, r2
 800603a:	9303      	str	r3, [sp, #12]
 800603c:	4606      	mov	r6, r0
 800603e:	b118      	cbz	r0, 8006048 <_vfiprintf_r+0x18>
 8006040:	6983      	ldr	r3, [r0, #24]
 8006042:	b90b      	cbnz	r3, 8006048 <_vfiprintf_r+0x18>
 8006044:	f7ff fe30 	bl	8005ca8 <__sinit>
 8006048:	4b7c      	ldr	r3, [pc, #496]	; (800623c <_vfiprintf_r+0x20c>)
 800604a:	429c      	cmp	r4, r3
 800604c:	d157      	bne.n	80060fe <_vfiprintf_r+0xce>
 800604e:	6874      	ldr	r4, [r6, #4]
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	0718      	lsls	r0, r3, #28
 8006054:	d55d      	bpl.n	8006112 <_vfiprintf_r+0xe2>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d05a      	beq.n	8006112 <_vfiprintf_r+0xe2>
 800605c:	2300      	movs	r3, #0
 800605e:	9309      	str	r3, [sp, #36]	; 0x24
 8006060:	2320      	movs	r3, #32
 8006062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006066:	2330      	movs	r3, #48	; 0x30
 8006068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800606c:	f04f 0b01 	mov.w	fp, #1
 8006070:	46b8      	mov	r8, r7
 8006072:	4645      	mov	r5, r8
 8006074:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d155      	bne.n	8006128 <_vfiprintf_r+0xf8>
 800607c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006080:	d00b      	beq.n	800609a <_vfiprintf_r+0x6a>
 8006082:	4653      	mov	r3, sl
 8006084:	463a      	mov	r2, r7
 8006086:	4621      	mov	r1, r4
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff ffbf 	bl	800600c <__sfputs_r>
 800608e:	3001      	adds	r0, #1
 8006090:	f000 80c4 	beq.w	800621c <_vfiprintf_r+0x1ec>
 8006094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006096:	4453      	add	r3, sl
 8006098:	9309      	str	r3, [sp, #36]	; 0x24
 800609a:	f898 3000 	ldrb.w	r3, [r8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 80bc 	beq.w	800621c <_vfiprintf_r+0x1ec>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295
 80060aa:	9304      	str	r3, [sp, #16]
 80060ac:	9307      	str	r3, [sp, #28]
 80060ae:	9205      	str	r2, [sp, #20]
 80060b0:	9306      	str	r3, [sp, #24]
 80060b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060b6:	931a      	str	r3, [sp, #104]	; 0x68
 80060b8:	2205      	movs	r2, #5
 80060ba:	7829      	ldrb	r1, [r5, #0]
 80060bc:	4860      	ldr	r0, [pc, #384]	; (8006240 <_vfiprintf_r+0x210>)
 80060be:	f7fa f90f 	bl	80002e0 <memchr>
 80060c2:	f105 0801 	add.w	r8, r5, #1
 80060c6:	9b04      	ldr	r3, [sp, #16]
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d131      	bne.n	8006130 <_vfiprintf_r+0x100>
 80060cc:	06d9      	lsls	r1, r3, #27
 80060ce:	bf44      	itt	mi
 80060d0:	2220      	movmi	r2, #32
 80060d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060d6:	071a      	lsls	r2, r3, #28
 80060d8:	bf44      	itt	mi
 80060da:	222b      	movmi	r2, #43	; 0x2b
 80060dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060e0:	782a      	ldrb	r2, [r5, #0]
 80060e2:	2a2a      	cmp	r2, #42	; 0x2a
 80060e4:	d02c      	beq.n	8006140 <_vfiprintf_r+0x110>
 80060e6:	9a07      	ldr	r2, [sp, #28]
 80060e8:	2100      	movs	r1, #0
 80060ea:	200a      	movs	r0, #10
 80060ec:	46a8      	mov	r8, r5
 80060ee:	3501      	adds	r5, #1
 80060f0:	f898 3000 	ldrb.w	r3, [r8]
 80060f4:	3b30      	subs	r3, #48	; 0x30
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	d96d      	bls.n	80061d6 <_vfiprintf_r+0x1a6>
 80060fa:	b371      	cbz	r1, 800615a <_vfiprintf_r+0x12a>
 80060fc:	e026      	b.n	800614c <_vfiprintf_r+0x11c>
 80060fe:	4b51      	ldr	r3, [pc, #324]	; (8006244 <_vfiprintf_r+0x214>)
 8006100:	429c      	cmp	r4, r3
 8006102:	d101      	bne.n	8006108 <_vfiprintf_r+0xd8>
 8006104:	68b4      	ldr	r4, [r6, #8]
 8006106:	e7a3      	b.n	8006050 <_vfiprintf_r+0x20>
 8006108:	4b4f      	ldr	r3, [pc, #316]	; (8006248 <_vfiprintf_r+0x218>)
 800610a:	429c      	cmp	r4, r3
 800610c:	bf08      	it	eq
 800610e:	68f4      	ldreq	r4, [r6, #12]
 8006110:	e79e      	b.n	8006050 <_vfiprintf_r+0x20>
 8006112:	4621      	mov	r1, r4
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff fc67 	bl	80059e8 <__swsetup_r>
 800611a:	2800      	cmp	r0, #0
 800611c:	d09e      	beq.n	800605c <_vfiprintf_r+0x2c>
 800611e:	f04f 30ff 	mov.w	r0, #4294967295
 8006122:	b01d      	add	sp, #116	; 0x74
 8006124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006128:	2b25      	cmp	r3, #37	; 0x25
 800612a:	d0a7      	beq.n	800607c <_vfiprintf_r+0x4c>
 800612c:	46a8      	mov	r8, r5
 800612e:	e7a0      	b.n	8006072 <_vfiprintf_r+0x42>
 8006130:	4a43      	ldr	r2, [pc, #268]	; (8006240 <_vfiprintf_r+0x210>)
 8006132:	1a80      	subs	r0, r0, r2
 8006134:	fa0b f000 	lsl.w	r0, fp, r0
 8006138:	4318      	orrs	r0, r3
 800613a:	9004      	str	r0, [sp, #16]
 800613c:	4645      	mov	r5, r8
 800613e:	e7bb      	b.n	80060b8 <_vfiprintf_r+0x88>
 8006140:	9a03      	ldr	r2, [sp, #12]
 8006142:	1d11      	adds	r1, r2, #4
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	9103      	str	r1, [sp, #12]
 8006148:	2a00      	cmp	r2, #0
 800614a:	db01      	blt.n	8006150 <_vfiprintf_r+0x120>
 800614c:	9207      	str	r2, [sp, #28]
 800614e:	e004      	b.n	800615a <_vfiprintf_r+0x12a>
 8006150:	4252      	negs	r2, r2
 8006152:	f043 0302 	orr.w	r3, r3, #2
 8006156:	9207      	str	r2, [sp, #28]
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	f898 3000 	ldrb.w	r3, [r8]
 800615e:	2b2e      	cmp	r3, #46	; 0x2e
 8006160:	d110      	bne.n	8006184 <_vfiprintf_r+0x154>
 8006162:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006166:	2b2a      	cmp	r3, #42	; 0x2a
 8006168:	f108 0101 	add.w	r1, r8, #1
 800616c:	d137      	bne.n	80061de <_vfiprintf_r+0x1ae>
 800616e:	9b03      	ldr	r3, [sp, #12]
 8006170:	1d1a      	adds	r2, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	9203      	str	r2, [sp, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfb8      	it	lt
 800617a:	f04f 33ff 	movlt.w	r3, #4294967295
 800617e:	f108 0802 	add.w	r8, r8, #2
 8006182:	9305      	str	r3, [sp, #20]
 8006184:	4d31      	ldr	r5, [pc, #196]	; (800624c <_vfiprintf_r+0x21c>)
 8006186:	f898 1000 	ldrb.w	r1, [r8]
 800618a:	2203      	movs	r2, #3
 800618c:	4628      	mov	r0, r5
 800618e:	f7fa f8a7 	bl	80002e0 <memchr>
 8006192:	b140      	cbz	r0, 80061a6 <_vfiprintf_r+0x176>
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	1b40      	subs	r0, r0, r5
 8006198:	fa03 f000 	lsl.w	r0, r3, r0
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	4303      	orrs	r3, r0
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	f108 0801 	add.w	r8, r8, #1
 80061a6:	f898 1000 	ldrb.w	r1, [r8]
 80061aa:	4829      	ldr	r0, [pc, #164]	; (8006250 <_vfiprintf_r+0x220>)
 80061ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b0:	2206      	movs	r2, #6
 80061b2:	f108 0701 	add.w	r7, r8, #1
 80061b6:	f7fa f893 	bl	80002e0 <memchr>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d034      	beq.n	8006228 <_vfiprintf_r+0x1f8>
 80061be:	4b25      	ldr	r3, [pc, #148]	; (8006254 <_vfiprintf_r+0x224>)
 80061c0:	bb03      	cbnz	r3, 8006204 <_vfiprintf_r+0x1d4>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	3307      	adds	r3, #7
 80061c6:	f023 0307 	bic.w	r3, r3, #7
 80061ca:	3308      	adds	r3, #8
 80061cc:	9303      	str	r3, [sp, #12]
 80061ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d0:	444b      	add	r3, r9
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	e74c      	b.n	8006070 <_vfiprintf_r+0x40>
 80061d6:	fb00 3202 	mla	r2, r0, r2, r3
 80061da:	2101      	movs	r1, #1
 80061dc:	e786      	b.n	80060ec <_vfiprintf_r+0xbc>
 80061de:	2300      	movs	r3, #0
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	4618      	mov	r0, r3
 80061e4:	250a      	movs	r5, #10
 80061e6:	4688      	mov	r8, r1
 80061e8:	3101      	adds	r1, #1
 80061ea:	f898 2000 	ldrb.w	r2, [r8]
 80061ee:	3a30      	subs	r2, #48	; 0x30
 80061f0:	2a09      	cmp	r2, #9
 80061f2:	d903      	bls.n	80061fc <_vfiprintf_r+0x1cc>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0c5      	beq.n	8006184 <_vfiprintf_r+0x154>
 80061f8:	9005      	str	r0, [sp, #20]
 80061fa:	e7c3      	b.n	8006184 <_vfiprintf_r+0x154>
 80061fc:	fb05 2000 	mla	r0, r5, r0, r2
 8006200:	2301      	movs	r3, #1
 8006202:	e7f0      	b.n	80061e6 <_vfiprintf_r+0x1b6>
 8006204:	ab03      	add	r3, sp, #12
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4622      	mov	r2, r4
 800620a:	4b13      	ldr	r3, [pc, #76]	; (8006258 <_vfiprintf_r+0x228>)
 800620c:	a904      	add	r1, sp, #16
 800620e:	4630      	mov	r0, r6
 8006210:	f3af 8000 	nop.w
 8006214:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006218:	4681      	mov	r9, r0
 800621a:	d1d8      	bne.n	80061ce <_vfiprintf_r+0x19e>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	065b      	lsls	r3, r3, #25
 8006220:	f53f af7d 	bmi.w	800611e <_vfiprintf_r+0xee>
 8006224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006226:	e77c      	b.n	8006122 <_vfiprintf_r+0xf2>
 8006228:	ab03      	add	r3, sp, #12
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4622      	mov	r2, r4
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <_vfiprintf_r+0x228>)
 8006230:	a904      	add	r1, sp, #16
 8006232:	4630      	mov	r0, r6
 8006234:	f000 f888 	bl	8006348 <_printf_i>
 8006238:	e7ec      	b.n	8006214 <_vfiprintf_r+0x1e4>
 800623a:	bf00      	nop
 800623c:	08006a1c 	.word	0x08006a1c
 8006240:	08006a5c 	.word	0x08006a5c
 8006244:	08006a3c 	.word	0x08006a3c
 8006248:	080069fc 	.word	0x080069fc
 800624c:	08006a62 	.word	0x08006a62
 8006250:	08006a66 	.word	0x08006a66
 8006254:	00000000 	.word	0x00000000
 8006258:	0800600d 	.word	0x0800600d

0800625c <_printf_common>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	4691      	mov	r9, r2
 8006262:	461f      	mov	r7, r3
 8006264:	688a      	ldr	r2, [r1, #8]
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800626c:	4293      	cmp	r3, r2
 800626e:	bfb8      	it	lt
 8006270:	4613      	movlt	r3, r2
 8006272:	f8c9 3000 	str.w	r3, [r9]
 8006276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800627a:	4606      	mov	r6, r0
 800627c:	460c      	mov	r4, r1
 800627e:	b112      	cbz	r2, 8006286 <_printf_common+0x2a>
 8006280:	3301      	adds	r3, #1
 8006282:	f8c9 3000 	str.w	r3, [r9]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	0699      	lsls	r1, r3, #26
 800628a:	bf42      	ittt	mi
 800628c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006290:	3302      	addmi	r3, #2
 8006292:	f8c9 3000 	strmi.w	r3, [r9]
 8006296:	6825      	ldr	r5, [r4, #0]
 8006298:	f015 0506 	ands.w	r5, r5, #6
 800629c:	d107      	bne.n	80062ae <_printf_common+0x52>
 800629e:	f104 0a19 	add.w	sl, r4, #25
 80062a2:	68e3      	ldr	r3, [r4, #12]
 80062a4:	f8d9 2000 	ldr.w	r2, [r9]
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	429d      	cmp	r5, r3
 80062ac:	db29      	blt.n	8006302 <_printf_common+0xa6>
 80062ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	3300      	adds	r3, #0
 80062b6:	bf18      	it	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	0692      	lsls	r2, r2, #26
 80062bc:	d42e      	bmi.n	800631c <_printf_common+0xc0>
 80062be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c2:	4639      	mov	r1, r7
 80062c4:	4630      	mov	r0, r6
 80062c6:	47c0      	blx	r8
 80062c8:	3001      	adds	r0, #1
 80062ca:	d021      	beq.n	8006310 <_printf_common+0xb4>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	68e5      	ldr	r5, [r4, #12]
 80062d0:	f8d9 2000 	ldr.w	r2, [r9]
 80062d4:	f003 0306 	and.w	r3, r3, #6
 80062d8:	2b04      	cmp	r3, #4
 80062da:	bf08      	it	eq
 80062dc:	1aad      	subeq	r5, r5, r2
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	bf0c      	ite	eq
 80062e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e8:	2500      	movne	r5, #0
 80062ea:	4293      	cmp	r3, r2
 80062ec:	bfc4      	itt	gt
 80062ee:	1a9b      	subgt	r3, r3, r2
 80062f0:	18ed      	addgt	r5, r5, r3
 80062f2:	f04f 0900 	mov.w	r9, #0
 80062f6:	341a      	adds	r4, #26
 80062f8:	454d      	cmp	r5, r9
 80062fa:	d11b      	bne.n	8006334 <_printf_common+0xd8>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006302:	2301      	movs	r3, #1
 8006304:	4652      	mov	r2, sl
 8006306:	4639      	mov	r1, r7
 8006308:	4630      	mov	r0, r6
 800630a:	47c0      	blx	r8
 800630c:	3001      	adds	r0, #1
 800630e:	d103      	bne.n	8006318 <_printf_common+0xbc>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	3501      	adds	r5, #1
 800631a:	e7c2      	b.n	80062a2 <_printf_common+0x46>
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	2030      	movs	r0, #48	; 0x30
 8006322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006326:	4422      	add	r2, r4
 8006328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800632c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006330:	3302      	adds	r3, #2
 8006332:	e7c4      	b.n	80062be <_printf_common+0x62>
 8006334:	2301      	movs	r3, #1
 8006336:	4622      	mov	r2, r4
 8006338:	4639      	mov	r1, r7
 800633a:	4630      	mov	r0, r6
 800633c:	47c0      	blx	r8
 800633e:	3001      	adds	r0, #1
 8006340:	d0e6      	beq.n	8006310 <_printf_common+0xb4>
 8006342:	f109 0901 	add.w	r9, r9, #1
 8006346:	e7d7      	b.n	80062f8 <_printf_common+0x9c>

08006348 <_printf_i>:
 8006348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800634c:	4617      	mov	r7, r2
 800634e:	7e0a      	ldrb	r2, [r1, #24]
 8006350:	b085      	sub	sp, #20
 8006352:	2a6e      	cmp	r2, #110	; 0x6e
 8006354:	4698      	mov	r8, r3
 8006356:	4606      	mov	r6, r0
 8006358:	460c      	mov	r4, r1
 800635a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800635c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006360:	f000 80bc 	beq.w	80064dc <_printf_i+0x194>
 8006364:	d81a      	bhi.n	800639c <_printf_i+0x54>
 8006366:	2a63      	cmp	r2, #99	; 0x63
 8006368:	d02e      	beq.n	80063c8 <_printf_i+0x80>
 800636a:	d80a      	bhi.n	8006382 <_printf_i+0x3a>
 800636c:	2a00      	cmp	r2, #0
 800636e:	f000 80c8 	beq.w	8006502 <_printf_i+0x1ba>
 8006372:	2a58      	cmp	r2, #88	; 0x58
 8006374:	f000 808a 	beq.w	800648c <_printf_i+0x144>
 8006378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800637c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006380:	e02a      	b.n	80063d8 <_printf_i+0x90>
 8006382:	2a64      	cmp	r2, #100	; 0x64
 8006384:	d001      	beq.n	800638a <_printf_i+0x42>
 8006386:	2a69      	cmp	r2, #105	; 0x69
 8006388:	d1f6      	bne.n	8006378 <_printf_i+0x30>
 800638a:	6821      	ldr	r1, [r4, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006392:	d023      	beq.n	80063dc <_printf_i+0x94>
 8006394:	1d11      	adds	r1, r2, #4
 8006396:	6019      	str	r1, [r3, #0]
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	e027      	b.n	80063ec <_printf_i+0xa4>
 800639c:	2a73      	cmp	r2, #115	; 0x73
 800639e:	f000 80b4 	beq.w	800650a <_printf_i+0x1c2>
 80063a2:	d808      	bhi.n	80063b6 <_printf_i+0x6e>
 80063a4:	2a6f      	cmp	r2, #111	; 0x6f
 80063a6:	d02a      	beq.n	80063fe <_printf_i+0xb6>
 80063a8:	2a70      	cmp	r2, #112	; 0x70
 80063aa:	d1e5      	bne.n	8006378 <_printf_i+0x30>
 80063ac:	680a      	ldr	r2, [r1, #0]
 80063ae:	f042 0220 	orr.w	r2, r2, #32
 80063b2:	600a      	str	r2, [r1, #0]
 80063b4:	e003      	b.n	80063be <_printf_i+0x76>
 80063b6:	2a75      	cmp	r2, #117	; 0x75
 80063b8:	d021      	beq.n	80063fe <_printf_i+0xb6>
 80063ba:	2a78      	cmp	r2, #120	; 0x78
 80063bc:	d1dc      	bne.n	8006378 <_printf_i+0x30>
 80063be:	2278      	movs	r2, #120	; 0x78
 80063c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80063c4:	496e      	ldr	r1, [pc, #440]	; (8006580 <_printf_i+0x238>)
 80063c6:	e064      	b.n	8006492 <_printf_i+0x14a>
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80063ce:	1d11      	adds	r1, r2, #4
 80063d0:	6019      	str	r1, [r3, #0]
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063d8:	2301      	movs	r3, #1
 80063da:	e0a3      	b.n	8006524 <_printf_i+0x1dc>
 80063dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063e0:	f102 0104 	add.w	r1, r2, #4
 80063e4:	6019      	str	r1, [r3, #0]
 80063e6:	d0d7      	beq.n	8006398 <_printf_i+0x50>
 80063e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da03      	bge.n	80063f8 <_printf_i+0xb0>
 80063f0:	222d      	movs	r2, #45	; 0x2d
 80063f2:	425b      	negs	r3, r3
 80063f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063f8:	4962      	ldr	r1, [pc, #392]	; (8006584 <_printf_i+0x23c>)
 80063fa:	220a      	movs	r2, #10
 80063fc:	e017      	b.n	800642e <_printf_i+0xe6>
 80063fe:	6820      	ldr	r0, [r4, #0]
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006406:	d003      	beq.n	8006410 <_printf_i+0xc8>
 8006408:	1d08      	adds	r0, r1, #4
 800640a:	6018      	str	r0, [r3, #0]
 800640c:	680b      	ldr	r3, [r1, #0]
 800640e:	e006      	b.n	800641e <_printf_i+0xd6>
 8006410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006414:	f101 0004 	add.w	r0, r1, #4
 8006418:	6018      	str	r0, [r3, #0]
 800641a:	d0f7      	beq.n	800640c <_printf_i+0xc4>
 800641c:	880b      	ldrh	r3, [r1, #0]
 800641e:	4959      	ldr	r1, [pc, #356]	; (8006584 <_printf_i+0x23c>)
 8006420:	2a6f      	cmp	r2, #111	; 0x6f
 8006422:	bf14      	ite	ne
 8006424:	220a      	movne	r2, #10
 8006426:	2208      	moveq	r2, #8
 8006428:	2000      	movs	r0, #0
 800642a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800642e:	6865      	ldr	r5, [r4, #4]
 8006430:	60a5      	str	r5, [r4, #8]
 8006432:	2d00      	cmp	r5, #0
 8006434:	f2c0 809c 	blt.w	8006570 <_printf_i+0x228>
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	f020 0004 	bic.w	r0, r0, #4
 800643e:	6020      	str	r0, [r4, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d13f      	bne.n	80064c4 <_printf_i+0x17c>
 8006444:	2d00      	cmp	r5, #0
 8006446:	f040 8095 	bne.w	8006574 <_printf_i+0x22c>
 800644a:	4675      	mov	r5, lr
 800644c:	2a08      	cmp	r2, #8
 800644e:	d10b      	bne.n	8006468 <_printf_i+0x120>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	07da      	lsls	r2, r3, #31
 8006454:	d508      	bpl.n	8006468 <_printf_i+0x120>
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	6862      	ldr	r2, [r4, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	bfde      	ittt	le
 800645e:	2330      	movle	r3, #48	; 0x30
 8006460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006468:	ebae 0305 	sub.w	r3, lr, r5
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	f8cd 8000 	str.w	r8, [sp]
 8006472:	463b      	mov	r3, r7
 8006474:	aa03      	add	r2, sp, #12
 8006476:	4621      	mov	r1, r4
 8006478:	4630      	mov	r0, r6
 800647a:	f7ff feef 	bl	800625c <_printf_common>
 800647e:	3001      	adds	r0, #1
 8006480:	d155      	bne.n	800652e <_printf_i+0x1e6>
 8006482:	f04f 30ff 	mov.w	r0, #4294967295
 8006486:	b005      	add	sp, #20
 8006488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006490:	493c      	ldr	r1, [pc, #240]	; (8006584 <_printf_i+0x23c>)
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	f012 0f80 	tst.w	r2, #128	; 0x80
 800649a:	f100 0504 	add.w	r5, r0, #4
 800649e:	601d      	str	r5, [r3, #0]
 80064a0:	d001      	beq.n	80064a6 <_printf_i+0x15e>
 80064a2:	6803      	ldr	r3, [r0, #0]
 80064a4:	e002      	b.n	80064ac <_printf_i+0x164>
 80064a6:	0655      	lsls	r5, r2, #25
 80064a8:	d5fb      	bpl.n	80064a2 <_printf_i+0x15a>
 80064aa:	8803      	ldrh	r3, [r0, #0]
 80064ac:	07d0      	lsls	r0, r2, #31
 80064ae:	bf44      	itt	mi
 80064b0:	f042 0220 	orrmi.w	r2, r2, #32
 80064b4:	6022      	strmi	r2, [r4, #0]
 80064b6:	b91b      	cbnz	r3, 80064c0 <_printf_i+0x178>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	f022 0220 	bic.w	r2, r2, #32
 80064be:	6022      	str	r2, [r4, #0]
 80064c0:	2210      	movs	r2, #16
 80064c2:	e7b1      	b.n	8006428 <_printf_i+0xe0>
 80064c4:	4675      	mov	r5, lr
 80064c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80064ca:	fb02 3310 	mls	r3, r2, r0, r3
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064d4:	4603      	mov	r3, r0
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d1f5      	bne.n	80064c6 <_printf_i+0x17e>
 80064da:	e7b7      	b.n	800644c <_printf_i+0x104>
 80064dc:	6808      	ldr	r0, [r1, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	6949      	ldr	r1, [r1, #20]
 80064e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80064e6:	d004      	beq.n	80064f2 <_printf_i+0x1aa>
 80064e8:	1d10      	adds	r0, r2, #4
 80064ea:	6018      	str	r0, [r3, #0]
 80064ec:	6813      	ldr	r3, [r2, #0]
 80064ee:	6019      	str	r1, [r3, #0]
 80064f0:	e007      	b.n	8006502 <_printf_i+0x1ba>
 80064f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064f6:	f102 0004 	add.w	r0, r2, #4
 80064fa:	6018      	str	r0, [r3, #0]
 80064fc:	6813      	ldr	r3, [r2, #0]
 80064fe:	d0f6      	beq.n	80064ee <_printf_i+0x1a6>
 8006500:	8019      	strh	r1, [r3, #0]
 8006502:	2300      	movs	r3, #0
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	4675      	mov	r5, lr
 8006508:	e7b1      	b.n	800646e <_printf_i+0x126>
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	1d11      	adds	r1, r2, #4
 800650e:	6019      	str	r1, [r3, #0]
 8006510:	6815      	ldr	r5, [r2, #0]
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	2100      	movs	r1, #0
 8006516:	4628      	mov	r0, r5
 8006518:	f7f9 fee2 	bl	80002e0 <memchr>
 800651c:	b108      	cbz	r0, 8006522 <_printf_i+0x1da>
 800651e:	1b40      	subs	r0, r0, r5
 8006520:	6060      	str	r0, [r4, #4]
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	2300      	movs	r3, #0
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652c:	e79f      	b.n	800646e <_printf_i+0x126>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	462a      	mov	r2, r5
 8006532:	4639      	mov	r1, r7
 8006534:	4630      	mov	r0, r6
 8006536:	47c0      	blx	r8
 8006538:	3001      	adds	r0, #1
 800653a:	d0a2      	beq.n	8006482 <_printf_i+0x13a>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	079b      	lsls	r3, r3, #30
 8006540:	d507      	bpl.n	8006552 <_printf_i+0x20a>
 8006542:	2500      	movs	r5, #0
 8006544:	f104 0919 	add.w	r9, r4, #25
 8006548:	68e3      	ldr	r3, [r4, #12]
 800654a:	9a03      	ldr	r2, [sp, #12]
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	429d      	cmp	r5, r3
 8006550:	db05      	blt.n	800655e <_printf_i+0x216>
 8006552:	68e0      	ldr	r0, [r4, #12]
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	4298      	cmp	r0, r3
 8006558:	bfb8      	it	lt
 800655a:	4618      	movlt	r0, r3
 800655c:	e793      	b.n	8006486 <_printf_i+0x13e>
 800655e:	2301      	movs	r3, #1
 8006560:	464a      	mov	r2, r9
 8006562:	4639      	mov	r1, r7
 8006564:	4630      	mov	r0, r6
 8006566:	47c0      	blx	r8
 8006568:	3001      	adds	r0, #1
 800656a:	d08a      	beq.n	8006482 <_printf_i+0x13a>
 800656c:	3501      	adds	r5, #1
 800656e:	e7eb      	b.n	8006548 <_printf_i+0x200>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1a7      	bne.n	80064c4 <_printf_i+0x17c>
 8006574:	780b      	ldrb	r3, [r1, #0]
 8006576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800657a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800657e:	e765      	b.n	800644c <_printf_i+0x104>
 8006580:	08006a7e 	.word	0x08006a7e
 8006584:	08006a6d 	.word	0x08006a6d

08006588 <_sbrk_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4c06      	ldr	r4, [pc, #24]	; (80065a4 <_sbrk_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4605      	mov	r5, r0
 8006590:	4608      	mov	r0, r1
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	f7fe fea0 	bl	80052d8 <_sbrk>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_sbrk_r+0x1a>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_sbrk_r+0x1a>
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	200005d0 	.word	0x200005d0

080065a8 <__sread>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	460c      	mov	r4, r1
 80065ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b0:	f000 f896 	bl	80066e0 <_read_r>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	bfab      	itete	ge
 80065b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065ba:	89a3      	ldrhlt	r3, [r4, #12]
 80065bc:	181b      	addge	r3, r3, r0
 80065be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065c2:	bfac      	ite	ge
 80065c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065c6:	81a3      	strhlt	r3, [r4, #12]
 80065c8:	bd10      	pop	{r4, pc}

080065ca <__swrite>:
 80065ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ce:	461f      	mov	r7, r3
 80065d0:	898b      	ldrh	r3, [r1, #12]
 80065d2:	05db      	lsls	r3, r3, #23
 80065d4:	4605      	mov	r5, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	4616      	mov	r6, r2
 80065da:	d505      	bpl.n	80065e8 <__swrite+0x1e>
 80065dc:	2302      	movs	r3, #2
 80065de:	2200      	movs	r2, #0
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	f000 f868 	bl	80066b8 <_lseek_r>
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065f2:	81a3      	strh	r3, [r4, #12]
 80065f4:	4632      	mov	r2, r6
 80065f6:	463b      	mov	r3, r7
 80065f8:	4628      	mov	r0, r5
 80065fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065fe:	f000 b817 	b.w	8006630 <_write_r>

08006602 <__sseek>:
 8006602:	b510      	push	{r4, lr}
 8006604:	460c      	mov	r4, r1
 8006606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660a:	f000 f855 	bl	80066b8 <_lseek_r>
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	bf15      	itete	ne
 8006614:	6560      	strne	r0, [r4, #84]	; 0x54
 8006616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800661a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800661e:	81a3      	strheq	r3, [r4, #12]
 8006620:	bf18      	it	ne
 8006622:	81a3      	strhne	r3, [r4, #12]
 8006624:	bd10      	pop	{r4, pc}

08006626 <__sclose>:
 8006626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662a:	f000 b813 	b.w	8006654 <_close_r>
	...

08006630 <_write_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4c07      	ldr	r4, [pc, #28]	; (8006650 <_write_r+0x20>)
 8006634:	4605      	mov	r5, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	6022      	str	r2, [r4, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fe fe3c 	bl	80052bc <_write>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_write_r+0x1e>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	b103      	cbz	r3, 800664e <_write_r+0x1e>
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	200005d0 	.word	0x200005d0

08006654 <_close_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4c06      	ldr	r4, [pc, #24]	; (8006670 <_close_r+0x1c>)
 8006658:	2300      	movs	r3, #0
 800665a:	4605      	mov	r5, r0
 800665c:	4608      	mov	r0, r1
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	f7fe fe54 	bl	800530c <_close>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_close_r+0x1a>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	b103      	cbz	r3, 800666e <_close_r+0x1a>
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	200005d0 	.word	0x200005d0

08006674 <_fstat_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4c07      	ldr	r4, [pc, #28]	; (8006694 <_fstat_r+0x20>)
 8006678:	2300      	movs	r3, #0
 800667a:	4605      	mov	r5, r0
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	f7fe fe46 	bl	8005312 <_fstat>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d102      	bne.n	8006690 <_fstat_r+0x1c>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	b103      	cbz	r3, 8006690 <_fstat_r+0x1c>
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	200005d0 	.word	0x200005d0

08006698 <_isatty_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4c06      	ldr	r4, [pc, #24]	; (80066b4 <_isatty_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4605      	mov	r5, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	f7fe fe3a 	bl	800531c <_isatty>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_isatty_r+0x1a>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_isatty_r+0x1a>
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	200005d0 	.word	0x200005d0

080066b8 <_lseek_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4c07      	ldr	r4, [pc, #28]	; (80066d8 <_lseek_r+0x20>)
 80066bc:	4605      	mov	r5, r0
 80066be:	4608      	mov	r0, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f7fe fe2a 	bl	8005320 <_lseek>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_lseek_r+0x1e>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_lseek_r+0x1e>
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	200005d0 	.word	0x200005d0

080066dc <__malloc_lock>:
 80066dc:	4770      	bx	lr

080066de <__malloc_unlock>:
 80066de:	4770      	bx	lr

080066e0 <_read_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4c07      	ldr	r4, [pc, #28]	; (8006700 <_read_r+0x20>)
 80066e4:	4605      	mov	r5, r0
 80066e6:	4608      	mov	r0, r1
 80066e8:	4611      	mov	r1, r2
 80066ea:	2200      	movs	r2, #0
 80066ec:	6022      	str	r2, [r4, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	f7fe fdd6 	bl	80052a0 <_read>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d102      	bne.n	80066fe <_read_r+0x1e>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	b103      	cbz	r3, 80066fe <_read_r+0x1e>
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	200005d0 	.word	0x200005d0

08006704 <_init>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr

08006710 <_fini>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	bf00      	nop
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr
