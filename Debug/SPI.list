
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ea8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000000  080086f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b24  200001ec  080088dc  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00003000  20000d10  080088dc  00020d10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027564  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000428a  00000000  00000000  0004777e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e3da  00000000  00000000  0004ba08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000fe8  00000000  00000000  00059de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001288  00000000  00000000  0005add0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b160  00000000  00000000  0005c058  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007440  00000000  00000000  000671b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006e5f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003820  00000000  00000000  0006e674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001ec 	.word	0x200001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008130 	.word	0x08008130

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001f0 	.word	0x200001f0
 80002dc:	08008130 	.word	0x08008130

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b97a 	b.w	800069c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	468c      	mov	ip, r1
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	9e08      	ldr	r6, [sp, #32]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d151      	bne.n	8000474 <__udivmoddi4+0xb4>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d96d      	bls.n	80004b2 <__udivmoddi4+0xf2>
 80003d6:	fab2 fe82 	clz	lr, r2
 80003da:	f1be 0f00 	cmp.w	lr, #0
 80003de:	d00b      	beq.n	80003f8 <__udivmoddi4+0x38>
 80003e0:	f1ce 0c20 	rsb	ip, lr, #32
 80003e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80003f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80003fc:	0c25      	lsrs	r5, r4, #16
 80003fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000402:	fa1f f987 	uxth.w	r9, r7
 8000406:	fb0a cc18 	mls	ip, sl, r8, ip
 800040a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800040e:	fb08 f309 	mul.w	r3, r8, r9
 8000412:	42ab      	cmp	r3, r5
 8000414:	d90a      	bls.n	800042c <__udivmoddi4+0x6c>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f108 32ff 	add.w	r2, r8, #4294967295
 800041c:	f080 8123 	bcs.w	8000666 <__udivmoddi4+0x2a6>
 8000420:	42ab      	cmp	r3, r5
 8000422:	f240 8120 	bls.w	8000666 <__udivmoddi4+0x2a6>
 8000426:	f1a8 0802 	sub.w	r8, r8, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aed      	subs	r5, r5, r3
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb5 f0fa 	udiv	r0, r5, sl
 8000434:	fb0a 5510 	mls	r5, sl, r0, r5
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb00 f909 	mul.w	r9, r0, r9
 8000440:	45a1      	cmp	r9, r4
 8000442:	d909      	bls.n	8000458 <__udivmoddi4+0x98>
 8000444:	19e4      	adds	r4, r4, r7
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	f080 810a 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8107 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000454:	3802      	subs	r0, #2
 8000456:	443c      	add	r4, r7
 8000458:	eba4 0409 	sub.w	r4, r4, r9
 800045c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000460:	2100      	movs	r1, #0
 8000462:	2e00      	cmp	r6, #0
 8000464:	d061      	beq.n	800052a <__udivmoddi4+0x16a>
 8000466:	fa24 f40e 	lsr.w	r4, r4, lr
 800046a:	2300      	movs	r3, #0
 800046c:	6034      	str	r4, [r6, #0]
 800046e:	6073      	str	r3, [r6, #4]
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	428b      	cmp	r3, r1
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0xc8>
 8000478:	2e00      	cmp	r6, #0
 800047a:	d054      	beq.n	8000526 <__udivmoddi4+0x166>
 800047c:	2100      	movs	r1, #0
 800047e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000482:	4608      	mov	r0, r1
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	fab3 f183 	clz	r1, r3
 800048c:	2900      	cmp	r1, #0
 800048e:	f040 808e 	bne.w	80005ae <__udivmoddi4+0x1ee>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xdc>
 8000496:	4282      	cmp	r2, r0
 8000498:	f200 80fa 	bhi.w	8000690 <__udivmoddi4+0x2d0>
 800049c:	1a84      	subs	r4, r0, r2
 800049e:	eb65 0503 	sbc.w	r5, r5, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	46ac      	mov	ip, r5
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d03f      	beq.n	800052a <__udivmoddi4+0x16a>
 80004aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	b912      	cbnz	r2, 80004ba <__udivmoddi4+0xfa>
 80004b4:	2701      	movs	r7, #1
 80004b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004ba:	fab7 fe87 	clz	lr, r7
 80004be:	f1be 0f00 	cmp.w	lr, #0
 80004c2:	d134      	bne.n	800052e <__udivmoddi4+0x16e>
 80004c4:	1beb      	subs	r3, r5, r7
 80004c6:	0c3a      	lsrs	r2, r7, #16
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	2101      	movs	r1, #1
 80004ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80004d2:	0c25      	lsrs	r5, r4, #16
 80004d4:	fb02 3318 	mls	r3, r2, r8, r3
 80004d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004dc:	fb0c f308 	mul.w	r3, ip, r8
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x134>
 80004e4:	19ed      	adds	r5, r5, r7
 80004e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x132>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	f200 80d1 	bhi.w	8000694 <__udivmoddi4+0x2d4>
 80004f2:	4680      	mov	r8, r0
 80004f4:	1aed      	subs	r5, r5, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80004fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000500:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000504:	fb0c fc00 	mul.w	ip, ip, r0
 8000508:	45a4      	cmp	ip, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x15c>
 800050c:	19e4      	adds	r4, r4, r7
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x15a>
 8000514:	45a4      	cmp	ip, r4
 8000516:	f200 80b8 	bhi.w	800068a <__udivmoddi4+0x2ca>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 040c 	sub.w	r4, r4, ip
 8000520:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000524:	e79d      	b.n	8000462 <__udivmoddi4+0xa2>
 8000526:	4631      	mov	r1, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	f1ce 0420 	rsb	r4, lr, #32
 8000532:	fa05 f30e 	lsl.w	r3, r5, lr
 8000536:	fa07 f70e 	lsl.w	r7, r7, lr
 800053a:	fa20 f804 	lsr.w	r8, r0, r4
 800053e:	0c3a      	lsrs	r2, r7, #16
 8000540:	fa25 f404 	lsr.w	r4, r5, r4
 8000544:	ea48 0803 	orr.w	r8, r8, r3
 8000548:	fbb4 f1f2 	udiv	r1, r4, r2
 800054c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000550:	fb02 4411 	mls	r4, r2, r1, r4
 8000554:	fa1f fc87 	uxth.w	ip, r7
 8000558:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800055c:	fb01 f30c 	mul.w	r3, r1, ip
 8000560:	42ab      	cmp	r3, r5
 8000562:	fa00 f40e 	lsl.w	r4, r0, lr
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x1bc>
 8000568:	19ed      	adds	r5, r5, r7
 800056a:	f101 30ff 	add.w	r0, r1, #4294967295
 800056e:	f080 808a 	bcs.w	8000686 <__udivmoddi4+0x2c6>
 8000572:	42ab      	cmp	r3, r5
 8000574:	f240 8087 	bls.w	8000686 <__udivmoddi4+0x2c6>
 8000578:	3902      	subs	r1, #2
 800057a:	443d      	add	r5, r7
 800057c:	1aeb      	subs	r3, r5, r3
 800057e:	fa1f f588 	uxth.w	r5, r8
 8000582:	fbb3 f0f2 	udiv	r0, r3, r2
 8000586:	fb02 3310 	mls	r3, r2, r0, r3
 800058a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800058e:	fb00 f30c 	mul.w	r3, r0, ip
 8000592:	42ab      	cmp	r3, r5
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x1e6>
 8000596:	19ed      	adds	r5, r5, r7
 8000598:	f100 38ff 	add.w	r8, r0, #4294967295
 800059c:	d26f      	bcs.n	800067e <__udivmoddi4+0x2be>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d96d      	bls.n	800067e <__udivmoddi4+0x2be>
 80005a2:	3802      	subs	r0, #2
 80005a4:	443d      	add	r5, r7
 80005a6:	1aeb      	subs	r3, r5, r3
 80005a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ac:	e78f      	b.n	80004ce <__udivmoddi4+0x10e>
 80005ae:	f1c1 0720 	rsb	r7, r1, #32
 80005b2:	fa22 f807 	lsr.w	r8, r2, r7
 80005b6:	408b      	lsls	r3, r1
 80005b8:	fa05 f401 	lsl.w	r4, r5, r1
 80005bc:	ea48 0303 	orr.w	r3, r8, r3
 80005c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80005c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80005c8:	40fd      	lsrs	r5, r7
 80005ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80005ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80005d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80005d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80005da:	fa1f f883 	uxth.w	r8, r3
 80005de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005e2:	fb09 f408 	mul.w	r4, r9, r8
 80005e6:	42ac      	cmp	r4, r5
 80005e8:	fa02 f201 	lsl.w	r2, r2, r1
 80005ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x244>
 80005f2:	18ed      	adds	r5, r5, r3
 80005f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f8:	d243      	bcs.n	8000682 <__udivmoddi4+0x2c2>
 80005fa:	42ac      	cmp	r4, r5
 80005fc:	d941      	bls.n	8000682 <__udivmoddi4+0x2c2>
 80005fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000602:	441d      	add	r5, r3
 8000604:	1b2d      	subs	r5, r5, r4
 8000606:	fa1f fe8e 	uxth.w	lr, lr
 800060a:	fbb5 f0fc 	udiv	r0, r5, ip
 800060e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000612:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000616:	fb00 f808 	mul.w	r8, r0, r8
 800061a:	45a0      	cmp	r8, r4
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x26e>
 800061e:	18e4      	adds	r4, r4, r3
 8000620:	f100 35ff 	add.w	r5, r0, #4294967295
 8000624:	d229      	bcs.n	800067a <__udivmoddi4+0x2ba>
 8000626:	45a0      	cmp	r8, r4
 8000628:	d927      	bls.n	800067a <__udivmoddi4+0x2ba>
 800062a:	3802      	subs	r0, #2
 800062c:	441c      	add	r4, r3
 800062e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000632:	eba4 0408 	sub.w	r4, r4, r8
 8000636:	fba0 8902 	umull	r8, r9, r0, r2
 800063a:	454c      	cmp	r4, r9
 800063c:	46c6      	mov	lr, r8
 800063e:	464d      	mov	r5, r9
 8000640:	d315      	bcc.n	800066e <__udivmoddi4+0x2ae>
 8000642:	d012      	beq.n	800066a <__udivmoddi4+0x2aa>
 8000644:	b156      	cbz	r6, 800065c <__udivmoddi4+0x29c>
 8000646:	ebba 030e 	subs.w	r3, sl, lr
 800064a:	eb64 0405 	sbc.w	r4, r4, r5
 800064e:	fa04 f707 	lsl.w	r7, r4, r7
 8000652:	40cb      	lsrs	r3, r1
 8000654:	431f      	orrs	r7, r3
 8000656:	40cc      	lsrs	r4, r1
 8000658:	6037      	str	r7, [r6, #0]
 800065a:	6074      	str	r4, [r6, #4]
 800065c:	2100      	movs	r1, #0
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	4618      	mov	r0, r3
 8000664:	e6f8      	b.n	8000458 <__udivmoddi4+0x98>
 8000666:	4690      	mov	r8, r2
 8000668:	e6e0      	b.n	800042c <__udivmoddi4+0x6c>
 800066a:	45c2      	cmp	sl, r8
 800066c:	d2ea      	bcs.n	8000644 <__udivmoddi4+0x284>
 800066e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000672:	eb69 0503 	sbc.w	r5, r9, r3
 8000676:	3801      	subs	r0, #1
 8000678:	e7e4      	b.n	8000644 <__udivmoddi4+0x284>
 800067a:	4628      	mov	r0, r5
 800067c:	e7d7      	b.n	800062e <__udivmoddi4+0x26e>
 800067e:	4640      	mov	r0, r8
 8000680:	e791      	b.n	80005a6 <__udivmoddi4+0x1e6>
 8000682:	4681      	mov	r9, r0
 8000684:	e7be      	b.n	8000604 <__udivmoddi4+0x244>
 8000686:	4601      	mov	r1, r0
 8000688:	e778      	b.n	800057c <__udivmoddi4+0x1bc>
 800068a:	3802      	subs	r0, #2
 800068c:	443c      	add	r4, r7
 800068e:	e745      	b.n	800051c <__udivmoddi4+0x15c>
 8000690:	4608      	mov	r0, r1
 8000692:	e708      	b.n	80004a6 <__udivmoddi4+0xe6>
 8000694:	f1a8 0802 	sub.w	r8, r8, #2
 8000698:	443d      	add	r5, r7
 800069a:	e72b      	b.n	80004f4 <__udivmoddi4+0x134>

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_InitTick+0x40>)
{
 80006a4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80006a6:	7818      	ldrb	r0, [r3, #0]
 80006a8:	b908      	cbnz	r0, 80006ae <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
 80006ac:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <HAL_InitTick+0x44>)
 80006b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80006b8:	6810      	ldr	r0, [r2, #0]
 80006ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80006be:	f000 f8d3 	bl	8000868 <HAL_SYSTICK_Config>
 80006c2:	4604      	mov	r4, r0
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d1f0      	bne.n	80006aa <HAL_InitTick+0xa>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c8:	2d0f      	cmp	r5, #15
 80006ca:	d8ee      	bhi.n	80006aa <HAL_InitTick+0xa>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	4602      	mov	r2, r0
 80006ce:	4629      	mov	r1, r5
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f880 	bl	80007d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_InitTick+0x48>)
 80006da:	4620      	mov	r0, r4
 80006dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000014 	.word	0x20000014
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_Init>:
{
 80006ec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ee:	2003      	movs	r0, #3
 80006f0:	f000 f854 	bl	800079c <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006f4:	f000 ff58 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 80006f8:	490f      	ldr	r1, [pc, #60]	; (8000738 <HAL_Init+0x4c>)
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <HAL_Init+0x50>)
 80006fc:	698b      	ldr	r3, [r1, #24]
 80006fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	f003 031f 	and.w	r3, r3, #31
 8000708:	40d8      	lsrs	r0, r3
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_Init+0x54>)
 800070c:	6018      	str	r0, [r3, #0]
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800070e:	698b      	ldr	r3, [r1, #24]
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	40d8      	lsrs	r0, r3
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_Init+0x58>)
 800071e:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ffbd 	bl	80006a0 <HAL_InitTick>
 8000726:	4604      	mov	r4, r0
 8000728:	b918      	cbnz	r0, 8000732 <HAL_Init+0x46>
  HAL_MspInit();
 800072a:	f006 f8d9 	bl	80068e0 <HAL_MspInit>
}
 800072e:	4620      	mov	r0, r4
 8000730:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000732:	2401      	movs	r4, #1
 8000734:	e7fb      	b.n	800072e <HAL_Init+0x42>
 8000736:	bf00      	nop
 8000738:	58024400 	.word	0x58024400
 800073c:	0800843f 	.word	0x0800843f
 8000740:	20000014 	.word	0x20000014
 8000744:	20000018 	.word	0x20000018

08000748 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <HAL_IncTick+0x10>)
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_IncTick+0x14>)
 800074c:	6811      	ldr	r1, [r2, #0]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	440b      	add	r3, r1
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	2000022c 	.word	0x2000022c
 800075c:	20000000 	.word	0x20000000

08000760 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000760:	4b01      	ldr	r3, [pc, #4]	; (8000768 <HAL_GetTick+0x8>)
 8000762:	6818      	ldr	r0, [r3, #0]
}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	2000022c 	.word	0x2000022c

0800076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800076c:	b538      	push	{r3, r4, r5, lr}
 800076e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff6 	bl	8000760 <HAL_GetTick>
 8000774:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000778:	bf1e      	ittt	ne
 800077a:	4b04      	ldrne	r3, [pc, #16]	; (800078c <HAL_Delay+0x20>)
 800077c:	781b      	ldrbne	r3, [r3, #0]
 800077e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000780:	f7ff ffee 	bl	8000760 <HAL_GetTick>
 8000784:	1b40      	subs	r0, r0, r5
 8000786:	4284      	cmp	r4, r0
 8000788:	d8fa      	bhi.n	8000780 <HAL_Delay+0x14>
  {
  }
}
 800078a:	bd38      	pop	{r3, r4, r5, pc}
 800078c:	20000000 	.word	0x20000000

08000790 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000790:	4b01      	ldr	r3, [pc, #4]	; (8000798 <HAL_GetREVID+0x8>)
 8000792:	6818      	ldr	r0, [r3, #0]
}
 8000794:	0c00      	lsrs	r0, r0, #16
 8000796:	4770      	bx	lr
 8000798:	5c001000 	.word	0x5c001000

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800079c:	1ec3      	subs	r3, r0, #3
 800079e:	2b04      	cmp	r3, #4
{
 80007a0:	b510      	push	{r4, lr}
 80007a2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80007a4:	d903      	bls.n	80007ae <HAL_NVIC_SetPriorityGrouping+0x12>
 80007a6:	2192      	movs	r1, #146	; 0x92
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80007aa:	f006 f891 	bl	80068d0 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b0:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b2:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007bc:	041b      	lsls	r3, r3, #16
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007c8:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80007ca:	60d4      	str	r4, [r2, #12]
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	08008168 	.word	0x08008168
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007d8:	2a0f      	cmp	r2, #15
{
 80007da:	b570      	push	{r4, r5, r6, lr}
 80007dc:	4604      	mov	r4, r0
 80007de:	460e      	mov	r6, r1
 80007e0:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007e2:	d903      	bls.n	80007ec <HAL_NVIC_SetPriority+0x14>
 80007e4:	21aa      	movs	r1, #170	; 0xaa
 80007e6:	481d      	ldr	r0, [pc, #116]	; (800085c <HAL_NVIC_SetPriority+0x84>)
 80007e8:	f006 f872 	bl	80068d0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007ec:	2e0f      	cmp	r6, #15
 80007ee:	d903      	bls.n	80007f8 <HAL_NVIC_SetPriority+0x20>
 80007f0:	21ab      	movs	r1, #171	; 0xab
 80007f2:	481a      	ldr	r0, [pc, #104]	; (800085c <HAL_NVIC_SetPriority+0x84>)
 80007f4:	f006 f86c 	bl	80068d0 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_NVIC_SetPriority+0x88>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fa:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	68d9      	ldr	r1, [r3, #12]
 80007fe:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000802:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000808:	2b04      	cmp	r3, #4
 800080a:	bf28      	it	cs
 800080c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	2a06      	cmp	r2, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	fa00 f203 	lsl.w	r2, r0, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000814:	bf8c      	ite	hi
 8000816:	3903      	subhi	r1, #3
 8000818:	2100      	movls	r1, #0
  if ((int32_t)(IRQn) >= 0)
 800081a:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f102 32ff 	add.w	r2, r2, #4294967295
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	fa00 f001 	lsl.w	r0, r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	ea02 0206 	and.w	r2, r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f100 30ff 	add.w	r0, r0, #4294967295
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	fa02 f201 	lsl.w	r2, r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	ea05 0500 	and.w	r5, r5, r0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	ea42 0205 	orr.w	r2, r2, r5
 8000838:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800083c:	db07      	blt.n	800084e <HAL_NVIC_SetPriority+0x76>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8000848:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
 800084c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	f004 040f 	and.w	r4, r4, #15
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_NVIC_SetPriority+0x8c>)
 8000856:	551a      	strb	r2, [r3, r4]
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	bf00      	nop
 800085c:	08008168 	.word	0x08008168
 8000860:	e000ed00 	.word	0xe000ed00
 8000864:	e000ed14 	.word	0xe000ed14

08000868 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	3801      	subs	r0, #1
 800086a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800086e:	d20a      	bcs.n	8000886 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	21f0      	movs	r1, #240	; 0xf0
 8000874:	4a06      	ldr	r2, [pc, #24]	; (8000890 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e010 	.word	0xe000e010
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <HAL_GPIO_Init>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000894:	4bbd      	ldr	r3, [pc, #756]	; (8000b8c <HAL_GPIO_Init+0x2f8>)
 8000896:	4298      	cmp	r0, r3
{
 8000898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800089c:	4604      	mov	r4, r0
 800089e:	b085      	sub	sp, #20
 80008a0:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80008a2:	d02b      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008a8:	4298      	cmp	r0, r3
 80008aa:	d027      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008b0:	4298      	cmp	r0, r3
 80008b2:	d023      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d01f      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008c0:	4298      	cmp	r0, r3
 80008c2:	d01b      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008c8:	4298      	cmp	r0, r3
 80008ca:	d017      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008d0:	4298      	cmp	r0, r3
 80008d2:	d013      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008d8:	4298      	cmp	r0, r3
 80008da:	d00f      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008e0:	4298      	cmp	r0, r3
 80008e2:	d00b      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008e8:	4298      	cmp	r0, r3
 80008ea:	d007      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008f0:	4298      	cmp	r0, r3
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0x68>
 80008f4:	21bb      	movs	r1, #187	; 0xbb
 80008f6:	48a6      	ldr	r0, [pc, #664]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 80008f8:	f005 ffea 	bl	80068d0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	b112      	cbz	r2, 8000908 <HAL_GPIO_Init+0x74>
 8000902:	0c1b      	lsrs	r3, r3, #16
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	b11b      	cbz	r3, 8000910 <HAL_GPIO_Init+0x7c>
 8000908:	21bc      	movs	r1, #188	; 0xbc
 800090a:	48a1      	ldr	r0, [pc, #644]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 800090c:	f005 ffe0 	bl	80068d0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000910:	686b      	ldr	r3, [r5, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d917      	bls.n	8000946 <HAL_GPIO_Init+0xb2>
 8000916:	f1a3 0211 	sub.w	r2, r3, #17
 800091a:	2a01      	cmp	r2, #1
 800091c:	d913      	bls.n	8000946 <HAL_GPIO_Init+0xb2>
 800091e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000922:	499c      	ldr	r1, [pc, #624]	; (8000b94 <HAL_GPIO_Init+0x300>)
 8000924:	428a      	cmp	r2, r1
 8000926:	d00e      	beq.n	8000946 <HAL_GPIO_Init+0xb2>
 8000928:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800092c:	428b      	cmp	r3, r1
 800092e:	d00a      	beq.n	8000946 <HAL_GPIO_Init+0xb2>
 8000930:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8000934:	428a      	cmp	r2, r1
 8000936:	d006      	beq.n	8000946 <HAL_GPIO_Init+0xb2>
 8000938:	4a97      	ldr	r2, [pc, #604]	; (8000b98 <HAL_GPIO_Init+0x304>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d003      	beq.n	8000946 <HAL_GPIO_Init+0xb2>
 800093e:	21bd      	movs	r1, #189	; 0xbd
 8000940:	4893      	ldr	r0, [pc, #588]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 8000942:	f005 ffc5 	bl	80068d0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000946:	68ab      	ldr	r3, [r5, #8]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d903      	bls.n	8000954 <HAL_GPIO_Init+0xc0>
 800094c:	21be      	movs	r1, #190	; 0xbe
 800094e:	4890      	ldr	r0, [pc, #576]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 8000950:	f005 ffbe 	bl	80068d0 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000954:	f04f 0800 	mov.w	r8, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000958:	4f90      	ldr	r7, [pc, #576]	; (8000b9c <HAL_GPIO_Init+0x308>)
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800095a:	4e91      	ldr	r6, [pc, #580]	; (8000ba0 <HAL_GPIO_Init+0x30c>)
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	fa33 f208 	lsrs.w	r2, r3, r8
 8000962:	d102      	bne.n	800096a <HAL_GPIO_Init+0xd6>
      }
    }

    position++;
  }
}
 8000964:	b005      	add	sp, #20
 8000966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800096a:	f04f 0a01 	mov.w	sl, #1
 800096e:	fa0a fa08 	lsl.w	sl, sl, r8
    if (iocurrent != 0x00U)
 8000972:	ea13 090a 	ands.w	r9, r3, sl
 8000976:	f000 80f7 	beq.w	8000b68 <HAL_GPIO_Init+0x2d4>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097a:	686b      	ldr	r3, [r5, #4]
 800097c:	f023 0310 	bic.w	r3, r3, #16
 8000980:	2b02      	cmp	r3, #2
 8000982:	d145      	bne.n	8000a10 <HAL_GPIO_Init+0x17c>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000984:	4b81      	ldr	r3, [pc, #516]	; (8000b8c <HAL_GPIO_Init+0x2f8>)
 8000986:	429c      	cmp	r4, r3
 8000988:	d02b      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 800098a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800098e:	429c      	cmp	r4, r3
 8000990:	d027      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 8000992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000996:	429c      	cmp	r4, r3
 8000998:	d023      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 800099a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800099e:	429c      	cmp	r4, r3
 80009a0:	d01f      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009a6:	429c      	cmp	r4, r3
 80009a8:	d01b      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009ae:	429c      	cmp	r4, r3
 80009b0:	d017      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d013      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009be:	429c      	cmp	r4, r3
 80009c0:	d00f      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009c6:	429c      	cmp	r4, r3
 80009c8:	d00b      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009ce:	429c      	cmp	r4, r3
 80009d0:	d007      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009d6:	429c      	cmp	r4, r3
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x14e>
 80009da:	21cd      	movs	r1, #205	; 0xcd
 80009dc:	486c      	ldr	r0, [pc, #432]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 80009de:	f005 ff77 	bl	80068d0 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80009e2:	692b      	ldr	r3, [r5, #16]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d903      	bls.n	80009f0 <HAL_GPIO_Init+0x15c>
 80009e8:	21ce      	movs	r1, #206	; 0xce
 80009ea:	4869      	ldr	r0, [pc, #420]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 80009ec:	f005 ff70 	bl	80068d0 <assert_failed>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009f0:	f008 0307 	and.w	r3, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 80009f4:	ea4f 02d8 	mov.w	r2, r8, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009f8:	0099      	lsls	r1, r3, #2
 80009fa:	230f      	movs	r3, #15
 80009fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8000a00:	408b      	lsls	r3, r1
        temp = GPIOx->AFR[position >> 3U];
 8000a02:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a04:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a08:	692b      	ldr	r3, [r5, #16]
 8000a0a:	408b      	lsls	r3, r1
 8000a0c:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3U] = temp;
 8000a0e:	6213      	str	r3, [r2, #32]
 8000a10:	ea4f 0248 	mov.w	r2, r8, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a14:	f04f 0b03 	mov.w	fp, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a18:	686b      	ldr	r3, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a1a:	fa0b fb02 	lsl.w	fp, fp, r2
      temp = GPIOx->MODER;
 8000a1e:	6820      	ldr	r0, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a20:	f003 0103 	and.w	r1, r3, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a24:	f023 0310 	bic.w	r3, r3, #16
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a28:	ea6f 0b0b 	mvn.w	fp, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a2c:	4091      	lsls	r1, r2
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a2e:	3b01      	subs	r3, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a30:	ea00 000b 	and.w	r0, r0, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a34:	2b01      	cmp	r3, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a36:	ea41 0100 	orr.w	r1, r1, r0
      GPIOx->MODER = temp;
 8000a3a:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a3c:	d81a      	bhi.n	8000a74 <HAL_GPIO_Init+0x1e0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000a3e:	68eb      	ldr	r3, [r5, #12]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d905      	bls.n	8000a50 <HAL_GPIO_Init+0x1bc>
 8000a44:	21e2      	movs	r1, #226	; 0xe2
 8000a46:	4852      	ldr	r0, [pc, #328]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 8000a48:	9201      	str	r2, [sp, #4]
 8000a4a:	f005 ff41 	bl	80068d0 <assert_failed>
 8000a4e:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000a50:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a52:	68eb      	ldr	r3, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a54:	ea0b 0101 	and.w	r1, fp, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a58:	4093      	lsls	r3, r2
 8000a5a:	430b      	orrs	r3, r1
        GPIOx->OSPEEDR = temp;
 8000a5c:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 8000a5e:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a60:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a64:	686b      	ldr	r3, [r5, #4]
 8000a66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a6a:	fa03 f308 	lsl.w	r3, r3, r8
 8000a6e:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OTYPER = temp;
 8000a72:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8000a74:	68e3      	ldr	r3, [r4, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a76:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a78:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a7c:	68ab      	ldr	r3, [r5, #8]
 8000a7e:	fa03 f202 	lsl.w	r2, r3, r2
 8000a82:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->PUPDR = temp;
 8000a86:	60e2      	str	r2, [r4, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a88:	00c2      	lsls	r2, r0, #3
 8000a8a:	d56d      	bpl.n	8000b68 <HAL_GPIO_Init+0x2d4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a90:	f028 0103 	bic.w	r1, r8, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a94:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	f101 41b0 	add.w	r1, r1, #1476395008	; 0x58000000
 8000aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000aa4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	9303      	str	r3, [sp, #12]
 8000ab2:	9b03      	ldr	r3, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ab4:	f008 0303 	and.w	r3, r8, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ab8:	688a      	ldr	r2, [r1, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000aba:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8000abe:	fa0c f30e 	lsl.w	r3, ip, lr
 8000ac2:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_GPIO_Init+0x2f8>)
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	d050      	beq.n	8000b6e <HAL_GPIO_Init+0x2da>
 8000acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ad0:	429c      	cmp	r4, r3
 8000ad2:	d04e      	beq.n	8000b72 <HAL_GPIO_Init+0x2de>
 8000ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ad8:	429c      	cmp	r4, r3
 8000ada:	d04c      	beq.n	8000b76 <HAL_GPIO_Init+0x2e2>
 8000adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ae0:	429c      	cmp	r4, r3
 8000ae2:	d04a      	beq.n	8000b7a <HAL_GPIO_Init+0x2e6>
 8000ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ae8:	429c      	cmp	r4, r3
 8000aea:	d048      	beq.n	8000b7e <HAL_GPIO_Init+0x2ea>
 8000aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000af0:	429c      	cmp	r4, r3
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0x2ee>
 8000af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d044      	beq.n	8000b86 <HAL_GPIO_Init+0x2f2>
 8000afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b00:	429c      	cmp	r4, r3
 8000b02:	d04f      	beq.n	8000ba4 <HAL_GPIO_Init+0x310>
 8000b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	d04d      	beq.n	8000ba8 <HAL_GPIO_Init+0x314>
 8000b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b10:	429c      	cmp	r4, r3
 8000b12:	bf14      	ite	ne
 8000b14:	230a      	movne	r3, #10
 8000b16:	2309      	moveq	r3, #9
 8000b18:	fa03 f30e 	lsl.w	r3, r3, lr
 8000b1c:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b20:	608b      	str	r3, [r1, #8]
        temp &= ~(iocurrent);
 8000b22:	ea6f 0109 	mvn.w	r1, r9
        temp = EXTI_CurrentCPU->IMR1;
 8000b26:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b28:	03c3      	lsls	r3, r0, #15
        temp &= ~(iocurrent);
 8000b2a:	bf54      	ite	pl
 8000b2c:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8000b2e:	ea49 0202 	orrmi.w	r2, r9, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b32:	0383      	lsls	r3, r0, #14
        temp = EXTI->RTSR1;
 8000b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 8000b38:	6032      	str	r2, [r6, #0]
        temp = EXTI_CurrentCPU->EMR1;
 8000b3a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
 8000b3c:	bf54      	ite	pl
 8000b3e:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8000b40:	ea49 0202 	orrmi.w	r2, r9, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b44:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
        EXTI_CurrentCPU->EMR1 = temp;
 8000b48:	6072      	str	r2, [r6, #4]
        temp = EXTI->RTSR1;
 8000b4a:	681a      	ldr	r2, [r3, #0]
        temp &= ~(iocurrent);
 8000b4c:	bf0c      	ite	eq
 8000b4e:	400a      	andeq	r2, r1
          temp |= iocurrent;
 8000b50:	ea49 0202 	orrne.w	r2, r9, r2
        EXTI->RTSR1 = temp;
 8000b54:	601a      	str	r2, [r3, #0]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b56:	0282      	lsls	r2, r0, #10
        temp = EXTI->FTSR1;
 8000b58:	685b      	ldr	r3, [r3, #4]
        EXTI->FTSR1 = temp;
 8000b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000b5e:	bf54      	ite	pl
 8000b60:	400b      	andpl	r3, r1
          temp |= iocurrent;
 8000b62:	ea49 0303 	orrmi.w	r3, r9, r3
        EXTI->FTSR1 = temp;
 8000b66:	6053      	str	r3, [r2, #4]
    position++;
 8000b68:	f108 0801 	add.w	r8, r8, #1
 8000b6c:	e6f6      	b.n	800095c <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e7d2      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e7d0      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e7ce      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e7cc      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000b7e:	2304      	movs	r3, #4
 8000b80:	e7ca      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000b82:	2305      	movs	r3, #5
 8000b84:	e7c8      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000b86:	2306      	movs	r3, #6
 8000b88:	e7c6      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000b8a:	bf00      	nop
 8000b8c:	58020000 	.word	0x58020000
 8000b90:	080081a3 	.word	0x080081a3
 8000b94:	11110000 	.word	0x11110000
 8000b98:	11220000 	.word	0x11220000
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	58000080 	.word	0x58000080
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	e7b7      	b.n	8000b18 <HAL_GPIO_Init+0x284>
 8000ba8:	2308      	movs	r3, #8
 8000baa:	e7b5      	b.n	8000b18 <HAL_GPIO_Init+0x284>

08000bac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000bb0:	4b67      	ldr	r3, [pc, #412]	; (8000d50 <HAL_GPIO_DeInit+0x1a4>)
{
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000bb6:	4298      	cmp	r0, r3
 8000bb8:	d02c      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d028      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc6:	4298      	cmp	r0, r3
 8000bc8:	d024      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d020      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d01c      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bde:	4298      	cmp	r0, r3
 8000be0:	d018      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000be6:	4298      	cmp	r0, r3
 8000be8:	d014      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bee:	4298      	cmp	r0, r3
 8000bf0:	d010      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bf6:	4298      	cmp	r0, r3
 8000bf8:	d00c      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bfe:	4298      	cmp	r0, r3
 8000c00:	d008      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c06:	4298      	cmp	r0, r3
 8000c08:	d004      	beq.n	8000c14 <HAL_GPIO_DeInit+0x68>
 8000c0a:	f240 113f 	movw	r1, #319	; 0x13f
 8000c0e:	4851      	ldr	r0, [pc, #324]	; (8000d54 <HAL_GPIO_DeInit+0x1a8>)
 8000c10:	f005 fe5e 	bl	80068d0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000c14:	b2ab      	uxth	r3, r5
 8000c16:	b113      	cbz	r3, 8000c1e <HAL_GPIO_DeInit+0x72>
 8000c18:	0c2b      	lsrs	r3, r5, #16
 8000c1a:	041b      	lsls	r3, r3, #16
 8000c1c:	b123      	cbz	r3, 8000c28 <HAL_GPIO_DeInit+0x7c>
 8000c1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c22:	484c      	ldr	r0, [pc, #304]	; (8000d54 <HAL_GPIO_DeInit+0x1a8>)
 8000c24:	f005 fe54 	bl	80068d0 <assert_failed>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c28:	2200      	movs	r2, #0
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8000c2a:	4e4b      	ldr	r6, [pc, #300]	; (8000d58 <HAL_GPIO_DeInit+0x1ac>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c2c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8000d5c <HAL_GPIO_DeInit+0x1b0>
 8000c30:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8000d60 <HAL_GPIO_DeInit+0x1b4>
 8000c34:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8000d64 <HAL_GPIO_DeInit+0x1b8>
  while ((GPIO_Pin >> position) != 0x00U)
 8000c38:	fa35 f302 	lsrs.w	r3, r5, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_GPIO_DeInit+0x96>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
    }

    position++;
  }
}
 8000c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8000c42:	2301      	movs	r3, #1
 8000c44:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8000c48:	ea15 010c 	ands.w	r1, r5, ip
 8000c4c:	d06b      	beq.n	8000d26 <HAL_GPIO_DeInit+0x17a>
 8000c4e:	f022 0003 	bic.w	r0, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c52:	f002 0e03 	and.w	lr, r2, #3
 8000c56:	270f      	movs	r7, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c58:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <HAL_GPIO_DeInit+0x1a4>)
 8000c5a:	f100 40b0 	add.w	r0, r0, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c5e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c62:	429c      	cmp	r4, r3
 8000c64:	f500 6080 	add.w	r0, r0, #1024	; 0x400
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c68:	fa07 f70e 	lsl.w	r7, r7, lr
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000c6c:	f8d0 8008 	ldr.w	r8, [r0, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000c70:	ea08 0807 	and.w	r8, r8, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000c74:	d059      	beq.n	8000d2a <HAL_GPIO_DeInit+0x17e>
 8000c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	d057      	beq.n	8000d2e <HAL_GPIO_DeInit+0x182>
 8000c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c82:	429c      	cmp	r4, r3
 8000c84:	d055      	beq.n	8000d32 <HAL_GPIO_DeInit+0x186>
 8000c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	d053      	beq.n	8000d36 <HAL_GPIO_DeInit+0x18a>
 8000c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c92:	429c      	cmp	r4, r3
 8000c94:	d051      	beq.n	8000d3a <HAL_GPIO_DeInit+0x18e>
 8000c96:	454c      	cmp	r4, r9
 8000c98:	d051      	beq.n	8000d3e <HAL_GPIO_DeInit+0x192>
 8000c9a:	4554      	cmp	r4, sl
 8000c9c:	d051      	beq.n	8000d42 <HAL_GPIO_DeInit+0x196>
 8000c9e:	455c      	cmp	r4, fp
 8000ca0:	d051      	beq.n	8000d46 <HAL_GPIO_DeInit+0x19a>
 8000ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	d04f      	beq.n	8000d4a <HAL_GPIO_DeInit+0x19e>
 8000caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cae:	429c      	cmp	r4, r3
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2309      	moveq	r3, #9
 8000cb4:	230a      	movne	r3, #10
 8000cb6:	fa03 f30e 	lsl.w	r3, r3, lr
 8000cba:	4598      	cmp	r8, r3
 8000cbc:	d112      	bne.n	8000ce4 <HAL_GPIO_DeInit+0x138>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000cbe:	6883      	ldr	r3, [r0, #8]
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8000cc0:	43c9      	mvns	r1, r1
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000cc2:	ea23 0707 	bic.w	r7, r3, r7
 8000cc6:	6087      	str	r7, [r0, #8]
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8000cc8:	6833      	ldr	r3, [r6, #0]
 8000cca:	400b      	ands	r3, r1
 8000ccc:	6033      	str	r3, [r6, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8000cce:	6873      	ldr	r3, [r6, #4]
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	6073      	str	r3, [r6, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	4008      	ands	r0, r1
 8000cdc:	6018      	str	r0, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8000cde:	6858      	ldr	r0, [r3, #4]
 8000ce0:	4001      	ands	r1, r0
 8000ce2:	6059      	str	r1, [r3, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	0053      	lsls	r3, r2, #1
 8000ce8:	6821      	ldr	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000cea:	f002 0e07 	and.w	lr, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000cee:	fa00 f303 	lsl.w	r3, r0, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000cf2:	270f      	movs	r7, #15
 8000cf4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000cf8:	4319      	orrs	r1, r3
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cfa:	43db      	mvns	r3, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000cfc:	fa07 f70e 	lsl.w	r7, r7, lr
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000d00:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8000d02:	fa22 f100 	lsr.w	r1, r2, r0
 8000d06:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000d0a:	6a08      	ldr	r0, [r1, #32]
 8000d0c:	ea20 0707 	bic.w	r7, r0, r7
 8000d10:	620f      	str	r7, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d12:	68a1      	ldr	r1, [r4, #8]
 8000d14:	4019      	ands	r1, r3
 8000d16:	60a1      	str	r1, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d18:	6861      	ldr	r1, [r4, #4]
 8000d1a:	ea21 010c 	bic.w	r1, r1, ip
 8000d1e:	6061      	str	r1, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d20:	68e1      	ldr	r1, [r4, #12]
 8000d22:	400b      	ands	r3, r1
 8000d24:	60e3      	str	r3, [r4, #12]
    position++;
 8000d26:	3201      	adds	r2, #1
 8000d28:	e786      	b.n	8000c38 <HAL_GPIO_DeInit+0x8c>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e7c3      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e7c1      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e7bf      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e7bd      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e7bb      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	e7b9      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e7b7      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d46:	2307      	movs	r3, #7
 8000d48:	e7b5      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	e7b3      	b.n	8000cb6 <HAL_GPIO_DeInit+0x10a>
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	080081a3 	.word	0x080081a3
 8000d58:	58000080 	.word	0x58000080
 8000d5c:	58021400 	.word	0x58021400
 8000d60:	58021800 	.word	0x58021800
 8000d64:	58021c00 	.word	0x58021c00

08000d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	b921      	cbnz	r1, 8000d7a <HAL_GPIO_ReadPin+0x12>
 8000d70:	f240 118d 	movw	r1, #397	; 0x18d
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <HAL_GPIO_ReadPin+0x20>)
 8000d76:	f005 fdab 	bl	80068d0 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000d7a:	692b      	ldr	r3, [r5, #16]
 8000d7c:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d7e:	bf14      	ite	ne
 8000d80:	2001      	movne	r0, #1
 8000d82:	2000      	moveq	r0, #0
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop
 8000d88:	080081a3 	.word	0x080081a3

08000d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	4605      	mov	r5, r0
 8000d90:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d92:	460c      	mov	r4, r1
 8000d94:	b921      	cbnz	r1, 8000da0 <HAL_GPIO_WritePin+0x14>
 8000d96:	f240 11ad 	movw	r1, #429	; 0x1ad
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <HAL_GPIO_WritePin+0x30>)
 8000d9c:	f005 fd98 	bl	80068d0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000da0:	2e01      	cmp	r6, #1
 8000da2:	d906      	bls.n	8000db2 <HAL_GPIO_WritePin+0x26>
 8000da4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <HAL_GPIO_WritePin+0x30>)
 8000daa:	f005 fd91 	bl	80068d0 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dae:	61ac      	str	r4, [r5, #24]
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d1fb      	bne.n	8000dae <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000db6:	0424      	lsls	r4, r4, #16
 8000db8:	e7f9      	b.n	8000dae <HAL_GPIO_WritePin+0x22>
 8000dba:	bf00      	nop
 8000dbc:	080081a3 	.word	0x080081a3

08000dc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	b921      	cbnz	r1, 8000dd2 <HAL_GPIO_TogglePin+0x12>
 8000dc8:	f240 11c3 	movw	r1, #451	; 0x1c3
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <HAL_GPIO_TogglePin+0x20>)
 8000dce:	f005 fd7f 	bl	80068d0 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000dd2:	696b      	ldr	r3, [r5, #20]
 8000dd4:	ea34 0303 	bics.w	r3, r4, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dd8:	bf08      	it	eq
 8000dda:	0424      	lsleq	r4, r4, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ddc:	61ac      	str	r4, [r5, #24]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	080081a3 	.word	0x080081a3

08000de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000de6:	4604      	mov	r4, r0
{
 8000de8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d039      	beq.n	8000e62 <HAL_PCD_Init+0x7e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8000dee:	6803      	ldr	r3, [r0, #0]
 8000df0:	4a49      	ldr	r2, [pc, #292]	; (8000f18 <HAL_PCD_Init+0x134>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_PCD_Init+0x22>
 8000df6:	f5a2 2280 	sub.w	r2, r2, #262144	; 0x40000
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <HAL_PCD_Init+0x22>
 8000dfe:	2187      	movs	r1, #135	; 0x87
 8000e00:	4846      	ldr	r0, [pc, #280]	; (8000f1c <HAL_PCD_Init+0x138>)
 8000e02:	f005 fd65 	bl	80068d0 <assert_failed>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e06:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000e0a:	6825      	ldr	r5, [r4, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e10:	b923      	cbnz	r3, 8000e1c <HAL_PCD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e12:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e16:	4620      	mov	r0, r4
 8000e18:	f005 fdfe 	bl	8006a18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e1c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e1e:	466e      	mov	r6, sp
 8000e20:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e22:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8000e28:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e2a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000e2e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000e32:	bf08      	it	eq
 8000e34:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000e36:	f003 fe4e 	bl	8004ad6 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e46:	4625      	mov	r5, r4
 8000e48:	e886 0003 	stmia.w	r6, {r0, r1}
 8000e4c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000e50:	f855 0b10 	ldr.w	r0, [r5], #16
 8000e54:	f003 fdfe 	bl	8004a54 <USB_CoreInit>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	b120      	cbz	r0, 8000e66 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000e62:	2501      	movs	r5, #1
 8000e64:	e054      	b.n	8000f10 <HAL_PCD_Init+0x12c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e66:	4601      	mov	r1, r0
 8000e68:	6820      	ldr	r0, [r4, #0]
 8000e6a:	f003 fe3a 	bl	8004ae2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e74:	261c      	movs	r6, #28
 8000e76:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	b2c2      	uxtb	r2, r0
 8000e7e:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e80:	4596      	cmp	lr, r2
 8000e82:	d81b      	bhi.n	8000ebc <HAL_PCD_Init+0xd8>
 8000e84:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e86:	261c      	movs	r6, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	b2d8      	uxtb	r0, r3
 8000e8c:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8e:	4586      	cmp	lr, r0
 8000e90:	d822      	bhi.n	8000ed8 <HAL_PCD_Init+0xf4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e94:	466e      	mov	r6, sp
 8000e96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ea0:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ea4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ea8:	6820      	ldr	r0, [r4, #0]
 8000eaa:	f003 fe5b 	bl	8004b64 <USB_DevInit>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	4605      	mov	r5, r0
 8000eb2:	b300      	cbz	r0, 8000ef6 <HAL_PCD_Init+0x112>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000eba:	e7d2      	b.n	8000e62 <HAL_PCD_Init+0x7e>
    hpcd->IN_ep[i].is_in = 1U;
 8000ebc:	fb06 4302 	mla	r3, r6, r2, r4
 8000ec0:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ec8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ecc:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed0:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ed2:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ed4:	6519      	str	r1, [r3, #80]	; 0x50
 8000ed6:	e7d1      	b.n	8000e7c <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ed8:	fb06 4200 	mla	r2, r6, r0, r4
 8000edc:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000ee0:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ee4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ee8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000eec:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ef0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000ef4:	e7c9      	b.n	8000e8a <HAL_PCD_Init+0xa6>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000ef6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000efa:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d102      	bne.n	8000f0a <HAL_PCD_Init+0x126>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f04:	4620      	mov	r0, r4
 8000f06:	f000 f80b 	bl	8000f20 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f0a:	6820      	ldr	r0, [r4, #0]
 8000f0c:	f003 feea 	bl	8004ce4 <USB_DevDisconnect>

  return HAL_OK;
}
 8000f10:	4628      	mov	r0, r5
 8000f12:	b00b      	add	sp, #44	; 0x2c
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40080000 	.word	0x40080000
 8000f1c:	080081dc 	.word	0x080081dc

08000f20 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000f20:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f22:	6802      	ldr	r2, [r0, #0]
{
 8000f24:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000f26:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000f30:	6993      	ldr	r3, [r2, #24]
 8000f32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f36:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000f38:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	f043 0303 	orr.w	r3, r3, #3
 8000f42:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000f48:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8000f4a:	1e43      	subs	r3, r0, #1
{
 8000f4c:	4604      	mov	r4, r0
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d903      	bls.n	8000f5a <HAL_PWREx_ConfigSupply+0x12>
 8000f52:	21ef      	movs	r1, #239	; 0xef
 8000f54:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <HAL_PWREx_ConfigSupply+0x58>)
 8000f56:	f005 fcbb 	bl	80068d0 <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_PWREx_ConfigSupply+0x5c>)
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	f012 0f04 	tst.w	r2, #4
 8000f62:	461a      	mov	r2, r3
 8000f64:	d104      	bne.n	8000f70 <HAL_PWREx_ConfigSupply+0x28>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	429c      	cmp	r4, r3
 8000f6e:	d115      	bne.n	8000f9c <HAL_PWREx_ConfigSupply+0x54>
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f70:	68d0      	ldr	r0, [r2, #12]
 8000f72:	f020 0007 	bic.w	r0, r0, #7
 8000f76:	4320      	orrs	r0, r4

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000f78:	4c0a      	ldr	r4, [pc, #40]	; (8000fa4 <HAL_PWREx_ConfigSupply+0x5c>)
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f7a:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick();
 8000f7c:	f7ff fbf0 	bl	8000760 <HAL_GetTick>
 8000f80:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	049b      	lsls	r3, r3, #18
 8000f86:	d501      	bpl.n	8000f8c <HAL_PWREx_ConfigSupply+0x44>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8000f88:	2000      	movs	r0, #0
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8000f8c:	f7ff fbe8 	bl	8000760 <HAL_GetTick>
 8000f90:	1b40      	subs	r0, r0, r5
 8000f92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f96:	d9f4      	bls.n	8000f82 <HAL_PWREx_ConfigSupply+0x3a>
      return HAL_TIMEOUT;
 8000f98:	2003      	movs	r0, #3
}
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	bd38      	pop	{r3, r4, r5, pc}
 8000fa0:	08008214 	.word	0x08008214
 8000fa4:	58024800 	.word	0x58024800

08000fa8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8000fa8:	4a02      	ldr	r2, [pc, #8]	; (8000fb4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8000faa:	68d3      	ldr	r3, [r2, #12]
 8000fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb0:	60d3      	str	r3, [r2, #12]
 8000fb2:	4770      	bx	lr
 8000fb4:	58024800 	.word	0x58024800

08000fb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fba:	4604      	mov	r4, r0
 8000fbc:	b908      	cbnz	r0, 8000fc2 <HAL_RCC_OscConfig+0xa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000fc2:	6803      	ldr	r3, [r0, #0]
 8000fc4:	b133      	cbz	r3, 8000fd4 <HAL_RCC_OscConfig+0x1c>
 8000fc6:	069d      	lsls	r5, r3, #26
 8000fc8:	d104      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1c>
 8000fca:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000fce:	48aa      	ldr	r0, [pc, #680]	; (8001278 <HAL_RCC_OscConfig+0x2c0>)
 8000fd0:	f005 fc7e 	bl	80068d0 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	07d8      	lsls	r0, r3, #31
 8000fd8:	d455      	bmi.n	8001086 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	0799      	lsls	r1, r3, #30
 8000fde:	f100 80af 	bmi.w	8001140 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	06da      	lsls	r2, r3, #27
 8000fe6:	d534      	bpl.n	8001052 <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8000fe8:	69e3      	ldr	r3, [r4, #28]
 8000fea:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8000fee:	d004      	beq.n	8000ffa <HAL_RCC_OscConfig+0x42>
 8000ff0:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8000ff4:	48a0      	ldr	r0, [pc, #640]	; (8001278 <HAL_RCC_OscConfig+0x2c0>)
 8000ff6:	f005 fc6b 	bl	80068d0 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8000ffa:	6a23      	ldr	r3, [r4, #32]
 8000ffc:	2b1f      	cmp	r3, #31
 8000ffe:	d904      	bls.n	800100a <HAL_RCC_OscConfig+0x52>
 8001000:	f240 11fb 	movw	r1, #507	; 0x1fb
 8001004:	489c      	ldr	r0, [pc, #624]	; (8001278 <HAL_RCC_OscConfig+0x2c0>)
 8001006:	f005 fc63 	bl	80068d0 <assert_failed>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100a:	4b9c      	ldr	r3, [pc, #624]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
 800100c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800100e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001010:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001014:	2a08      	cmp	r2, #8
 8001016:	d007      	beq.n	8001028 <HAL_RCC_OscConfig+0x70>
 8001018:	2a18      	cmp	r2, #24
 800101a:	f040 8104 	bne.w	8001226 <HAL_RCC_OscConfig+0x26e>
 800101e:	f001 0203 	and.w	r2, r1, #3
 8001022:	2a01      	cmp	r2, #1
 8001024:	f040 80ff 	bne.w	8001226 <HAL_RCC_OscConfig+0x26e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	d502      	bpl.n	8001034 <HAL_RCC_OscConfig+0x7c>
 800102e:	69e3      	ldr	r3, [r4, #28]
 8001030:	2b80      	cmp	r3, #128	; 0x80
 8001032:	d1c4      	bne.n	8000fbe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001034:	f7ff fbac 	bl	8000790 <HAL_GetREVID>
 8001038:	f241 0303 	movw	r3, #4099	; 0x1003
 800103c:	4a8f      	ldr	r2, [pc, #572]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
 800103e:	4298      	cmp	r0, r3
 8001040:	6a21      	ldr	r1, [r4, #32]
 8001042:	f200 80e9 	bhi.w	8001218 <HAL_RCC_OscConfig+0x260>
 8001046:	6853      	ldr	r3, [r2, #4]
 8001048:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800104c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8001050:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	0719      	lsls	r1, r3, #28
 8001056:	f100 8126 	bmi.w	80012a6 <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	069a      	lsls	r2, r3, #26
 800105e:	f100 814f 	bmi.w	8001300 <HAL_RCC_OscConfig+0x348>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	075d      	lsls	r5, r3, #29
 8001066:	f100 8178 	bmi.w	800135a <HAL_RCC_OscConfig+0x3a2>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800106a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800106c:	2b02      	cmp	r3, #2
 800106e:	d904      	bls.n	800107a <HAL_RCC_OscConfig+0xc2>
 8001070:	f240 21c3 	movw	r1, #707	; 0x2c3
 8001074:	4880      	ldr	r0, [pc, #512]	; (8001278 <HAL_RCC_OscConfig+0x2c0>)
 8001076:	f005 fc2b 	bl	80068d0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800107a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800107c:	2a00      	cmp	r2, #0
 800107e:	f040 81c5 	bne.w	800140c <HAL_RCC_OscConfig+0x454>
    }
  }
  return HAL_OK;
 8001082:	2000      	movs	r0, #0
 8001084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800108c:	d007      	beq.n	800109e <HAL_RCC_OscConfig+0xe6>
 800108e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001092:	d004      	beq.n	800109e <HAL_RCC_OscConfig+0xe6>
 8001094:	f240 1175 	movw	r1, #373	; 0x175
 8001098:	4877      	ldr	r0, [pc, #476]	; (8001278 <HAL_RCC_OscConfig+0x2c0>)
 800109a:	f005 fc19 	bl	80068d0 <assert_failed>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800109e:	4b77      	ldr	r3, [pc, #476]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
 80010a0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010a8:	2a10      	cmp	r2, #16
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_OscConfig+0x100>
 80010ac:	2a18      	cmp	r2, #24
 80010ae:	d10a      	bne.n	80010c6 <HAL_RCC_OscConfig+0x10e>
 80010b0:	f001 0203 	and.w	r2, r1, #3
 80010b4:	2a02      	cmp	r2, #2
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	039a      	lsls	r2, r3, #14
 80010bc:	d58d      	bpl.n	8000fda <HAL_RCC_OscConfig+0x22>
 80010be:	6863      	ldr	r3, [r4, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d18a      	bne.n	8000fda <HAL_RCC_OscConfig+0x22>
 80010c4:	e77b      	b.n	8000fbe <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	4d6c      	ldr	r5, [pc, #432]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
 80010ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ce:	d112      	bne.n	80010f6 <HAL_RCC_OscConfig+0x13e>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010d8:	f7ff fb42 	bl	8000760 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010dc:	4d67      	ldr	r5, [pc, #412]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 80010de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	039b      	lsls	r3, r3, #14
 80010e4:	f53f af79 	bmi.w	8000fda <HAL_RCC_OscConfig+0x22>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fb3a 	bl	8000760 <HAL_GetTick>
 80010ec:	1b80      	subs	r0, r0, r6
 80010ee:	2864      	cmp	r0, #100	; 0x64
 80010f0:	d9f6      	bls.n	80010e0 <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
 80010f2:	2003      	movs	r0, #3
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	b9a3      	cbnz	r3, 8001122 <HAL_RCC_OscConfig+0x16a>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fe:	602b      	str	r3, [r5, #0]
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001108:	f7ff fb2a 	bl	8000760 <HAL_GetTick>
 800110c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	039f      	lsls	r7, r3, #14
 8001112:	f57f af62 	bpl.w	8000fda <HAL_RCC_OscConfig+0x22>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001116:	f7ff fb23 	bl	8000760 <HAL_GetTick>
 800111a:	1b80      	subs	r0, r0, r6
 800111c:	2864      	cmp	r0, #100	; 0x64
 800111e:	d9f6      	bls.n	800110e <HAL_RCC_OscConfig+0x156>
 8001120:	e7e7      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	d103      	bne.n	8001132 <HAL_RCC_OscConfig+0x17a>
 800112a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112e:	602b      	str	r3, [r5, #0]
 8001130:	e7ce      	b.n	80010d0 <HAL_RCC_OscConfig+0x118>
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113e:	e7ca      	b.n	80010d6 <HAL_RCC_OscConfig+0x11e>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001140:	68e2      	ldr	r2, [r4, #12]
 8001142:	2a19      	cmp	r2, #25
 8001144:	d803      	bhi.n	800114e <HAL_RCC_OscConfig+0x196>
 8001146:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <HAL_RCC_OscConfig+0x2c8>)
 8001148:	40d3      	lsrs	r3, r2
 800114a:	07d8      	lsls	r0, r3, #31
 800114c:	d404      	bmi.n	8001158 <HAL_RCC_OscConfig+0x1a0>
 800114e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001152:	4849      	ldr	r0, [pc, #292]	; (8001278 <HAL_RCC_OscConfig+0x2c0>)
 8001154:	f005 fbbc 	bl	80068d0 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001158:	6923      	ldr	r3, [r4, #16]
 800115a:	2b7f      	cmp	r3, #127	; 0x7f
 800115c:	d904      	bls.n	8001168 <HAL_RCC_OscConfig+0x1b0>
 800115e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001162:	4845      	ldr	r0, [pc, #276]	; (8001278 <HAL_RCC_OscConfig+0x2c0>)
 8001164:	f005 fbb4 	bl	80068d0 <assert_failed>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001168:	4b44      	ldr	r3, [pc, #272]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
 800116a:	68e2      	ldr	r2, [r4, #12]
 800116c:	6919      	ldr	r1, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800116e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001170:	f011 0138 	ands.w	r1, r1, #56	; 0x38
 8001174:	d003      	beq.n	800117e <HAL_RCC_OscConfig+0x1c6>
 8001176:	2918      	cmp	r1, #24
 8001178:	d12b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x21a>
 800117a:	0781      	lsls	r1, r0, #30
 800117c:	d129      	bne.n	80011d2 <HAL_RCC_OscConfig+0x21a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	075b      	lsls	r3, r3, #29
 8001182:	d502      	bpl.n	800118a <HAL_RCC_OscConfig+0x1d2>
 8001184:	2a00      	cmp	r2, #0
 8001186:	f43f af1a 	beq.w	8000fbe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800118a:	4d3c      	ldr	r5, [pc, #240]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	f023 0319 	bic.w	r3, r3, #25
 8001192:	4313      	orrs	r3, r2
 8001194:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001196:	f7ff fae3 	bl	8000760 <HAL_GetTick>
 800119a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	075f      	lsls	r7, r3, #29
 80011a0:	d511      	bpl.n	80011c6 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	f7ff faf5 	bl	8000790 <HAL_GetREVID>
 80011a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80011aa:	6922      	ldr	r2, [r4, #16]
 80011ac:	4298      	cmp	r0, r3
 80011ae:	686b      	ldr	r3, [r5, #4]
 80011b0:	bf95      	itete	ls
 80011b2:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 80011b6:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 80011ba:	ea43 3302 	orrls.w	r3, r3, r2, lsl #12
 80011be:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
 80011c2:	606b      	str	r3, [r5, #4]
 80011c4:	e70d      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff facb 	bl	8000760 <HAL_GetTick>
 80011ca:	1b80      	subs	r0, r0, r6
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d9e5      	bls.n	800119c <HAL_RCC_OscConfig+0x1e4>
 80011d0:	e78f      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
 80011d2:	4d2a      	ldr	r5, [pc, #168]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011d4:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d6:	b17a      	cbz	r2, 80011f8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011d8:	f023 0319 	bic.w	r3, r3, #25
 80011dc:	4313      	orrs	r3, r2
 80011de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011e0:	f7ff fabe 	bl	8000760 <HAL_GetTick>
 80011e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011e6:	682b      	ldr	r3, [r5, #0]
 80011e8:	0758      	lsls	r0, r3, #29
 80011ea:	d4da      	bmi.n	80011a2 <HAL_RCC_OscConfig+0x1ea>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fab8 	bl	8000760 <HAL_GetTick>
 80011f0:	1b80      	subs	r0, r0, r6
 80011f2:	2802      	cmp	r0, #2
 80011f4:	d9f7      	bls.n	80011e6 <HAL_RCC_OscConfig+0x22e>
 80011f6:	e77c      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011fe:	f7ff faaf 	bl	8000760 <HAL_GetTick>
 8001202:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	0759      	lsls	r1, r3, #29
 8001208:	f57f aeeb 	bpl.w	8000fe2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff faa8 	bl	8000760 <HAL_GetTick>
 8001210:	1b80      	subs	r0, r0, r6
 8001212:	2802      	cmp	r0, #2
 8001214:	d9f6      	bls.n	8001204 <HAL_RCC_OscConfig+0x24c>
 8001216:	e76c      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001218:	68d3      	ldr	r3, [r2, #12]
 800121a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800121e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001222:	60d3      	str	r3, [r2, #12]
 8001224:	e715      	b.n	8001052 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001226:	69e3      	ldr	r3, [r4, #28]
 8001228:	4d14      	ldr	r5, [pc, #80]	; (800127c <HAL_RCC_OscConfig+0x2c4>)
 800122a:	b35b      	cbz	r3, 8001284 <HAL_RCC_OscConfig+0x2cc>
        __HAL_RCC_CSI_ENABLE();
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001232:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001234:	f7ff fa94 	bl	8000760 <HAL_GetTick>
 8001238:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	05df      	lsls	r7, r3, #23
 800123e:	d50d      	bpl.n	800125c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001240:	f7ff faa6 	bl	8000790 <HAL_GetREVID>
 8001244:	f241 0303 	movw	r3, #4099	; 0x1003
 8001248:	6a22      	ldr	r2, [r4, #32]
 800124a:	4298      	cmp	r0, r3
 800124c:	d80c      	bhi.n	8001268 <HAL_RCC_OscConfig+0x2b0>
 800124e:	686b      	ldr	r3, [r5, #4]
 8001250:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001254:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001258:	606b      	str	r3, [r5, #4]
 800125a:	e6fa      	b.n	8001052 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800125c:	f7ff fa80 	bl	8000760 <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9e9      	bls.n	800123a <HAL_RCC_OscConfig+0x282>
 8001266:	e744      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001268:	68eb      	ldr	r3, [r5, #12]
 800126a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800126e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001272:	60eb      	str	r3, [r5, #12]
 8001274:	e6ed      	b.n	8001052 <HAL_RCC_OscConfig+0x9a>
 8001276:	bf00      	nop
 8001278:	0800824f 	.word	0x0800824f
 800127c:	58024400 	.word	0x58024400
 8001280:	02020203 	.word	0x02020203
        __HAL_RCC_CSI_DISABLE();
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800128a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800128c:	f7ff fa68 	bl	8000760 <HAL_GetTick>
 8001290:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	05d8      	lsls	r0, r3, #23
 8001296:	f57f aedc 	bpl.w	8001052 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800129a:	f7ff fa61 	bl	8000760 <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d9f6      	bls.n	8001292 <HAL_RCC_OscConfig+0x2da>
 80012a4:	e725      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80012a6:	6963      	ldr	r3, [r4, #20]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d904      	bls.n	80012b6 <HAL_RCC_OscConfig+0x2fe>
 80012ac:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80012b0:	48b1      	ldr	r0, [pc, #708]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 80012b2:	f005 fb0d 	bl	80068d0 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012b6:	6963      	ldr	r3, [r4, #20]
 80012b8:	4db0      	ldr	r5, [pc, #704]	; (800157c <HAL_RCC_OscConfig+0x5c4>)
 80012ba:	b183      	cbz	r3, 80012de <HAL_RCC_OscConfig+0x326>
      __HAL_RCC_LSI_ENABLE();
 80012bc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012c4:	f7ff fa4c 	bl	8000760 <HAL_GetTick>
 80012c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012cc:	079b      	lsls	r3, r3, #30
 80012ce:	f53f aec4 	bmi.w	800105a <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fa45 	bl	8000760 <HAL_GetTick>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	2802      	cmp	r0, #2
 80012da:	d9f6      	bls.n	80012ca <HAL_RCC_OscConfig+0x312>
 80012dc:	e709      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 80012de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012e6:	f7ff fa3b 	bl	8000760 <HAL_GetTick>
 80012ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012ee:	079f      	lsls	r7, r3, #30
 80012f0:	f57f aeb3 	bpl.w	800105a <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fa34 	bl	8000760 <HAL_GetTick>
 80012f8:	1b80      	subs	r0, r0, r6
 80012fa:	2802      	cmp	r0, #2
 80012fc:	d9f6      	bls.n	80012ec <HAL_RCC_OscConfig+0x334>
 80012fe:	e6f8      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8001300:	69a3      	ldr	r3, [r4, #24]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d904      	bls.n	8001310 <HAL_RCC_OscConfig+0x358>
 8001306:	f240 2167 	movw	r1, #615	; 0x267
 800130a:	489b      	ldr	r0, [pc, #620]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 800130c:	f005 fae0 	bl	80068d0 <assert_failed>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001310:	69a3      	ldr	r3, [r4, #24]
 8001312:	4d9a      	ldr	r5, [pc, #616]	; (800157c <HAL_RCC_OscConfig+0x5c4>)
 8001314:	b183      	cbz	r3, 8001338 <HAL_RCC_OscConfig+0x380>
      __HAL_RCC_HSI48_ENABLE();
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800131c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800131e:	f7ff fa1f 	bl	8000760 <HAL_GetTick>
 8001322:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	0498      	lsls	r0, r3, #18
 8001328:	f53f ae9b 	bmi.w	8001062 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800132c:	f7ff fa18 	bl	8000760 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	2802      	cmp	r0, #2
 8001334:	d9f6      	bls.n	8001324 <HAL_RCC_OscConfig+0x36c>
 8001336:	e6dc      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSI48_DISABLE();
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001340:	f7ff fa0e 	bl	8000760 <HAL_GetTick>
 8001344:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	0499      	lsls	r1, r3, #18
 800134a:	f57f ae8a 	bpl.w	8001062 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800134e:	f7ff fa07 	bl	8000760 <HAL_GetTick>
 8001352:	1b80      	subs	r0, r0, r6
 8001354:	2802      	cmp	r0, #2
 8001356:	d9f6      	bls.n	8001346 <HAL_RCC_OscConfig+0x38e>
 8001358:	e6cb      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800135a:	68a3      	ldr	r3, [r4, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d906      	bls.n	800136e <HAL_RCC_OscConfig+0x3b6>
 8001360:	2b05      	cmp	r3, #5
 8001362:	d004      	beq.n	800136e <HAL_RCC_OscConfig+0x3b6>
 8001364:	f240 2191 	movw	r1, #657	; 0x291
 8001368:	4883      	ldr	r0, [pc, #524]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 800136a:	f005 fab1 	bl	80068d0 <assert_failed>
    PWR->CR1 |= PWR_CR1_DBP;
 800136e:	4d84      	ldr	r5, [pc, #528]	; (8001580 <HAL_RCC_OscConfig+0x5c8>)
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001378:	f7ff f9f2 	bl	8000760 <HAL_GetTick>
 800137c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800137e:	682b      	ldr	r3, [r5, #0]
 8001380:	05da      	lsls	r2, r3, #23
 8001382:	d517      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x3fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	68a3      	ldr	r3, [r4, #8]
 8001386:	4d7d      	ldr	r5, [pc, #500]	; (800157c <HAL_RCC_OscConfig+0x5c4>)
 8001388:	2b01      	cmp	r3, #1
 800138a:	d119      	bne.n	80013c0 <HAL_RCC_OscConfig+0x408>
 800138c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001398:	f7ff f9e2 	bl	8000760 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800139c:	4e77      	ldr	r6, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x5c4>)
      tickstart = HAL_GetTick();
 800139e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013a0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80013a2:	079b      	lsls	r3, r3, #30
 80013a4:	f53f ae61 	bmi.w	800106a <HAL_RCC_OscConfig+0xb2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a8:	f7ff f9da 	bl	8000760 <HAL_GetTick>
 80013ac:	1bc0      	subs	r0, r0, r7
 80013ae:	42a8      	cmp	r0, r5
 80013b0:	d9f6      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3e8>
 80013b2:	e69e      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013b4:	f7ff f9d4 	bl	8000760 <HAL_GetTick>
 80013b8:	1b80      	subs	r0, r0, r6
 80013ba:	2864      	cmp	r0, #100	; 0x64
 80013bc:	d9df      	bls.n	800137e <HAL_RCC_OscConfig+0x3c6>
 80013be:	e698      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	b9b3      	cbnz	r3, 80013f0 <HAL_RCC_OscConfig+0x438>
 80013c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c4:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	672b      	str	r3, [r5, #112]	; 0x70
 80013ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013d6:	f7ff f9c3 	bl	8000760 <HAL_GetTick>
 80013da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013de:	0798      	lsls	r0, r3, #30
 80013e0:	f57f ae43 	bpl.w	800106a <HAL_RCC_OscConfig+0xb2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff f9bc 	bl	8000760 <HAL_GetTick>
 80013e8:	1b80      	subs	r0, r0, r6
 80013ea:	42b8      	cmp	r0, r7
 80013ec:	d9f6      	bls.n	80013dc <HAL_RCC_OscConfig+0x424>
 80013ee:	e680      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f4:	d103      	bne.n	80013fe <HAL_RCC_OscConfig+0x446>
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	672b      	str	r3, [r5, #112]	; 0x70
 80013fc:	e7c6      	b.n	800138c <HAL_RCC_OscConfig+0x3d4>
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	672b      	str	r3, [r5, #112]	; 0x70
 8001404:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	e7c2      	b.n	8001392 <HAL_RCC_OscConfig+0x3da>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800140c:	4d5b      	ldr	r5, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x5c4>)
 800140e:	692b      	ldr	r3, [r5, #16]
 8001410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001414:	2b18      	cmp	r3, #24
 8001416:	f43f add2 	beq.w	8000fbe <HAL_RCC_OscConfig+0x6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	2a02      	cmp	r2, #2
 800141c:	f040 80b2 	bne.w	8001584 <HAL_RCC_OscConfig+0x5cc>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001420:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001422:	2b03      	cmp	r3, #3
 8001424:	d904      	bls.n	8001430 <HAL_RCC_OscConfig+0x478>
 8001426:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800142a:	4853      	ldr	r0, [pc, #332]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 800142c:	f005 fa50 	bl	80068d0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001432:	3b01      	subs	r3, #1
 8001434:	2b3e      	cmp	r3, #62	; 0x3e
 8001436:	d904      	bls.n	8001442 <HAL_RCC_OscConfig+0x48a>
 8001438:	f240 21cd 	movw	r1, #717	; 0x2cd
 800143c:	484e      	ldr	r0, [pc, #312]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 800143e:	f005 fa47 	bl	80068d0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001444:	3b04      	subs	r3, #4
 8001446:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 800144a:	d904      	bls.n	8001456 <HAL_RCC_OscConfig+0x49e>
 800144c:	f240 21ce 	movw	r1, #718	; 0x2ce
 8001450:	4849      	ldr	r0, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 8001452:	f005 fa3d 	bl	80068d0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001458:	3b01      	subs	r3, #1
 800145a:	2b7f      	cmp	r3, #127	; 0x7f
 800145c:	d904      	bls.n	8001468 <HAL_RCC_OscConfig+0x4b0>
 800145e:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001462:	4845      	ldr	r0, [pc, #276]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 8001464:	f005 fa34 	bl	80068d0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800146a:	3b01      	subs	r3, #1
 800146c:	2b7f      	cmp	r3, #127	; 0x7f
 800146e:	d904      	bls.n	800147a <HAL_RCC_OscConfig+0x4c2>
 8001470:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001474:	4840      	ldr	r0, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 8001476:	f005 fa2b 	bl	80068d0 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800147a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800147c:	3b01      	subs	r3, #1
 800147e:	2b7f      	cmp	r3, #127	; 0x7f
 8001480:	d904      	bls.n	800148c <HAL_RCC_OscConfig+0x4d4>
 8001482:	f240 21d1 	movw	r1, #721	; 0x2d1
 8001486:	483c      	ldr	r0, [pc, #240]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 8001488:	f005 fa22 	bl	80068d0 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 800148c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800148e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001492:	d304      	bcc.n	800149e <HAL_RCC_OscConfig+0x4e6>
 8001494:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001498:	4837      	ldr	r0, [pc, #220]	; (8001578 <HAL_RCC_OscConfig+0x5c0>)
 800149a:	f005 fa19 	bl	80068d0 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800149e:	4d37      	ldr	r5, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x5c4>)
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014a8:	f7ff f95a 	bl	8000760 <HAL_GetTick>
 80014ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	0199      	lsls	r1, r3, #6
 80014b2:	d45b      	bmi.n	800156c <HAL_RCC_OscConfig+0x5b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014b8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80014bc:	f023 0303 	bic.w	r3, r3, #3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014c4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80014c8:	62ab      	str	r3, [r5, #40]	; 0x28
 80014ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014ce:	3b01      	subs	r3, #1
 80014d0:	3a01      	subs	r2, #1
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	0412      	lsls	r2, r2, #16
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80014dc:	4313      	orrs	r3, r2
 80014de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014e0:	3a01      	subs	r2, #1
 80014e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014e6:	4313      	orrs	r3, r2
 80014e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80014ea:	3a01      	subs	r2, #1
 80014ec:	0612      	lsls	r2, r2, #24
 80014ee:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80014f2:	4313      	orrs	r3, r2
 80014f4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80014f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001500:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001506:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800150a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800150e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001510:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001512:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001514:	f023 030c 	bic.w	r3, r3, #12
 8001518:	4313      	orrs	r3, r2
 800151a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800151c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800151e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001520:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001524:	4c15      	ldr	r4, [pc, #84]	; (800157c <HAL_RCC_OscConfig+0x5c4>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001526:	4313      	orrs	r3, r2
 8001528:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800152a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001532:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800153a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001542:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001550:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001552:	f7ff f905 	bl	8000760 <HAL_GetTick>
 8001556:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	019a      	lsls	r2, r3, #6
 800155c:	f53f ad91 	bmi.w	8001082 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff f8fe 	bl	8000760 <HAL_GetTick>
 8001564:	1b40      	subs	r0, r0, r5
 8001566:	2802      	cmp	r0, #2
 8001568:	d9f6      	bls.n	8001558 <HAL_RCC_OscConfig+0x5a0>
 800156a:	e5c2      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff f8f8 	bl	8000760 <HAL_GetTick>
 8001570:	1b80      	subs	r0, r0, r6
 8001572:	2802      	cmp	r0, #2
 8001574:	d99b      	bls.n	80014ae <HAL_RCC_OscConfig+0x4f6>
 8001576:	e5bc      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
 8001578:	0800824f 	.word	0x0800824f
 800157c:	58024400 	.word	0x58024400
 8001580:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800158c:	f7ff f8e8 	bl	8000760 <HAL_GetTick>
 8001590:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	f57f ad74 	bpl.w	8001082 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff f8e1 	bl	8000760 <HAL_GetTick>
 800159e:	1b00      	subs	r0, r0, r4
 80015a0:	2802      	cmp	r0, #2
 80015a2:	d9f6      	bls.n	8001592 <HAL_RCC_OscConfig+0x5da>
 80015a4:	e5a5      	b.n	80010f2 <HAL_RCC_OscConfig+0x13a>
 80015a6:	bf00      	nop

080015a8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a8:	4b48      	ldr	r3, [pc, #288]	; (80016cc <HAL_RCC_GetSysClockFreq+0x124>)
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80015b0:	2a10      	cmp	r2, #16
{
 80015b2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b4:	d00e      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80015b6:	2a18      	cmp	r2, #24
 80015b8:	d00e      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x30>
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	f040 8083 	bne.w	80016c6 <HAL_RCC_GetSysClockFreq+0x11e>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4843      	ldr	r0, [pc, #268]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80015c4:	f012 0f20 	tst.w	r2, #32
 80015c8:	d07e      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x120>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80015d0:	40d8      	lsrs	r0, r3
 80015d2:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80015d4:	483f      	ldr	r0, [pc, #252]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80015d6:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015da:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015de:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015e2:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d06f      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x120>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015e8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015ec:	f002 0201 	and.w	r2, r2, #1
 80015f0:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80016d8 <HAL_RCC_GetSysClockFreq+0x130>
 80015f4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015f8:	4362      	muls	r2, r4
 80015fa:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015fe:	f001 0203 	and.w	r2, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001602:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    {
      switch (pllsource)
 8001606:	2a01      	cmp	r2, #1
 8001608:	ee07 0a90 	vmov	s15, r0
 800160c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001610:	d002      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x70>
 8001612:	d30f      	bcc.n	8001634 <HAL_RCC_GetSysClockFreq+0x8c>
 8001614:	2a02      	cmp	r2, #2
 8001616:	d048      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x102>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	eee6 7a05 	vfma.f32	s15, s12, s10
 800162a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80016dc <HAL_RCC_GetSysClockFreq+0x134>
 800162e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001632:	e037      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0xfc>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	0692      	lsls	r2, r2, #26
 8001638:	d527      	bpl.n	800168a <HAL_RCC_GetSysClockFreq+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x128>)
 800163e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001644:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800164a:	ee07 2a90 	vmov	s15, r2
 800164e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001652:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	eee6 7a05 	vfma.f32	s15, s12, s10
 8001662:	ee77 7aa5 	vadd.f32	s15, s15, s11
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001672:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001674:	ee07 3a10 	vmov	s14, r3
 8001678:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800167c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001680:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001684:	ee17 0a90 	vmov	r0, s15
 8001688:	bd10      	pop	{r4, pc}
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001698:	eee6 7a05 	vfma.f32	s15, s12, s10
 800169c:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80016e0 <HAL_RCC_GetSysClockFreq+0x138>
 80016a0:	ee77 7aa5 	vadd.f32	s15, s15, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80016a8:	e7dd      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0xbe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b8:	eee6 7a05 	vfma.f32	s15, s12, s10
 80016bc:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80016e4 <HAL_RCC_GetSysClockFreq+0x13c>
 80016c0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80016c4:	e7ee      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0xfc>
    sysclockfreq = CSI_VALUE;
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x140>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80016c8:	bd10      	pop	{r4, pc}
 80016ca:	bf00      	nop
 80016cc:	58024400 	.word	0x58024400
 80016d0:	03d09000 	.word	0x03d09000
 80016d4:	007a1200 	.word	0x007a1200
 80016d8:	39000000 	.word	0x39000000
 80016dc:	4a742400 	.word	0x4a742400
 80016e0:	4c742400 	.word	0x4c742400
 80016e4:	4af42400 	.word	0x4af42400
 80016e8:	003d0900 	.word	0x003d0900

080016ec <HAL_RCC_ClockConfig>:
{
 80016ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016f0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80016f2:	4604      	mov	r4, r0
 80016f4:	b910      	cbnz	r0, 80016fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80016fc:	6803      	ldr	r3, [r0, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	2b3e      	cmp	r3, #62	; 0x3e
 8001702:	d904      	bls.n	800170e <HAL_RCC_ClockConfig+0x22>
 8001704:	f240 3152 	movw	r1, #850	; 0x352
 8001708:	48b2      	ldr	r0, [pc, #712]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 800170a:	f005 f8e1 	bl	80068d0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800170e:	2d0f      	cmp	r5, #15
 8001710:	d904      	bls.n	800171c <HAL_RCC_ClockConfig+0x30>
 8001712:	f240 3153 	movw	r1, #851	; 0x353
 8001716:	48af      	ldr	r0, [pc, #700]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 8001718:	f005 f8da 	bl	80068d0 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4aae      	ldr	r2, [pc, #696]	; (80019d8 <HAL_RCC_ClockConfig+0x2ec>)
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	429d      	cmp	r5, r3
 8001726:	f200 80e4 	bhi.w	80018f2 <HAL_RCC_ClockConfig+0x206>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	075e      	lsls	r6, r3, #29
 800172e:	f100 80ec 	bmi.w	800190a <HAL_RCC_ClockConfig+0x21e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	0718      	lsls	r0, r3, #28
 8001736:	d515      	bpl.n	8001764 <HAL_RCC_ClockConfig+0x78>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001738:	4ea8      	ldr	r6, [pc, #672]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 800173a:	6963      	ldr	r3, [r4, #20]
 800173c:	69f2      	ldr	r2, [r6, #28]
 800173e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001742:	4293      	cmp	r3, r2
 8001744:	d90e      	bls.n	8001764 <HAL_RCC_ClockConfig+0x78>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8001746:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800174a:	2b40      	cmp	r3, #64	; 0x40
 800174c:	d004      	beq.n	8001758 <HAL_RCC_ClockConfig+0x6c>
 800174e:	f44f 715e 	mov.w	r1, #888	; 0x378
 8001752:	48a0      	ldr	r0, [pc, #640]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 8001754:	f005 f8bc 	bl	80068d0 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001758:	69f3      	ldr	r3, [r6, #28]
 800175a:	6962      	ldr	r2, [r4, #20]
 800175c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001760:	4313      	orrs	r3, r2
 8001762:	61f3      	str	r3, [r6, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	06d9      	lsls	r1, r3, #27
 8001768:	d516      	bpl.n	8001798 <HAL_RCC_ClockConfig+0xac>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800176a:	4e9c      	ldr	r6, [pc, #624]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 800176c:	69a3      	ldr	r3, [r4, #24]
 800176e:	69f2      	ldr	r2, [r6, #28]
 8001770:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001774:	4293      	cmp	r3, r2
 8001776:	d90f      	bls.n	8001798 <HAL_RCC_ClockConfig+0xac>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8001778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800177c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001780:	d004      	beq.n	800178c <HAL_RCC_ClockConfig+0xa0>
 8001782:	f240 3182 	movw	r1, #898	; 0x382
 8001786:	4893      	ldr	r0, [pc, #588]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 8001788:	f005 f8a2 	bl	80068d0 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800178c:	69f3      	ldr	r3, [r6, #28]
 800178e:	69a2      	ldr	r2, [r4, #24]
 8001790:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001794:	4313      	orrs	r3, r2
 8001796:	61f3      	str	r3, [r6, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	069a      	lsls	r2, r3, #26
 800179c:	d515      	bpl.n	80017ca <HAL_RCC_ClockConfig+0xde>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800179e:	4e8f      	ldr	r6, [pc, #572]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 80017a0:	69e3      	ldr	r3, [r4, #28]
 80017a2:	6a32      	ldr	r2, [r6, #32]
 80017a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d90e      	bls.n	80017ca <HAL_RCC_ClockConfig+0xde>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80017ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017b0:	2b40      	cmp	r3, #64	; 0x40
 80017b2:	d004      	beq.n	80017be <HAL_RCC_ClockConfig+0xd2>
 80017b4:	f44f 7163 	mov.w	r1, #908	; 0x38c
 80017b8:	4886      	ldr	r0, [pc, #536]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 80017ba:	f005 f889 	bl	80068d0 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017be:	6a33      	ldr	r3, [r6, #32]
 80017c0:	69e2      	ldr	r2, [r4, #28]
 80017c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017c6:	4313      	orrs	r3, r2
 80017c8:	6233      	str	r3, [r6, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	079b      	lsls	r3, r3, #30
 80017ce:	d514      	bpl.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017d0:	4e82      	ldr	r6, [pc, #520]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 80017d2:	68e3      	ldr	r3, [r4, #12]
 80017d4:	69b2      	ldr	r2, [r6, #24]
 80017d6:	f002 020f 	and.w	r2, r2, #15
 80017da:	4293      	cmp	r3, r2
 80017dc:	d90d      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80017de:	3b08      	subs	r3, #8
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	d904      	bls.n	80017ee <HAL_RCC_ClockConfig+0x102>
 80017e4:	f240 3197 	movw	r1, #919	; 0x397
 80017e8:	487a      	ldr	r0, [pc, #488]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 80017ea:	f005 f871 	bl	80068d0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ee:	69b3      	ldr	r3, [r6, #24]
 80017f0:	68e2      	ldr	r2, [r4, #12]
 80017f2:	f023 030f 	bic.w	r3, r3, #15
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61b3      	str	r3, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	07df      	lsls	r7, r3, #31
 80017fe:	f100 809c 	bmi.w	800193a <HAL_RCC_ClockConfig+0x24e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	079e      	lsls	r6, r3, #30
 8001806:	f100 80fe 	bmi.w	8001a06 <HAL_RCC_ClockConfig+0x31a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180a:	4a73      	ldr	r2, [pc, #460]	; (80019d8 <HAL_RCC_ClockConfig+0x2ec>)
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	429d      	cmp	r5, r3
 8001814:	f0c0 810f 	bcc.w	8001a36 <HAL_RCC_ClockConfig+0x34a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	0758      	lsls	r0, r3, #29
 800181c:	f100 8117 	bmi.w	8001a4e <HAL_RCC_ClockConfig+0x362>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	0719      	lsls	r1, r3, #28
 8001824:	d518      	bpl.n	8001858 <HAL_RCC_ClockConfig+0x16c>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001826:	4d6d      	ldr	r5, [pc, #436]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 8001828:	6963      	ldr	r3, [r4, #20]
 800182a:	69ea      	ldr	r2, [r5, #28]
 800182c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001830:	4293      	cmp	r3, r2
 8001832:	d211      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x16c>
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8001834:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8001838:	d008      	beq.n	800184c <HAL_RCC_ClockConfig+0x160>
 800183a:	2b50      	cmp	r3, #80	; 0x50
 800183c:	d006      	beq.n	800184c <HAL_RCC_ClockConfig+0x160>
 800183e:	2b60      	cmp	r3, #96	; 0x60
 8001840:	d004      	beq.n	800184c <HAL_RCC_ClockConfig+0x160>
 8001842:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8001846:	4863      	ldr	r0, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 8001848:	f005 f842 	bl	80068d0 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800184c:	69eb      	ldr	r3, [r5, #28]
 800184e:	6962      	ldr	r2, [r4, #20]
 8001850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001854:	4313      	orrs	r3, r2
 8001856:	61eb      	str	r3, [r5, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	06da      	lsls	r2, r3, #27
 800185c:	d51a      	bpl.n	8001894 <HAL_RCC_ClockConfig+0x1a8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800185e:	4d5f      	ldr	r5, [pc, #380]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 8001860:	69a3      	ldr	r3, [r4, #24]
 8001862:	69ea      	ldr	r2, [r5, #28]
 8001864:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001868:	4293      	cmp	r3, r2
 800186a:	d213      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x1a8>
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800186c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001870:	d00a      	beq.n	8001888 <HAL_RCC_ClockConfig+0x19c>
 8001872:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001876:	d007      	beq.n	8001888 <HAL_RCC_ClockConfig+0x19c>
 8001878:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800187c:	d004      	beq.n	8001888 <HAL_RCC_ClockConfig+0x19c>
 800187e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001882:	4854      	ldr	r0, [pc, #336]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 8001884:	f005 f824 	bl	80068d0 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001888:	69eb      	ldr	r3, [r5, #28]
 800188a:	69a2      	ldr	r2, [r4, #24]
 800188c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001890:	4313      	orrs	r3, r2
 8001892:	61eb      	str	r3, [r5, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	069b      	lsls	r3, r3, #26
 8001898:	d518      	bpl.n	80018cc <HAL_RCC_ClockConfig+0x1e0>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800189a:	4d50      	ldr	r5, [pc, #320]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 800189c:	69e3      	ldr	r3, [r4, #28]
 800189e:	6a2a      	ldr	r2, [r5, #32]
 80018a0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d211      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x1e0>
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80018a8:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80018ac:	d008      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x1d4>
 80018ae:	2b50      	cmp	r3, #80	; 0x50
 80018b0:	d006      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x1d4>
 80018b2:	2b60      	cmp	r3, #96	; 0x60
 80018b4:	d004      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x1d4>
 80018b6:	f240 4112 	movw	r1, #1042	; 0x412
 80018ba:	4846      	ldr	r0, [pc, #280]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 80018bc:	f005 f808 	bl	80068d0 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80018c0:	6a2b      	ldr	r3, [r5, #32]
 80018c2:	69e2      	ldr	r2, [r4, #28]
 80018c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c8:	4313      	orrs	r3, r2
 80018ca:	622b      	str	r3, [r5, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018cc:	f7ff fe6c 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 80018d2:	4a43      	ldr	r2, [pc, #268]	; (80019e0 <HAL_RCC_ClockConfig+0x2f4>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	40d8      	lsrs	r0, r3
 80018e2:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_RCC_ClockConfig+0x2f8>)
 80018e4:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_ClockConfig+0x2fc>)
}
 80018e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f7fe bed7 	b.w	80006a0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	6813      	ldr	r3, [r2, #0]
 80018f4:	f023 030f 	bic.w	r3, r3, #15
 80018f8:	432b      	orrs	r3, r5
 80018fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fc:	6813      	ldr	r3, [r2, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	429d      	cmp	r5, r3
 8001904:	f47f aef7 	bne.w	80016f6 <HAL_RCC_ClockConfig+0xa>
 8001908:	e70f      	b.n	800172a <HAL_RCC_ClockConfig+0x3e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800190a:	4e34      	ldr	r6, [pc, #208]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 800190c:	6923      	ldr	r3, [r4, #16]
 800190e:	69b2      	ldr	r2, [r6, #24]
 8001910:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001914:	4293      	cmp	r3, r2
 8001916:	f67f af0c 	bls.w	8001732 <HAL_RCC_ClockConfig+0x46>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800191a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800191e:	2b40      	cmp	r3, #64	; 0x40
 8001920:	d004      	beq.n	800192c <HAL_RCC_ClockConfig+0x240>
 8001922:	f240 316e 	movw	r1, #878	; 0x36e
 8001926:	482b      	ldr	r0, [pc, #172]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 8001928:	f004 ffd2 	bl	80068d0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800192c:	69b3      	ldr	r3, [r6, #24]
 800192e:	6922      	ldr	r2, [r4, #16]
 8001930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001934:	4313      	orrs	r3, r2
 8001936:	61b3      	str	r3, [r6, #24]
 8001938:	e6fb      	b.n	8001732 <HAL_RCC_ClockConfig+0x46>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800193a:	68a3      	ldr	r3, [r4, #8]
 800193c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8001940:	d016      	beq.n	8001970 <HAL_RCC_ClockConfig+0x284>
 8001942:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001946:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 800194a:	d011      	beq.n	8001970 <HAL_RCC_ClockConfig+0x284>
 800194c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001950:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8001954:	d00c      	beq.n	8001970 <HAL_RCC_ClockConfig+0x284>
 8001956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800195a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800195e:	d007      	beq.n	8001970 <HAL_RCC_ClockConfig+0x284>
 8001960:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001964:	d004      	beq.n	8001970 <HAL_RCC_ClockConfig+0x284>
 8001966:	f240 319f 	movw	r1, #927	; 0x39f
 800196a:	481a      	ldr	r0, [pc, #104]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 800196c:	f004 ffb0 	bl	80068d0 <assert_failed>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001970:	6863      	ldr	r3, [r4, #4]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d904      	bls.n	8001980 <HAL_RCC_ClockConfig+0x294>
 8001976:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 800197a:	4816      	ldr	r0, [pc, #88]	; (80019d4 <HAL_RCC_ClockConfig+0x2e8>)
 800197c:	f004 ffa8 	bl	80068d0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
 8001982:	68a1      	ldr	r1, [r4, #8]
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800198a:	430a      	orrs	r2, r1
 800198c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001990:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	2902      	cmp	r1, #2
 8001994:	d12a      	bne.n	80019ec <HAL_RCC_ClockConfig+0x300>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001996:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199a:	f43f aeac 	beq.w	80016f6 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199e:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a4:	4e0d      	ldr	r6, [pc, #52]	; (80019dc <HAL_RCC_ClockConfig+0x2f0>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	f022 0207 	bic.w	r2, r2, #7
 80019aa:	430a      	orrs	r2, r1
 80019ac:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80019ae:	f7fe fed7 	bl	8000760 <HAL_GetTick>
 80019b2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b4:	6933      	ldr	r3, [r6, #16]
 80019b6:	6862      	ldr	r2, [r4, #4]
 80019b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019bc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80019c0:	f43f af1f 	beq.w	8001802 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7fe fecc 	bl	8000760 <HAL_GetTick>
 80019c8:	1bc0      	subs	r0, r0, r7
 80019ca:	4540      	cmp	r0, r8
 80019cc:	d9f2      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x2c8>
            return HAL_TIMEOUT;
 80019ce:	2003      	movs	r0, #3
}
 80019d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019d4:	0800824f 	.word	0x0800824f
 80019d8:	52002000 	.word	0x52002000
 80019dc:	58024400 	.word	0x58024400
 80019e0:	0800843f 	.word	0x0800843f
 80019e4:	20000014 	.word	0x20000014
 80019e8:	20000004 	.word	0x20000004
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ec:	2903      	cmp	r1, #3
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x30a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80019f4:	e7d1      	b.n	800199a <HAL_RCC_ClockConfig+0x2ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019f6:	2901      	cmp	r1, #1
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x314>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019fa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80019fe:	e7cc      	b.n	800199a <HAL_RCC_ClockConfig+0x2ae>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a00:	f012 0f04 	tst.w	r2, #4
 8001a04:	e7c9      	b.n	800199a <HAL_RCC_ClockConfig+0x2ae>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a06:	4e1f      	ldr	r6, [pc, #124]	; (8001a84 <HAL_RCC_ClockConfig+0x398>)
 8001a08:	68e3      	ldr	r3, [r4, #12]
 8001a0a:	69b2      	ldr	r2, [r6, #24]
 8001a0c:	f002 020f 	and.w	r2, r2, #15
 8001a10:	4293      	cmp	r3, r2
 8001a12:	f4bf aefa 	bcs.w	800180a <HAL_RCC_ClockConfig+0x11e>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001a16:	b13b      	cbz	r3, 8001a28 <HAL_RCC_ClockConfig+0x33c>
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d904      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x33c>
 8001a1e:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8001a22:	4819      	ldr	r0, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x39c>)
 8001a24:	f004 ff54 	bl	80068d0 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	69b3      	ldr	r3, [r6, #24]
 8001a2a:	68e2      	ldr	r2, [r4, #12]
 8001a2c:	f023 030f 	bic.w	r3, r3, #15
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61b3      	str	r3, [r6, #24]
 8001a34:	e6e9      	b.n	800180a <HAL_RCC_ClockConfig+0x11e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	f023 030f 	bic.w	r3, r3, #15
 8001a3c:	432b      	orrs	r3, r5
 8001a3e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a40:	6813      	ldr	r3, [r2, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	429d      	cmp	r5, r3
 8001a48:	f47f ae55 	bne.w	80016f6 <HAL_RCC_ClockConfig+0xa>
 8001a4c:	e6e4      	b.n	8001818 <HAL_RCC_ClockConfig+0x12c>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a4e:	4d0d      	ldr	r5, [pc, #52]	; (8001a84 <HAL_RCC_ClockConfig+0x398>)
 8001a50:	6923      	ldr	r3, [r4, #16]
 8001a52:	69aa      	ldr	r2, [r5, #24]
 8001a54:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	f4bf aee1 	bcs.w	8001820 <HAL_RCC_ClockConfig+0x134>
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8001a5e:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x38a>
 8001a64:	2b50      	cmp	r3, #80	; 0x50
 8001a66:	d006      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x38a>
 8001a68:	2b60      	cmp	r3, #96	; 0x60
 8001a6a:	d004      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x38a>
 8001a6c:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <HAL_RCC_ClockConfig+0x39c>)
 8001a72:	f004 ff2d 	bl	80068d0 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a76:	69ab      	ldr	r3, [r5, #24]
 8001a78:	6922      	ldr	r2, [r4, #16]
 8001a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61ab      	str	r3, [r5, #24]
 8001a82:	e6cd      	b.n	8001820 <HAL_RCC_ClockConfig+0x134>
 8001a84:	58024400 	.word	0x58024400
 8001a88:	0800824f 	.word	0x0800824f

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a8e:	f001 f83f 	bl	8002b10 <HAL_RCCEx_GetD1SysClockFreq>
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetHCLKFreq+0x20>)
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	5cd3      	ldrb	r3, [r2, r3]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	40d8      	lsrs	r0, r3
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_RCC_GetHCLKFreq+0x28>)
 8001aa6:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001aa8:	bd08      	pop	{r3, pc}
 8001aaa:	bf00      	nop
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	0800843f 	.word	0x0800843f
 8001ab4:	20000018 	.word	0x20000018

08001ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001aba:	f7ff ffe7 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001ac8:	5cd3      	ldrb	r3, [r2, r3]
 8001aca:	f003 031f 	and.w	r3, r3, #31
}
 8001ace:	40d8      	lsrs	r0, r3
 8001ad0:	bd08      	pop	{r3, pc}
 8001ad2:	bf00      	nop
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	0800843f 	.word	0x0800843f

08001adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001adc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001ade:	f7ff ffd5 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	f003 031f 	and.w	r3, r3, #31
}
 8001af2:	40d8      	lsrs	r0, r3
 8001af4:	bd08      	pop	{r3, pc}
 8001af6:	bf00      	nop
 8001af8:	58024400 	.word	0x58024400
 8001afc:	0800843f 	.word	0x0800843f

08001b00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8001b02:	6803      	ldr	r3, [r0, #0]
{
 8001b04:	4605      	mov	r5, r0
 8001b06:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b0c:	d904      	bls.n	8001b18 <RCCEx_PLL2_Config+0x18>
 8001b0e:	f640 2186 	movw	r1, #2694	; 0xa86
 8001b12:	485a      	ldr	r0, [pc, #360]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b14:	f004 fedc 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8001b18:	686b      	ldr	r3, [r5, #4]
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8001b20:	d904      	bls.n	8001b2c <RCCEx_PLL2_Config+0x2c>
 8001b22:	f640 2187 	movw	r1, #2695	; 0xa87
 8001b26:	4855      	ldr	r0, [pc, #340]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b28:	f004 fed2 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8001b2c:	68ab      	ldr	r3, [r5, #8]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	2b7f      	cmp	r3, #127	; 0x7f
 8001b32:	d904      	bls.n	8001b3e <RCCEx_PLL2_Config+0x3e>
 8001b34:	f640 2188 	movw	r1, #2696	; 0xa88
 8001b38:	4850      	ldr	r0, [pc, #320]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b3a:	f004 fec9 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8001b3e:	692b      	ldr	r3, [r5, #16]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	2b7f      	cmp	r3, #127	; 0x7f
 8001b44:	d904      	bls.n	8001b50 <RCCEx_PLL2_Config+0x50>
 8001b46:	f640 2189 	movw	r1, #2697	; 0xa89
 8001b4a:	484c      	ldr	r0, [pc, #304]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b4c:	f004 fec0 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8001b50:	68eb      	ldr	r3, [r5, #12]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	2b7f      	cmp	r3, #127	; 0x7f
 8001b56:	d904      	bls.n	8001b62 <RCCEx_PLL2_Config+0x62>
 8001b58:	f640 218a 	movw	r1, #2698	; 0xa8a
 8001b5c:	4847      	ldr	r0, [pc, #284]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b5e:	f004 feb7 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8001b62:	696b      	ldr	r3, [r5, #20]
 8001b64:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8001b68:	d004      	beq.n	8001b74 <RCCEx_PLL2_Config+0x74>
 8001b6a:	f640 218b 	movw	r1, #2699	; 0xa8b
 8001b6e:	4843      	ldr	r0, [pc, #268]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b70:	f004 feae 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8001b74:	69ab      	ldr	r3, [r5, #24]
 8001b76:	f033 0320 	bics.w	r3, r3, #32
 8001b7a:	d004      	beq.n	8001b86 <RCCEx_PLL2_Config+0x86>
 8001b7c:	f640 218c 	movw	r1, #2700	; 0xa8c
 8001b80:	483e      	ldr	r0, [pc, #248]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b82:	f004 fea5 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8001b86:	69eb      	ldr	r3, [r5, #28]
 8001b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8c:	d304      	bcc.n	8001b98 <RCCEx_PLL2_Config+0x98>
 8001b8e:	f640 218d 	movw	r1, #2701	; 0xa8d
 8001b92:	483a      	ldr	r0, [pc, #232]	; (8001c7c <RCCEx_PLL2_Config+0x17c>)
 8001b94:	f004 fe9c 	bl	80068d0 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001b98:	4c39      	ldr	r4, [pc, #228]	; (8001c80 <RCCEx_PLL2_Config+0x180>)
 8001b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d069      	beq.n	8001c78 <RCCEx_PLL2_Config+0x178>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001baa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bac:	f7fe fdd8 	bl	8000760 <HAL_GetTick>
 8001bb0:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	011a      	lsls	r2, r3, #4
 8001bb6:	d44b      	bmi.n	8001c50 <RCCEx_PLL2_Config+0x150>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001bb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bba:	682a      	ldr	r2, [r5, #0]
 8001bbc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bc0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bc6:	68ab      	ldr	r3, [r5, #8]
 8001bc8:	68ea      	ldr	r2, [r5, #12]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	025b      	lsls	r3, r3, #9
 8001bd0:	0412      	lsls	r2, r2, #16
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	686a      	ldr	r2, [r5, #4]
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001be2:	4313      	orrs	r3, r2
 8001be4:	692a      	ldr	r2, [r5, #16]
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0612      	lsls	r2, r2, #24
 8001bea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bf4:	696a      	ldr	r2, [r5, #20]
 8001bf6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c00:	69aa      	ldr	r2, [r5, #24]
 8001c02:	f023 0320 	bic.w	r3, r3, #32
 8001c06:	4313      	orrs	r3, r2
 8001c08:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c0c:	f023 0310 	bic.w	r3, r3, #16
 8001c10:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c14:	69ea      	ldr	r2, [r5, #28]
 8001c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c22:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001c2e:	b9b6      	cbnz	r6, 8001c5e <RCCEx_PLL2_Config+0x15e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001c34:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001c36:	4c12      	ldr	r4, [pc, #72]	; (8001c80 <RCCEx_PLL2_Config+0x180>)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c3e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c40:	f7fe fd8e 	bl	8000760 <HAL_GetTick>
 8001c44:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	d50f      	bpl.n	8001c6c <RCCEx_PLL2_Config+0x16c>
    }

  }


  return status;
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c50:	f7fe fd86 	bl	8000760 <HAL_GetTick>
 8001c54:	1bc0      	subs	r0, r0, r7
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d9ab      	bls.n	8001bb2 <RCCEx_PLL2_Config+0xb2>
        return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001c5e:	2e01      	cmp	r6, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001c60:	bf0c      	ite	eq
 8001c62:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001c66:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001c6a:	e7e3      	b.n	8001c34 <RCCEx_PLL2_Config+0x134>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001c6c:	f7fe fd78 	bl	8000760 <HAL_GetTick>
 8001c70:	1b40      	subs	r0, r0, r5
 8001c72:	2802      	cmp	r0, #2
 8001c74:	d9e7      	bls.n	8001c46 <RCCEx_PLL2_Config+0x146>
 8001c76:	e7f0      	b.n	8001c5a <RCCEx_PLL2_Config+0x15a>
    return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
}
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7c:	08008287 	.word	0x08008287
 8001c80:	58024400 	.word	0x58024400

08001c84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8001c86:	6803      	ldr	r3, [r0, #0]
{
 8001c88:	4605      	mov	r5, r0
 8001c8a:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c90:	d904      	bls.n	8001c9c <RCCEx_PLL3_Config+0x18>
 8001c92:	f640 21ee 	movw	r1, #2798	; 0xaee
 8001c96:	485a      	ldr	r0, [pc, #360]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001c98:	f004 fe1a 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8001c9c:	686b      	ldr	r3, [r5, #4]
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8001ca4:	d904      	bls.n	8001cb0 <RCCEx_PLL3_Config+0x2c>
 8001ca6:	f640 21ef 	movw	r1, #2799	; 0xaef
 8001caa:	4855      	ldr	r0, [pc, #340]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001cac:	f004 fe10 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8001cb0:	68ab      	ldr	r3, [r5, #8]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001cb6:	d904      	bls.n	8001cc2 <RCCEx_PLL3_Config+0x3e>
 8001cb8:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8001cbc:	4850      	ldr	r0, [pc, #320]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001cbe:	f004 fe07 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8001cc2:	692b      	ldr	r3, [r5, #16]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cc8:	d904      	bls.n	8001cd4 <RCCEx_PLL3_Config+0x50>
 8001cca:	f640 21f1 	movw	r1, #2801	; 0xaf1
 8001cce:	484c      	ldr	r0, [pc, #304]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001cd0:	f004 fdfe 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8001cd4:	68eb      	ldr	r3, [r5, #12]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cda:	d904      	bls.n	8001ce6 <RCCEx_PLL3_Config+0x62>
 8001cdc:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8001ce0:	4847      	ldr	r0, [pc, #284]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001ce2:	f004 fdf5 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8001ce6:	696b      	ldr	r3, [r5, #20]
 8001ce8:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8001cec:	d004      	beq.n	8001cf8 <RCCEx_PLL3_Config+0x74>
 8001cee:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8001cf2:	4843      	ldr	r0, [pc, #268]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001cf4:	f004 fdec 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8001cf8:	69ab      	ldr	r3, [r5, #24]
 8001cfa:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001cfe:	d004      	beq.n	8001d0a <RCCEx_PLL3_Config+0x86>
 8001d00:	f640 21f4 	movw	r1, #2804	; 0xaf4
 8001d04:	483e      	ldr	r0, [pc, #248]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001d06:	f004 fde3 	bl	80068d0 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8001d0a:	69eb      	ldr	r3, [r5, #28]
 8001d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d10:	d304      	bcc.n	8001d1c <RCCEx_PLL3_Config+0x98>
 8001d12:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8001d16:	483a      	ldr	r0, [pc, #232]	; (8001e00 <RCCEx_PLL3_Config+0x17c>)
 8001d18:	f004 fdda 	bl	80068d0 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001d1c:	4c39      	ldr	r4, [pc, #228]	; (8001e04 <RCCEx_PLL3_Config+0x180>)
 8001d1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d069      	beq.n	8001dfc <RCCEx_PLL3_Config+0x178>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d30:	f7fe fd16 	bl	8000760 <HAL_GetTick>
 8001d34:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	d44b      	bmi.n	8001dd4 <RCCEx_PLL3_Config+0x150>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001d3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d3e:	682a      	ldr	r2, [r5, #0]
 8001d40:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001d44:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d4a:	68ab      	ldr	r3, [r5, #8]
 8001d4c:	68ea      	ldr	r2, [r5, #12]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	3a01      	subs	r2, #1
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	0412      	lsls	r2, r2, #16
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	686a      	ldr	r2, [r5, #4]
 8001d60:	3a01      	subs	r2, #1
 8001d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d66:	4313      	orrs	r3, r2
 8001d68:	692a      	ldr	r2, [r5, #16]
 8001d6a:	3a01      	subs	r2, #1
 8001d6c:	0612      	lsls	r2, r2, #24
 8001d6e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001d72:	4313      	orrs	r3, r2
 8001d74:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001d76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d78:	696a      	ldr	r2, [r5, #20]
 8001d7a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001d82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d84:	69aa      	ldr	r2, [r5, #24]
 8001d86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d94:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d98:	69ea      	ldr	r2, [r5, #28]
 8001d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001da2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001da6:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001da8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001db0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001db2:	b9b6      	cbnz	r6, 8001de2 <RCCEx_PLL3_Config+0x15e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001db8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001dba:	4c12      	ldr	r4, [pc, #72]	; (8001e04 <RCCEx_PLL3_Config+0x180>)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc4:	f7fe fccc 	bl	8000760 <HAL_GetTick>
 8001dc8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	d50f      	bpl.n	8001df0 <RCCEx_PLL3_Config+0x16c>
    }

  }


  return status;
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001dd4:	f7fe fcc4 	bl	8000760 <HAL_GetTick>
 8001dd8:	1bc0      	subs	r0, r0, r7
 8001dda:	2802      	cmp	r0, #2
 8001ddc:	d9ab      	bls.n	8001d36 <RCCEx_PLL3_Config+0xb2>
        return HAL_TIMEOUT;
 8001dde:	2003      	movs	r0, #3
 8001de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001de2:	2e01      	cmp	r6, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001de4:	bf0c      	ite	eq
 8001de6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001dea:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001dee:	e7e3      	b.n	8001db8 <RCCEx_PLL3_Config+0x134>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001df0:	f7fe fcb6 	bl	8000760 <HAL_GetTick>
 8001df4:	1b40      	subs	r0, r0, r5
 8001df6:	2802      	cmp	r0, #2
 8001df8:	d9e7      	bls.n	8001dca <RCCEx_PLL3_Config+0x146>
 8001dfa:	e7f0      	b.n	8001dde <RCCEx_PLL3_Config+0x15a>
    return HAL_ERROR;
 8001dfc:	2001      	movs	r0, #1
}
 8001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e00:	08008287 	.word	0x08008287
 8001e04:	58024400 	.word	0x58024400

08001e08 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e0c:	6806      	ldr	r6, [r0, #0]
{
 8001e0e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e10:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001e14:	d023      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001e16:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e1c:	d018      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001e1e:	d802      	bhi.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e20:	b183      	cbz	r3, 8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001e22:	2601      	movs	r6, #1
 8001e24:	e01b      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e2a:	d023      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001e2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001e30:	d1f7      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001e32:	4a9f      	ldr	r2, [pc, #636]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e34:	2600      	movs	r6, #0
 8001e36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001e38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e3a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	6513      	str	r3, [r2, #80]	; 0x50
 8001e42:	e00c      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e44:	4a9a      	ldr	r2, [pc, #616]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001e4e:	e7f0      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001e50:	2102      	movs	r1, #2
 8001e52:	3004      	adds	r0, #4
 8001e54:	f7ff fe54 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001e58:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d0e9      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	05dd      	lsls	r5, r3, #23
 8001e62:	d534      	bpl.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d830      	bhi.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001e6a:	e8df f003 	tbb	[pc, r3]
 8001e6e:	0f08      	.short	0x0f08
 8001e70:	0d29      	.short	0x0d29
 8001e72:	0d          	.byte	0x0d
 8001e73:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001e74:	2102      	movs	r1, #2
 8001e76:	3024      	adds	r0, #36	; 0x24
 8001e78:	f7ff ff04 	bl	8001c84 <RCCEx_PLL3_Config>
 8001e7c:	e7ec      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e7e:	4a8c      	ldr	r2, [pc, #560]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e86:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e88:	4635      	mov	r5, r6
 8001e8a:	e004      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	1d20      	adds	r0, r4, #4
 8001e90:	f7ff fe36 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e94:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001e96:	b9e5      	cbnz	r5, 8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e98:	4a85      	ldr	r2, [pc, #532]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001e9a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001e9c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e9e:	f023 0307 	bic.w	r3, r3, #7
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	0598      	lsls	r0, r3, #22
 8001eaa:	d521      	bpl.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001eac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eae:	2b80      	cmp	r3, #128	; 0x80
 8001eb0:	d03b      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001eb2:	d810      	bhi.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001eb4:	b36b      	cbz	r3, 8001f12 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d031      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8001eba:	2601      	movs	r6, #1
 8001ebc:	4635      	mov	r5, r6
 8001ebe:	e017      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ec6:	f7ff fedd 	bl	8001c84 <RCCEx_PLL3_Config>
 8001eca:	e7e3      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8001ecc:	2601      	movs	r6, #1
 8001ece:	4635      	mov	r5, r6
 8001ed0:	e7e9      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001ed2:	462e      	mov	r6, r5
 8001ed4:	e7e7      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ede:	d1ec      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8001ee0:	bb4d      	cbnz	r5, 8001f36 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001ee2:	4a73      	ldr	r2, [pc, #460]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ee4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001ee6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ee8:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	0559      	lsls	r1, r3, #21
 8001ef4:	d530      	bpl.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001ef6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efe:	d047      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001f00:	d81b      	bhi.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d038      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f0a:	d03b      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8001f0c:	2601      	movs	r6, #1
 8001f0e:	4635      	mov	r5, r6
 8001f10:	e022      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f12:	4a67      	ldr	r2, [pc, #412]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f1c:	e7e0      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	1d20      	adds	r0, r4, #4
 8001f22:	f7ff fded 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f26:	4605      	mov	r5, r0
      break;
 8001f28:	e7da      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f30:	f7ff fea8 	bl	8001c84 <RCCEx_PLL3_Config>
 8001f34:	e7f7      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8001f36:	462e      	mov	r6, r5
 8001f38:	e7da      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001f3e:	d002      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8001f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f44:	d1e2      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8001f46:	bb4d      	cbnz	r5, 8001f9c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001f48:	4a59      	ldr	r2, [pc, #356]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f4a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8001f4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001f50:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	051a      	lsls	r2, r3, #20
 8001f5c:	d52f      	bpl.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001f5e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f66:	d041      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001f68:	d81a      	bhi.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001f6a:	b39b      	cbz	r3, 8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d036      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8001f72:	2601      	movs	r6, #1
 8001f74:	4635      	mov	r5, r6
 8001f76:	e022      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f78:	4a4d      	ldr	r2, [pc, #308]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001f7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001f82:	e7e0      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f84:	2100      	movs	r1, #0
 8001f86:	1d20      	adds	r0, r4, #4
 8001f88:	f7ff fdba 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f8c:	4605      	mov	r5, r0
      break;
 8001f8e:	e7da      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f90:	2100      	movs	r1, #0
 8001f92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f96:	f7ff fe75 	bl	8001c84 <RCCEx_PLL3_Config>
 8001f9a:	e7f7      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8001f9c:	462e      	mov	r6, r5
 8001f9e:	e7db      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001fa0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fa4:	d002      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001faa:	d1e2      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8001fac:	bb25      	cbnz	r5, 8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001fae:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001fb0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001fb4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001fb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	d527      	bpl.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8001fc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d033      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001fca:	d817      	bhi.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001fcc:	b1d3      	cbz	r3, 8002004 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8001fce:	2601      	movs	r6, #1
 8001fd0:	4635      	mov	r5, r6
 8001fd2:	e01f      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fd4:	4a36      	ldr	r2, [pc, #216]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001fd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001fde:	e7e5      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	1d20      	adds	r0, r4, #4
 8001fe4:	f7ff fd8c 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001fe8:	4605      	mov	r5, r0
      break;
 8001fea:	e7df      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001fec:	2100      	movs	r1, #0
 8001fee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ff2:	f7ff fe47 	bl	8001c84 <RCCEx_PLL3_Config>
 8001ff6:	e7f7      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001ff8:	462e      	mov	r6, r5
 8001ffa:	e7e0      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d01e      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	d1e4      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8002004:	bb0d      	cbnz	r5, 800204a <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002006:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800200a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800200c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002010:	430b      	orrs	r3, r1
 8002012:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	04df      	lsls	r7, r3, #19
 8002018:	d527      	bpl.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 800201a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800201c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002020:	d03e      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002022:	d814      	bhi.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8002024:	b383      	cbz	r3, 8002088 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202a:	d033      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 800202c:	2601      	movs	r6, #1
 800202e:	4635      	mov	r5, r6
 8002030:	e01b      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002034:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800203c:	e7e2      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800203e:	2102      	movs	r1, #2
 8002040:	1d20      	adds	r0, r4, #4
 8002042:	f7ff fd5d 	bl	8001b00 <RCCEx_PLL2_Config>
 8002046:	4605      	mov	r5, r0
      break;
 8002048:	e7dc      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800204a:	462e      	mov	r6, r5
 800204c:	e7e2      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800204e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002052:	d002      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002058:	d1e8      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 800205a:	bb3d      	cbnz	r5, 80020ac <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800205e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002060:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002066:	430b      	orrs	r3, r1
 8002068:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	0498      	lsls	r0, r3, #18
 800206e:	d532      	bpl.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002070:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002076:	d044      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002078:	d81c      	bhi.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800207a:	b323      	cbz	r3, 80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d039      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8002082:	2601      	movs	r6, #1
 8002084:	4635      	mov	r5, r6
 8002086:	e026      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002088:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800208a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002092:	e7e2      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002094:	2100      	movs	r1, #0
 8002096:	1d20      	adds	r0, r4, #4
 8002098:	f7ff fd32 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800209c:	4605      	mov	r5, r0
      break;
 800209e:	e7dc      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020a0:	2100      	movs	r1, #0
 80020a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020a6:	f7ff fded 	bl	8001c84 <RCCEx_PLL3_Config>
 80020aa:	e7f7      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x294>
 80020ac:	462e      	mov	r6, r5
 80020ae:	e7dc      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80020b0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80020b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020b8:	d005      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80020ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020be:	d002      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80020c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020c4:	d1dd      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 80020c6:	bb15      	cbnz	r5, 800210e <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80020c8:	4aa5      	ldr	r2, [pc, #660]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80020ca:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80020cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80020ce:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80020d2:	430b      	orrs	r3, r1
 80020d4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	0459      	lsls	r1, r3, #17
 80020da:	d52d      	bpl.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 80020dc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e4:	d04c      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80020e6:	d814      	bhi.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80020e8:	b1e3      	cbz	r3, 8002124 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80020ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020ee:	d041      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      ret = HAL_ERROR;
 80020f0:	2601      	movs	r6, #1
 80020f2:	4635      	mov	r5, r6
 80020f4:	e020      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020f6:	2101      	movs	r1, #1
 80020f8:	1d20      	adds	r0, r4, #4
 80020fa:	f7ff fd01 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020fe:	4605      	mov	r5, r0
      break;
 8002100:	e7e1      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002102:	2101      	movs	r1, #1
 8002104:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002108:	f7ff fdbc 	bl	8001c84 <RCCEx_PLL3_Config>
 800210c:	e7f7      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 800210e:	462e      	mov	r6, r5
 8002110:	e7e1      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d005      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211c:	d002      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800211e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002122:	d1e5      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8002124:	2d00      	cmp	r5, #0
 8002126:	d131      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x384>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002128:	4a8d      	ldr	r2, [pc, #564]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800212a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800212e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002130:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002134:	430b      	orrs	r3, r1
 8002136:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	d50f      	bpl.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 800213e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002144:	d024      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800214a:	d027      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x394>
 800214c:	bb63      	cbnz	r3, 80021a8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
    if(ret == HAL_OK)
 800214e:	bb75      	cbnz	r5, 80021ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002150:	4a83      	ldr	r2, [pc, #524]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002152:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002154:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002156:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800215a:	430b      	orrs	r3, r1
 800215c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	01db      	lsls	r3, r3, #7
 8002162:	d535      	bpl.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch(PeriphClkInit->FmcClockSelection)
 8002164:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002166:	2b03      	cmp	r3, #3
 8002168:	f200 80d2 	bhi.w	8002310 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800216c:	e8df f003 	tbb	[pc, r3]
 8002170:	26ca2126 	.word	0x26ca2126
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002174:	2101      	movs	r1, #1
 8002176:	1d20      	adds	r0, r4, #4
 8002178:	f7ff fcc2 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800217c:	4605      	mov	r5, r0
      break;
 800217e:	e7d1      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002180:	2101      	movs	r1, #1
 8002182:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002186:	f7ff fd7d 	bl	8001c84 <RCCEx_PLL3_Config>
 800218a:	e7f7      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800218c:	462e      	mov	r6, r5
 800218e:	e7d3      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002190:	4a73      	ldr	r2, [pc, #460]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002192:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800219a:	e7d8      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800219c:	2101      	movs	r1, #1
 800219e:	1d20      	adds	r0, r4, #4
 80021a0:	f7ff fcae 	bl	8001b00 <RCCEx_PLL2_Config>
 80021a4:	4605      	mov	r5, r0
      break;
 80021a6:	e7d2      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 80021a8:	2601      	movs	r6, #1
 80021aa:	4635      	mov	r5, r6
 80021ac:	e7d7      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80021ae:	462e      	mov	r6, r5
 80021b0:	e7d5      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021b2:	4a6b      	ldr	r2, [pc, #428]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80021b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80021bc:	2d00      	cmp	r5, #0
 80021be:	f040 80aa 	bne.w	8002316 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80021c2:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80021c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80021c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80021c8:	f023 0303 	bic.w	r3, r3, #3
 80021cc:	430b      	orrs	r3, r1
 80021ce:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	025f      	lsls	r7, r3, #9
 80021d4:	f140 80a9 	bpl.w	800232a <HAL_RCCEx_PeriphCLKConfig+0x522>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80021d8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80021dc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80021e0:	d04c      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80021e6:	d049      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021e8:	f422 43a0 	bic.w	r3, r2, #20480	; 0x5000
 80021ec:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80021f0:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 80021f4:	d042      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 80021f6:	f422 4310 	bic.w	r3, r2, #36864	; 0x9000
 80021fa:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 80021fe:	d03d      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002200:	f422 5340 	bic.w	r3, r2, #12288	; 0x3000
 8002204:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8002208:	d038      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800220a:	f422 3088 	bic.w	r0, r2, #69632	; 0x11000
 800220e:	f5b0 4f63 	cmp.w	r0, #58112	; 0xe300
 8002212:	d033      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002214:	4853      	ldr	r0, [pc, #332]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x55c>)
 8002216:	4283      	cmp	r3, r0
 8002218:	d030      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800221a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800221e:	4283      	cmp	r3, r0
 8002220:	d02c      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002222:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002226:	4283      	cmp	r3, r0
 8002228:	d028      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800222a:	f422 3204 	bic.w	r2, r2, #135168	; 0x21000
 800222e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002232:	4282      	cmp	r2, r0
 8002234:	d022      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002236:	4a4c      	ldr	r2, [pc, #304]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d01f      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800223c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002240:	4293      	cmp	r3, r2
 8002242:	d01b      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002244:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002248:	4293      	cmp	r3, r2
 800224a:	d017      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800224c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002250:	4293      	cmp	r3, r2
 8002252:	d013      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002254:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002258:	4293      	cmp	r3, r2
 800225a:	d00f      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800225c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002260:	4293      	cmp	r3, r2
 8002262:	d00b      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002264:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800226e:	4299      	cmp	r1, r3
 8002270:	d004      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002272:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8002276:	483e      	ldr	r0, [pc, #248]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002278:	f004 fb2a 	bl	80068d0 <assert_failed>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227c:	4f3d      	ldr	r7, [pc, #244]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002286:	f7fe fa6b 	bl	8000760 <HAL_GetTick>
 800228a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	05d8      	lsls	r0, r3, #23
 8002290:	d543      	bpl.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x512>
    if(ret == HAL_OK)
 8002292:	2d00      	cmp	r5, #0
 8002294:	d161      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x552>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002298:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800229c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800229e:	4042      	eors	r2, r0
 80022a0:	f412 7f40 	tst.w	r2, #768	; 0x300
 80022a4:	d00b      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80022a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80022ae:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80022b2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80022b6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80022ba:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80022bc:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80022be:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80022c2:	d108      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
        tickstart = HAL_GetTick();
 80022c4:	f7fe fa4c 	bl	8000760 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022c8:	4f25      	ldr	r7, [pc, #148]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
        tickstart = HAL_GetTick();
 80022ca:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d2:	0799      	lsls	r1, r3, #30
 80022d4:	d536      	bpl.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80022da:	4921      	ldr	r1, [pc, #132]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80022dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80022e0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80022e4:	d135      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80022e6:	6908      	ldr	r0, [r1, #16]
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80022ea:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80022ee:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80022f2:	4302      	orrs	r2, r0
 80022f4:	610a      	str	r2, [r1, #16]
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80022fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80022fe:	430b      	orrs	r3, r1
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	e012      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x522>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002304:	2102      	movs	r1, #2
 8002306:	1d20      	adds	r0, r4, #4
 8002308:	f7ff fbfa 	bl	8001b00 <RCCEx_PLL2_Config>
 800230c:	4605      	mov	r5, r0
      break;
 800230e:	e755      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = HAL_ERROR;
 8002310:	2601      	movs	r6, #1
 8002312:	4635      	mov	r5, r6
 8002314:	e75c      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8002316:	462e      	mov	r6, r5
 8002318:	e75a      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7fe fa21 	bl	8000760 <HAL_GetTick>
 800231e:	eba0 0008 	sub.w	r0, r0, r8
 8002322:	2864      	cmp	r0, #100	; 0x64
 8002324:	d9b2      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x484>
        ret = HAL_TIMEOUT;
 8002326:	2603      	movs	r6, #3
 8002328:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	07da      	lsls	r2, r3, #31
 800232e:	d533      	bpl.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002330:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002332:	2b10      	cmp	r3, #16
 8002334:	d041      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8002336:	d821      	bhi.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x574>
 8002338:	b333      	cbz	r3, 8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800233a:	2b08      	cmp	r3, #8
 800233c:	d037      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      ret = HAL_ERROR;
 800233e:	2601      	movs	r6, #1
 8002340:	4635      	mov	r5, r6
 8002342:	e029      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x590>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fa0c 	bl	8000760 <HAL_GetTick>
 8002348:	eba0 0008 	sub.w	r0, r0, r8
 800234c:	4548      	cmp	r0, r9
 800234e:	d9bf      	bls.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002350:	e7e9      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x51e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002352:	690a      	ldr	r2, [r1, #16]
 8002354:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002358:	e7cc      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800235a:	462e      	mov	r6, r5
 800235c:	e7e5      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800235e:	bf00      	nop
 8002360:	58024400 	.word	0x58024400
 8002364:	00010300 	.word	0x00010300
 8002368:	00020300 	.word	0x00020300
 800236c:	0003e300 	.word	0x0003e300
 8002370:	08008287 	.word	0x08008287
 8002374:	58024800 	.word	0x58024800
 8002378:	00ffffcf 	.word	0x00ffffcf
    switch(PeriphClkInit->Usart16ClockSelection)
 800237c:	2b20      	cmp	r3, #32
 800237e:	d003      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002380:	2b28      	cmp	r3, #40	; 0x28
 8002382:	d001      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002384:	2b18      	cmp	r3, #24
 8002386:	d1da      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(ret == HAL_OK)
 8002388:	b9ed      	cbnz	r5, 80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800238a:	4a67      	ldr	r2, [pc, #412]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800238c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800238e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002390:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002394:	430b      	orrs	r3, r1
 8002396:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	079b      	lsls	r3, r3, #30
 800239c:	d522      	bpl.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800239e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d831      	bhi.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80023a4:	e8df f003 	tbb	[pc, r3]
 80023a8:	162a1116 	.word	0x162a1116
 80023ac:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023ae:	2101      	movs	r1, #1
 80023b0:	1d20      	adds	r0, r4, #4
 80023b2:	f7ff fba5 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023b6:	4605      	mov	r5, r0
      break;
 80023b8:	e7e6      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023ba:	2101      	movs	r1, #1
 80023bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023c0:	f7ff fc60 	bl	8001c84 <RCCEx_PLL3_Config>
 80023c4:	e7f7      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 80023c6:	462e      	mov	r6, r5
 80023c8:	e7e6      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x590>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023ca:	2101      	movs	r1, #1
 80023cc:	1d20      	adds	r0, r4, #4
 80023ce:	f7ff fb97 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023d4:	b9dd      	cbnz	r5, 800240e <HAL_RCCEx_PeriphCLKConfig+0x606>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80023d6:	4a54      	ldr	r2, [pc, #336]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80023d8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80023da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023dc:	f023 0307 	bic.w	r3, r3, #7
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	075f      	lsls	r7, r3, #29
 80023e8:	d521      	bpl.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80023ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d833      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80023f2:	e8df f003 	tbb	[pc, r3]
 80023f6:	0e13      	.short	0x0e13
 80023f8:	1313132c 	.word	0x1313132c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023fc:	2101      	movs	r1, #1
 80023fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002402:	f7ff fc3f 	bl	8001c84 <RCCEx_PLL3_Config>
 8002406:	e7e4      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      ret = HAL_ERROR;
 8002408:	2601      	movs	r6, #1
 800240a:	4635      	mov	r5, r6
 800240c:	e7ea      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 800240e:	462e      	mov	r6, r5
 8002410:	e7e8      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002412:	2101      	movs	r1, #1
 8002414:	1d20      	adds	r0, r4, #4
 8002416:	f7ff fb73 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800241a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800241c:	bb05      	cbnz	r5, 8002460 <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800241e:	4a42      	ldr	r2, [pc, #264]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 8002420:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002424:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	430b      	orrs	r3, r1
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	0698      	lsls	r0, r3, #26
 8002432:	d529      	bpl.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x680>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002434:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243c:	d03a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800243e:	d811      	bhi.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002440:	b1cb      	cbz	r3, 8002476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002446:	d02f      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = HAL_ERROR;
 8002448:	2601      	movs	r6, #1
 800244a:	4635      	mov	r5, r6
 800244c:	e01c      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x680>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800244e:	2101      	movs	r1, #1
 8002450:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002454:	f7ff fc16 	bl	8001c84 <RCCEx_PLL3_Config>
 8002458:	e7df      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x612>
      ret = HAL_ERROR;
 800245a:	2601      	movs	r6, #1
 800245c:	4635      	mov	r5, r6
 800245e:	e7e6      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x626>
 8002460:	462e      	mov	r6, r5
 8002462:	e7e4      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002468:	d005      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800246a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246e:	d002      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002470:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002474:	d1e8      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x640>
    if(ret == HAL_OK)
 8002476:	bb1d      	cbnz	r5, 80024c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800247a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800247e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002480:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002484:	430b      	orrs	r3, r1
 8002486:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	0659      	lsls	r1, r3, #25
 800248c:	d52c      	bpl.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800248e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002496:	d03f      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8002498:	d814      	bhi.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800249a:	b1e3      	cbz	r3, 80024d6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a0:	d034      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x704>
      ret = HAL_ERROR;
 80024a2:	2601      	movs	r6, #1
 80024a4:	4635      	mov	r5, r6
 80024a6:	e01f      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024a8:	2100      	movs	r1, #0
 80024aa:	1d20      	adds	r0, r4, #4
 80024ac:	f7ff fb28 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024b0:	4605      	mov	r5, r0
      break;
 80024b2:	e7e0      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024b4:	2102      	movs	r1, #2
 80024b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024ba:	f7ff fbe3 	bl	8001c84 <RCCEx_PLL3_Config>
 80024be:	e7f7      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80024c0:	462e      	mov	r6, r5
 80024c2:	e7e1      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x680>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d005      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 80024ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80024ce:	d002      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 80024d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024d4:	d1e5      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
    if(ret == HAL_OK)
 80024d6:	bb2d      	cbnz	r5, 8002524 <HAL_RCCEx_PeriphCLKConfig+0x71c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024d8:	4a13      	ldr	r2, [pc, #76]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 80024da:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80024de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80024e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	061a      	lsls	r2, r3, #24
 80024ec:	d532      	bpl.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80024ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80024f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024f6:	f000 80bb 	beq.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x868>
 80024fa:	d817      	bhi.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x724>
 80024fc:	b1fb      	cbz	r3, 800253e <HAL_RCCEx_PeriphCLKConfig+0x736>
 80024fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002502:	f000 80af 	beq.w	8002664 <HAL_RCCEx_PeriphCLKConfig+0x85c>
      ret = HAL_ERROR;
 8002506:	2601      	movs	r6, #1
 8002508:	4635      	mov	r5, r6
 800250a:	e023      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800250c:	2100      	movs	r1, #0
 800250e:	1d20      	adds	r0, r4, #4
 8002510:	f7ff faf6 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002514:	4605      	mov	r5, r0
      break;
 8002516:	e7de      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002518:	2102      	movs	r1, #2
 800251a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800251e:	f7ff fbb1 	bl	8001c84 <RCCEx_PLL3_Config>
 8002522:	e7f7      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 8002524:	462e      	mov	r6, r5
 8002526:	e7df      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8002528:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 800252c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002530:	d005      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x736>
 8002532:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002536:	d002      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x736>
 8002538:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800253c:	d1e3      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    if(ret == HAL_OK)
 800253e:	2d00      	cmp	r5, #0
 8002540:	f040 809c 	bne.w	800267c <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002544:	4ab3      	ldr	r2, [pc, #716]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002546:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800254a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800254c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002550:	430b      	orrs	r3, r1
 8002552:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	071b      	lsls	r3, r3, #28
 8002558:	d517      	bpl.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x782>
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800255a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800255e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8002562:	d004      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x766>
 8002564:	f240 413a 	movw	r1, #1082	; 0x43a
 8002568:	48ab      	ldr	r0, [pc, #684]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800256a:	f004 f9b1 	bl	80068d0 <assert_failed>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800256e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002572:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002576:	f040 8083 	bne.w	8002680 <HAL_RCCEx_PeriphCLKConfig+0x878>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800257a:	2102      	movs	r1, #2
 800257c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002580:	f7ff fb80 	bl	8001c84 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8002584:	2800      	cmp	r0, #0
 8002586:	bf18      	it	ne
 8002588:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	06df      	lsls	r7, r3, #27
 800258e:	d51c      	bpl.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8002590:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 800259a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800259e:	d007      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80025a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025a4:	d004      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80025a6:	f240 414f 	movw	r1, #1103	; 0x44f
 80025aa:	489b      	ldr	r0, [pc, #620]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80025ac:	f004 f990 	bl	80068d0 <assert_failed>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80025b0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80025b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80025b8:	d169      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x886>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80025ba:	2102      	movs	r1, #2
 80025bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025c0:	f7ff fb60 	bl	8001c84 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80025c4:	2800      	cmp	r0, #0
 80025c6:	bf18      	it	ne
 80025c8:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	0318      	lsls	r0, r3, #12
 80025ce:	d517      	bpl.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->AdcClockSelection)
 80025d0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80025d4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80025d8:	d060      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x894>
 80025da:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80025de:	d005      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80025e0:	2900      	cmp	r1, #0
 80025e2:	d161      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025e4:	1d20      	adds	r0, r4, #4
 80025e6:	f7ff fa8b 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025ea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d15e      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f0:	4a88      	ldr	r2, [pc, #544]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80025f2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80025f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	0359      	lsls	r1, r3, #13
 8002604:	d519      	bpl.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch(PeriphClkInit->UsbClockSelection)
 8002606:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800260a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800260e:	d050      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8002610:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002614:	d007      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261a:	d151      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800261c:	4a7d      	ldr	r2, [pc, #500]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 800261e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002626:	2d00      	cmp	r5, #0
 8002628:	d14d      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800262a:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 800262c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002630:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002632:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002636:	430b      	orrs	r3, r1
 8002638:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	03da      	lsls	r2, r3, #15
 800263e:	d553      	bpl.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8002640:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002642:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8002646:	d004      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8002648:	f240 41b7 	movw	r1, #1207	; 0x4b7
 800264c:	4872      	ldr	r0, [pc, #456]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800264e:	f004 f93f 	bl	80068d0 <assert_failed>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002652:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002654:	b3cb      	cbz	r3, 80026ca <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	f000 80d2 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
      ret = HAL_ERROR;
 800265e:	2601      	movs	r6, #1
 8002660:	4635      	mov	r5, r6
 8002662:	e041      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002664:	2100      	movs	r1, #0
 8002666:	1d20      	adds	r0, r4, #4
 8002668:	f7ff fa4a 	bl	8001b00 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800266c:	4605      	mov	r5, r0
      break;
 800266e:	e766      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x736>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002670:	2102      	movs	r1, #2
 8002672:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002676:	f7ff fb05 	bl	8001c84 <RCCEx_PLL3_Config>
 800267a:	e7f7      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x864>
 800267c:	462e      	mov	r6, r5
 800267e:	e769      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002680:	4a64      	ldr	r2, [pc, #400]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002682:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002684:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002688:	430b      	orrs	r3, r1
 800268a:	6553      	str	r3, [r2, #84]	; 0x54
 800268c:	e77d      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800268e:	4a61      	ldr	r2, [pc, #388]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002690:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002696:	430b      	orrs	r3, r1
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
 800269a:	e796      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800269c:	2102      	movs	r1, #2
 800269e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026a2:	f7ff faef 	bl	8001c84 <RCCEx_PLL3_Config>
 80026a6:	e7a0      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e2>
      ret = HAL_ERROR;
 80026a8:	2601      	movs	r6, #1
 80026aa:	4635      	mov	r5, r6
 80026ac:	e7a8      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 80026ae:	462e      	mov	r6, r5
 80026b0:	e7a6      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026b2:	2101      	movs	r1, #1
 80026b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026b8:	f7ff fae4 	bl	8001c84 <RCCEx_PLL3_Config>
 80026bc:	4605      	mov	r5, r0
      break;
 80026be:	e7b2      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      ret = HAL_ERROR;
 80026c0:	2601      	movs	r6, #1
 80026c2:	4635      	mov	r5, r6
 80026c4:	e7b9      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x832>
 80026c6:	462e      	mov	r6, r5
 80026c8:	e7b7      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ca:	4a52      	ldr	r2, [pc, #328]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80026cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80026d4:	2d00      	cmp	r5, #0
 80026d6:	f040 809a 	bne.w	800280e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80026da:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80026dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80026de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e4:	430b      	orrs	r3, r1
 80026e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	d507      	bpl.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80026ee:	2102      	movs	r1, #2
 80026f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026f4:	f7ff fac6 	bl	8001c84 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80026f8:	2800      	cmp	r0, #0
 80026fa:	bf18      	it	ne
 80026fc:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80026fe:	6821      	ldr	r1, [r4, #0]
 8002700:	038f      	lsls	r7, r1, #14
 8002702:	d512      	bpl.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x922>
    switch(PeriphClkInit->RngClockSelection)
 8002704:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002706:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800270a:	f000 8091 	beq.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800270e:	f200 8085 	bhi.w	800281c <HAL_RCCEx_PeriphCLKConfig+0xa14>
 8002712:	2a00      	cmp	r2, #0
 8002714:	f040 808a 	bne.w	800282c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    if(ret == HAL_OK)
 8002718:	2d00      	cmp	r5, #0
 800271a:	f040 808f 	bne.w	800283c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800271e:	483d      	ldr	r0, [pc, #244]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002720:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002726:	4313      	orrs	r3, r2
 8002728:	6543      	str	r3, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800272a:	02c8      	lsls	r0, r1, #11
 800272c:	d50f      	bpl.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x946>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800272e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002730:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8002734:	d004      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002736:	f240 5116 	movw	r1, #1302	; 0x516
 800273a:	4837      	ldr	r0, [pc, #220]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800273c:	f004 f8c8 	bl	80068d0 <assert_failed>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002740:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002742:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002744:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800274a:	430b      	orrs	r3, r1
 800274c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	00d9      	lsls	r1, r3, #3
 8002752:	d511      	bpl.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x970>
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8002754:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8002758:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800275c:	d004      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800275e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8002762:	482d      	ldr	r0, [pc, #180]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8002764:	f004 f8b4 	bl	80068d0 <assert_failed>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002768:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 800276a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800276e:	6913      	ldr	r3, [r2, #16]
 8002770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002774:	430b      	orrs	r3, r1
 8002776:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	029a      	lsls	r2, r3, #10
 800277c:	d50f      	bpl.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x996>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800277e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002780:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002784:	d004      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002786:	f240 512a 	movw	r1, #1322	; 0x52a
 800278a:	4823      	ldr	r0, [pc, #140]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800278c:	f004 f8a0 	bl	80068d0 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8002792:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002794:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279a:	430b      	orrs	r3, r1
 800279c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	d513      	bpl.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80027a4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80027a8:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80027ac:	d004      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80027ae:	f240 5134 	movw	r1, #1332	; 0x534
 80027b2:	4819      	ldr	r0, [pc, #100]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80027b4:	f004 f88c 	bl	80068d0 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c0:	611a      	str	r2, [r3, #16]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80027c8:	430a      	orrs	r2, r1
 80027ca:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da12      	bge.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80027d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80027d4:	f033 5280 	bics.w	r2, r3, #268435456	; 0x10000000
 80027d8:	d007      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80027da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027de:	d004      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80027e0:	f240 513e 	movw	r1, #1342	; 0x53e
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80027e6:	f004 f873 	bl	80068d0 <assert_failed>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80027ec:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80027ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80027f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80027f4:	430b      	orrs	r3, r1
 80027f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f8:	1c30      	adds	r0, r6, #0
 80027fa:	bf18      	it	ne
 80027fc:	2001      	movne	r0, #1
}
 80027fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002802:	2102      	movs	r1, #2
 8002804:	1d20      	adds	r0, r4, #4
 8002806:	f7ff f97b 	bl	8001b00 <RCCEx_PLL2_Config>
 800280a:	4605      	mov	r5, r0
      break;
 800280c:	e762      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800280e:	462e      	mov	r6, r5
 8002810:	e76a      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
 8002818:	08008287 	.word	0x08008287
    switch(PeriphClkInit->RngClockSelection)
 800281c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002820:	f43f af7a 	beq.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002824:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002828:	f43f af76 	beq.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = HAL_ERROR;
 800282c:	2601      	movs	r6, #1
 800282e:	e77c      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8002832:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002838:	62c3      	str	r3, [r0, #44]	; 0x2c
      break;
 800283a:	e76d      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800283c:	462e      	mov	r6, r5
 800283e:	e774      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x922>
 8002840:	58024400 	.word	0x58024400

08002844 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002844:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002846:	f7ff f921 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800284c:	4a05      	ldr	r2, [pc, #20]	; (8002864 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	f003 031f 	and.w	r3, r3, #31
}
 800285a:	40d8      	lsrs	r0, r3
 800285c:	bd08      	pop	{r3, pc}
 800285e:	bf00      	nop
 8002860:	58024400 	.word	0x58024400
 8002864:	0800843f 	.word	0x0800843f

08002868 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002868:	494e      	ldr	r1, [pc, #312]	; (80029a4 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 800286a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800286c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800286e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002870:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002872:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002876:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 808e 	beq.w	800299a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800287e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002882:	f002 0210 	and.w	r2, r2, #16
 8002886:	ed9f 5a48 	vldr	s10, [pc, #288]	; 80029a8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 800288a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800288e:	436a      	muls	r2, r5
 8002890:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002894:	f004 0203 	and.w	r2, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002898:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 800289c:	2a01      	cmp	r2, #1
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028a6:	d002      	beq.n	80028ae <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80028a8:	d30f      	bcc.n	80028ca <HAL_RCCEx_GetPLL2ClockFreq+0x62>
 80028aa:	2a02      	cmp	r2, #2
 80028ac:	d067      	beq.n	800297e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028ae:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028bc:	eee6 7a05 	vfma.f32	s15, s12, s10
 80028c0:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80029ac <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80028c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80028c8:	e056      	b.n	8002978 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ca:	680b      	ldr	r3, [r1, #0]
 80028cc:	069b      	lsls	r3, r3, #26
 80028ce:	d546      	bpl.n	800295e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028d0:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028d2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028d4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80028d8:	4a35      	ldr	r2, [pc, #212]	; (80029b0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028da:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028de:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028e0:	ee07 2a90 	vmov	s15, r2
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f4:	eee6 7a05 	vfma.f32	s15, s12, s10
 80028f8:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80028fc:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028fe:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002902:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002904:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002908:	ee07 3a10 	vmov	s14, r3
 800290c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002910:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002914:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002918:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800291c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002920:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002922:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002926:	ee07 3a10 	vmov	s14, r3
 800292a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800292e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002932:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002936:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800293a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800293e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002940:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002944:	ee07 3a10 	vmov	s14, r3
 8002948:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800294c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002950:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002954:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002958:	ed80 7a02 	vstr	s14, [r0, #8]
 800295c:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800295e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002970:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80029b4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002974:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002978:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800297c:	e7be      	b.n	80028fc <HAL_RCCEx_GetPLL2ClockFreq+0x94>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800297e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002990:	ed9f 6a09 	vldr	s12, [pc, #36]	; 80029b8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002994:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002998:	e7ee      	b.n	8002978 <HAL_RCCEx_GetPLL2ClockFreq+0x110>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800299a:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800299c:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800299e:	6083      	str	r3, [r0, #8]
 80029a0:	bd30      	pop	{r4, r5, pc}
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	39000000 	.word	0x39000000
 80029ac:	4a742400 	.word	0x4a742400
 80029b0:	03d09000 	.word	0x03d09000
 80029b4:	4c742400 	.word	0x4c742400
 80029b8:	4af42400 	.word	0x4af42400

080029bc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029bc:	494e      	ldr	r1, [pc, #312]	; (8002af8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 80029be:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029c0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80029c2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80029c4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80029c6:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029ca:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 808e 	beq.w	8002aee <HAL_RCCEx_GetPLL3ClockFreq+0x132>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029d2:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80029d6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80029da:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8002afc <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 80029de:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029e2:	436a      	muls	r2, r5
 80029e4:	ee07 2a90 	vmov	s15, r2
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029e8:	f004 0203 	and.w	r2, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80029ec:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    switch (pllsource)
 80029f0:	2a01      	cmp	r2, #1
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029fa:	d002      	beq.n	8002a02 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80029fc:	d30f      	bcc.n	8002a1e <HAL_RCCEx_GetPLL3ClockFreq+0x62>
 80029fe:	2a02      	cmp	r2, #2
 8002a00:	d067      	beq.n	8002ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a10:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002a14:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8002b00 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002a18:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002a1c:	e056      	b.n	8002acc <HAL_RCCEx_GetPLL3ClockFreq+0x110>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a1e:	680b      	ldr	r3, [r1, #0]
 8002a20:	069b      	lsls	r3, r3, #26
 8002a22:	d546      	bpl.n	8002ab2 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a24:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a28:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8002a2c:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <HAL_RCCEx_GetPLL3ClockFreq+0x148>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a32:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a34:	ee07 2a90 	vmov	s15, r2
 8002a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a48:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002a4c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002a50:	4a29      	ldr	r2, [pc, #164]	; (8002af8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a52:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002a56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a58:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a5c:	ee07 3a10 	vmov	s14, r3
 8002a60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a64:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002a68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a6c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002a70:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002a74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a76:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002a7a:	ee07 3a10 	vmov	s14, r3
 8002a7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a82:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002a86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a8a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002a8e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002a92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a94:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002a98:	ee07 3a10 	vmov	s14, r3
 8002a9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002aa0:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002aa4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8002aa8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002aac:	ed80 7a02 	vstr	s14, [r0, #8]
 8002ab0:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ab2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002ac4:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002b08 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8002ac8:	ee77 7aa5 	vadd.f32	s15, s15, s11
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002acc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002ad0:	e7be      	b.n	8002a50 <HAL_RCCEx_GetPLL3ClockFreq+0x94>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ad2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae0:	eee6 7a05 	vfma.f32	s15, s12, s10
 8002ae4:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8002b0c <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002ae8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002aec:	e7ee      	b.n	8002acc <HAL_RCCEx_GetPLL3ClockFreq+0x110>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002aee:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002af0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002af2:	6083      	str	r3, [r0, #8]
 8002af4:	bd30      	pop	{r4, r5, pc}
 8002af6:	bf00      	nop
 8002af8:	58024400 	.word	0x58024400
 8002afc:	39000000 	.word	0x39000000
 8002b00:	4a742400 	.word	0x4a742400
 8002b04:	03d09000 	.word	0x03d09000
 8002b08:	4c742400 	.word	0x4c742400
 8002b0c:	4af42400 	.word	0x4af42400

08002b10 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8002b10:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b12:	f7fe fd49 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCCEx_GetD1SysClockFreq+0x20>)
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <HAL_RCCEx_GetD1SysClockFreq+0x24>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	40d8      	lsrs	r0, r3
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8002b2a:	6018      	str	r0, [r3, #0]
}
 8002b2c:	bd08      	pop	{r3, pc}
 8002b2e:	bf00      	nop
 8002b30:	58024400 	.word	0x58024400
 8002b34:	0800843f 	.word	0x0800843f
 8002b38:	20000014 	.word	0x20000014

08002b3c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	f042 0210 	orr.w	r2, r2, #16
 8002b4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 8002b5e:	f022 0203 	bic.w	r2, r2, #3
 8002b62:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b6a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b6c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002b70:	2a04      	cmp	r2, #4
 8002b72:	d00b      	beq.n	8002b8c <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8002b74:	068a      	lsls	r2, r1, #26
 8002b76:	d509      	bpl.n	8002b8c <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8002b78:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b80:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	f042 0220 	orr.w	r2, r2, #32
 8002b8a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b8c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002b90:	2a03      	cmp	r2, #3
 8002b92:	d00b      	beq.n	8002bac <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8002b94:	064a      	lsls	r2, r1, #25
 8002b96:	d509      	bpl.n	8002bac <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b98:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002b9c:	f042 0204 	orr.w	r2, r2, #4
 8002ba0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002baa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8002bac:	058a      	lsls	r2, r1, #22
 8002bae:	d509      	bpl.n	8002bc4 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002bb0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc2:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8002bc4:	05ca      	lsls	r2, r1, #23
 8002bc6:	d509      	bpl.n	8002bdc <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002bc8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002bcc:	f042 0208 	orr.w	r2, r2, #8
 8002bd0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8002be2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 8002be6:	4770      	bx	lr

08002be8 <HAL_SPI_Init>:
{
 8002be8:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002bea:	4604      	mov	r4, r0
 8002bec:	b908      	cbnz	r0, 8002bf2 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 8002bee:	2001      	movs	r0, #1
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002bf2:	6803      	ldr	r3, [r0, #0]
 8002bf4:	4a83      	ldr	r2, [pc, #524]	; (8002e04 <HAL_SPI_Init+0x21c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d016      	beq.n	8002c28 <HAL_SPI_Init+0x40>
 8002bfa:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d012      	beq.n	8002c28 <HAL_SPI_Init+0x40>
 8002c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_SPI_Init+0x40>
 8002c0a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00a      	beq.n	8002c28 <HAL_SPI_Init+0x40>
 8002c12:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d006      	beq.n	8002c28 <HAL_SPI_Init+0x40>
 8002c1a:	4a7b      	ldr	r2, [pc, #492]	; (8002e08 <HAL_SPI_Init+0x220>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <HAL_SPI_Init+0x40>
 8002c20:	21f6      	movs	r1, #246	; 0xf6
 8002c22:	487a      	ldr	r0, [pc, #488]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002c24:	f003 fe54 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002c28:	6863      	ldr	r3, [r4, #4]
 8002c2a:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8002c2e:	d003      	beq.n	8002c38 <HAL_SPI_Init+0x50>
 8002c30:	21f7      	movs	r1, #247	; 0xf7
 8002c32:	4876      	ldr	r0, [pc, #472]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002c34:	f003 fe4c 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002c38:	68a3      	ldr	r3, [r4, #8]
 8002c3a:	f433 23c0 	bics.w	r3, r3, #393216	; 0x60000
 8002c3e:	d003      	beq.n	8002c48 <HAL_SPI_Init+0x60>
 8002c40:	21f8      	movs	r1, #248	; 0xf8
 8002c42:	4872      	ldr	r0, [pc, #456]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002c44:	f003 fe44 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002c48:	68e3      	ldr	r3, [r4, #12]
 8002c4a:	3b03      	subs	r3, #3
 8002c4c:	2b1c      	cmp	r3, #28
 8002c4e:	d903      	bls.n	8002c58 <HAL_SPI_Init+0x70>
 8002c50:	21f9      	movs	r1, #249	; 0xf9
 8002c52:	486e      	ldr	r0, [pc, #440]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002c54:	f003 fe3c 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8002c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c5a:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8002c5e:	d00b      	beq.n	8002c78 <HAL_SPI_Init+0x90>
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d009      	beq.n	8002c78 <HAL_SPI_Init+0x90>
 8002c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c68:	d006      	beq.n	8002c78 <HAL_SPI_Init+0x90>
 8002c6a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c6e:	d003      	beq.n	8002c78 <HAL_SPI_Init+0x90>
 8002c70:	21fa      	movs	r1, #250	; 0xfa
 8002c72:	4866      	ldr	r0, [pc, #408]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002c74:	f003 fe2c 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002c78:	69a3      	ldr	r3, [r4, #24]
 8002c7a:	f033 6280 	bics.w	r2, r3, #67108864	; 0x4000000
 8002c7e:	d006      	beq.n	8002c8e <HAL_SPI_Init+0xa6>
 8002c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c84:	d003      	beq.n	8002c8e <HAL_SPI_Init+0xa6>
 8002c86:	21fb      	movs	r1, #251	; 0xfb
 8002c88:	4860      	ldr	r0, [pc, #384]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002c8a:	f003 fe21 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8002c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c90:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8002c94:	d003      	beq.n	8002c9e <HAL_SPI_Init+0xb6>
 8002c96:	21fc      	movs	r1, #252	; 0xfc
 8002c98:	485c      	ldr	r0, [pc, #368]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002c9a:	f003 fe19 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002c9e:	69e3      	ldr	r3, [r4, #28]
 8002ca0:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8002ca4:	d006      	beq.n	8002cb4 <HAL_SPI_Init+0xcc>
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d003      	beq.n	8002cb4 <HAL_SPI_Init+0xcc>
 8002cac:	21fd      	movs	r1, #253	; 0xfd
 8002cae:	4857      	ldr	r0, [pc, #348]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002cb0:	f003 fe0e 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002cb4:	6a23      	ldr	r3, [r4, #32]
 8002cb6:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8002cba:	d003      	beq.n	8002cc4 <HAL_SPI_Init+0xdc>
 8002cbc:	21fe      	movs	r1, #254	; 0xfe
 8002cbe:	4853      	ldr	r0, [pc, #332]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002cc0:	f003 fe06 	bl	80068d0 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cc6:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8002cca:	d003      	beq.n	8002cd4 <HAL_SPI_Init+0xec>
 8002ccc:	21ff      	movs	r1, #255	; 0xff
 8002cce:	484f      	ldr	r0, [pc, #316]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002cd0:	f003 fdfe 	bl	80068d0 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cd6:	b98b      	cbnz	r3, 8002cfc <HAL_SPI_Init+0x114>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 8002cde:	d004      	beq.n	8002cea <HAL_SPI_Init+0x102>
 8002ce0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002ce4:	4849      	ldr	r0, [pc, #292]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002ce6:	f003 fdf3 	bl	80068d0 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002cea:	6963      	ldr	r3, [r4, #20]
 8002cec:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	d004      	beq.n	8002cfc <HAL_SPI_Init+0x114>
 8002cf2:	f240 1103 	movw	r1, #259	; 0x103
 8002cf6:	4845      	ldr	r0, [pc, #276]	; (8002e0c <HAL_SPI_Init+0x224>)
 8002cf8:	f003 fdea 	bl	80068d0 <assert_failed>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cfc:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002cfe:	6822      	ldr	r2, [r4, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d00:	62a3      	str	r3, [r4, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_SPI_Init+0x21c>)
 8002d04:	429a      	cmp	r2, r3
 8002d06:	68e3      	ldr	r3, [r4, #12]
 8002d08:	d009      	beq.n	8002d1e <HAL_SPI_Init+0x136>
 8002d0a:	4941      	ldr	r1, [pc, #260]	; (8002e10 <HAL_SPI_Init+0x228>)
 8002d0c:	428a      	cmp	r2, r1
 8002d0e:	d006      	beq.n	8002d1e <HAL_SPI_Init+0x136>
 8002d10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d14:	428a      	cmp	r2, r1
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Init+0x136>
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	f63f af68 	bhi.w	8002bee <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002d1e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8002d20:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8002d22:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8002d24:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8002d26:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8002d2a:	4936      	ldr	r1, [pc, #216]	; (8002e04 <HAL_SPI_Init+0x21c>)
 8002d2c:	428a      	cmp	r2, r1
 8002d2e:	d067      	beq.n	8002e00 <HAL_SPI_Init+0x218>
 8002d30:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8002d34:	428a      	cmp	r2, r1
 8002d36:	d063      	beq.n	8002e00 <HAL_SPI_Init+0x218>
 8002d38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002d3c:	428a      	cmp	r2, r1
 8002d3e:	d05f      	beq.n	8002e00 <HAL_SPI_Init+0x218>
 8002d40:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8002d42:	f63f af54 	bhi.w	8002bee <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d46:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002d4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d4e:	b923      	cbnz	r3, 8002d5a <HAL_SPI_Init+0x172>
    hspi->Lock = HAL_UNLOCKED;
 8002d50:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8002d54:	4620      	mov	r0, r4
 8002d56:	f003 fdd5 	bl	8006904 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d5a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002d5c:	6822      	ldr	r2, [r4, #0]
 8002d5e:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d60:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8002d64:	6813      	ldr	r3, [r2, #0]
 8002d66:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8002d6e:	69a3      	ldr	r3, [r4, #24]
 8002d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d74:	d107      	bne.n	8002d86 <HAL_SPI_Init+0x19e>
 8002d76:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002d7a:	d104      	bne.n	8002d86 <HAL_SPI_Init+0x19e>
 8002d7c:	b91d      	cbnz	r5, 8002d86 <HAL_SPI_Init+0x19e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8002d7e:	6810      	ldr	r0, [r2, #0]
 8002d80:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8002d84:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8002d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d88:	69e0      	ldr	r0, [r4, #28]
 8002d8a:	4330      	orrs	r0, r6
 8002d8c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8002d8e:	4330      	orrs	r0, r6
 8002d90:	68e6      	ldr	r6, [r4, #12]
 8002d92:	4330      	orrs	r0, r6
 8002d94:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8002d96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002d98:	4303      	orrs	r3, r0
 8002d9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d9c:	4303      	orrs	r3, r0
 8002d9e:	6920      	ldr	r0, [r4, #16]
 8002da0:	432b      	orrs	r3, r5
 8002da2:	4303      	orrs	r3, r0
 8002da4:	6960      	ldr	r0, [r4, #20]
 8002da6:	4303      	orrs	r3, r0
 8002da8:	6a20      	ldr	r0, [r4, #32]
 8002daa:	4303      	orrs	r3, r0
 8002dac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002dae:	430b      	orrs	r3, r1
 8002db0:	4303      	orrs	r3, r0
 8002db2:	68a0      	ldr	r0, [r4, #8]
 8002db4:	4303      	orrs	r3, r0
 8002db6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002db8:	4303      	orrs	r3, r0
 8002dba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dbc:	4303      	orrs	r3, r0
 8002dbe:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8002dc0:	b959      	cbnz	r1, 8002dda <HAL_SPI_Init+0x1f2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8002dc2:	6893      	ldr	r3, [r2, #8]
 8002dc4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002dc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dcc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8002dce:	6893      	ldr	r3, [r2, #8]
 8002dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dda:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8002de2:	024b      	lsls	r3, r1, #9
 8002de4:	d505      	bpl.n	8002df2 <HAL_SPI_Init+0x20a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8002de6:	68d3      	ldr	r3, [r2, #12]
 8002de8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dee:	430b      	orrs	r3, r1
 8002df0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002df2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002df4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002df6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8002dfa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	e79e      	b.n	8002d42 <HAL_SPI_Init+0x15a>
 8002e04:	40013000 	.word	0x40013000
 8002e08:	58001400 	.word	0x58001400
 8002e0c:	080082c2 	.word	0x080082c2
 8002e10:	40003800 	.word	0x40003800

08002e14 <HAL_SPI_DeInit>:
{
 8002e14:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002e16:	4604      	mov	r4, r0
 8002e18:	b370      	cbz	r0, 8002e78 <HAL_SPI_DeInit+0x64>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_SPI_DeInit+0x68>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d017      	beq.n	8002e52 <HAL_SPI_DeInit+0x3e>
 8002e22:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_SPI_DeInit+0x3e>
 8002e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00f      	beq.n	8002e52 <HAL_SPI_DeInit+0x3e>
 8002e32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <HAL_SPI_DeInit+0x3e>
 8002e3a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_SPI_DeInit+0x3e>
 8002e42:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <HAL_SPI_DeInit+0x6c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_SPI_DeInit+0x3e>
 8002e48:	f240 11c7 	movw	r1, #455	; 0x1c7
 8002e4c:	480d      	ldr	r0, [pc, #52]	; (8002e84 <HAL_SPI_DeInit+0x70>)
 8002e4e:	f003 fd3f 	bl	80068d0 <assert_failed>
  __HAL_SPI_DISABLE(hspi);
 8002e52:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e54:	2302      	movs	r3, #2
  HAL_SPI_MspDeInit(hspi);
 8002e56:	4620      	mov	r0, r4
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e58:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002e64:	f003 fd88 	bl	8006978 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8002e6e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_RESET;
 8002e72:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  return HAL_OK;
 8002e76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
}
 8002e7a:	bd10      	pop	{r4, pc}
 8002e7c:	40013000 	.word	0x40013000
 8002e80:	58001400 	.word	0x58001400
 8002e84:	080082c2 	.word	0x080082c2

08002e88 <HAL_SPI_TransmitReceive>:
{
 8002e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e8c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002e8e:	6883      	ldr	r3, [r0, #8]
{
 8002e90:	4604      	mov	r4, r0
 8002e92:	460e      	mov	r6, r1
 8002e94:	4691      	mov	r9, r2
 8002e96:	9f08      	ldr	r7, [sp, #32]
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002e98:	b123      	cbz	r3, 8002ea4 <HAL_SPI_TransmitReceive+0x1c>
 8002e9a:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8002e9e:	48ad      	ldr	r0, [pc, #692]	; (8003154 <HAL_SPI_TransmitReceive+0x2cc>)
 8002ea0:	f003 fd16 	bl	80068d0 <assert_failed>
  __HAL_LOCK(hspi);
 8002ea4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d015      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x50>
 8002eac:	2301      	movs	r3, #1
 8002eae:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002eb2:	f7fd fc55 	bl	8000760 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002eb6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8002eba:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8002ebc:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002ebe:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d00c      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x56>
 8002ec4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002ec8:	d103      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eca:	68a2      	ldr	r2, [r4, #8]
 8002ecc:	b90a      	cbnz	r2, 8002ed2 <HAL_SPI_TransmitReceive+0x4a>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d005      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x56>
    __HAL_UNLOCK(hspi);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8002ede:	b11e      	cbz	r6, 8002ee8 <HAL_SPI_TransmitReceive+0x60>
 8002ee0:	f1b9 0f00 	cmp.w	r9, #0
 8002ee4:	d000      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x60>
 8002ee6:	b92d      	cbnz	r5, 8002ef4 <HAL_SPI_TransmitReceive+0x6c>
    __HAL_UNLOCK(hspi);
 8002ee8:	2300      	movs	r3, #0
    return errorcode;
 8002eea:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8002eec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8002ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ef4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002efc:	2305      	movs	r3, #5
 8002efe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002f04:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f06:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f0a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxISR       = NULL;
 8002f12:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->RxXferCount = Size;
 8002f14:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8002f18:	6763      	str	r3, [r4, #116]	; 0x74
  hspi->TxXferCount = Size;
 8002f1a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002f1e:	6853      	ldr	r3, [r2, #4]
  hspi->RxXferSize  = Size;
 8002f20:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002f24:	ea4f 4313 	mov.w	r3, r3, lsr #16
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f28:	65e6      	str	r6, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8002f2a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002f2e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8002f32:	ea43 0305 	orr.w	r3, r3, r5
 8002f36:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8002f38:	6813      	ldr	r3, [r2, #0]
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f40:	d103      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0xc2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f48:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002f4a:	68e3      	ldr	r3, [r4, #12]
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d947      	bls.n	8002fe0 <HAL_SPI_TransmitReceive+0x158>
 8002f50:	4629      	mov	r1, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8002f52:	f248 0008 	movw	r0, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8002f56:	6953      	ldr	r3, [r2, #20]
 8002f58:	079e      	lsls	r6, r3, #30
 8002f5a:	d50e      	bpl.n	8002f7a <HAL_SPI_TransmitReceive+0xf2>
 8002f5c:	b16d      	cbz	r5, 8002f7a <HAL_SPI_TransmitReceive+0xf2>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002f5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f64:	6215      	str	r5, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8002f66:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8002f68:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8002f74:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8002f78:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8002f7a:	6953      	ldr	r3, [r2, #20]
 8002f7c:	4203      	tst	r3, r0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x11a>
 8002f80:	2900      	cmp	r1, #0
 8002f82:	f000 8110 	beq.w	80031a6 <HAL_SPI_TransmitReceive+0x31e>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002f86:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f8a:	f843 1b04 	str.w	r1, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8002f8e:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8002f90:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8002f9c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8002fa0:	b289      	uxth	r1, r1
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002fa2:	2d00      	cmp	r5, #0
 8002fa4:	d1d7      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0xce>
 8002fa6:	2900      	cmp	r1, #0
 8002fa8:	d1d5      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0xce>
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002faa:	f7fd fbd9 	bl	8000760 <HAL_GetTick>
 8002fae:	eba0 0008 	sub.w	r0, r0, r8
 8002fb2:	4287      	cmp	r7, r0
 8002fb4:	f200 8093 	bhi.w	80030de <HAL_SPI_TransmitReceive+0x256>
 8002fb8:	1c78      	adds	r0, r7, #1
 8002fba:	f000 8090 	beq.w	80030de <HAL_SPI_TransmitReceive+0x256>
        SPI_CloseTransfer(hspi);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff fdbc 	bl	8002b3c <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8002fc4:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8002fc6:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 8002fc8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002fcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8002fd8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 8002fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe0:	2b07      	cmp	r3, #7
 8002fe2:	462e      	mov	r6, r5
 8002fe4:	d83f      	bhi.n	8003066 <HAL_SPI_TransmitReceive+0x1de>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	6953      	ldr	r3, [r2, #20]
 8002fea:	0798      	lsls	r0, r3, #30
 8002fec:	d515      	bpl.n	800301a <HAL_SPI_TransmitReceive+0x192>
 8002fee:	b1a5      	cbz	r5, 800301a <HAL_SPI_TransmitReceive+0x192>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8002ff0:	2d03      	cmp	r5, #3
 8002ff2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ff4:	f240 8097 	bls.w	8003126 <HAL_SPI_TransmitReceive+0x29e>
 8002ff8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002ffa:	2940      	cmp	r1, #64	; 0x40
 8002ffc:	f240 8095 	bls.w	800312a <HAL_SPI_TransmitReceive+0x2a2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003000:	f853 1b04 	ldr.w	r1, [r3], #4
 8003004:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003006:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003008:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800300c:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 800300e:	b29b      	uxth	r3, r3
 8003010:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003014:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8003018:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	6953      	ldr	r3, [r2, #20]
 800301e:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8003022:	d013      	beq.n	800304c <HAL_SPI_TransmitReceive+0x1c4>
 8003024:	b196      	cbz	r6, 800304c <HAL_SPI_TransmitReceive+0x1c4>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003026:	6953      	ldr	r3, [r2, #20]
 8003028:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800302c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800302e:	f000 8093 	beq.w	8003158 <HAL_SPI_TransmitReceive+0x2d0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003032:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003034:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003038:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800303a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800303e:	3b04      	subs	r3, #4
          hspi->RxXferCount--;
 8003040:	b29b      	uxth	r3, r3
 8003042:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003046:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 800304a:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800304c:	f7fd fb88 	bl	8000760 <HAL_GetTick>
 8003050:	eba0 0008 	sub.w	r0, r0, r8
 8003054:	4287      	cmp	r7, r0
 8003056:	d801      	bhi.n	800305c <HAL_SPI_TransmitReceive+0x1d4>
 8003058:	1c79      	adds	r1, r7, #1
 800305a:	d1b0      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x136>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800305c:	2d00      	cmp	r5, #0
 800305e:	d1c2      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x15e>
 8003060:	2e00      	cmp	r6, #0
 8003062:	d1c0      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x15e>
 8003064:	e03b      	b.n	80030de <HAL_SPI_TransmitReceive+0x256>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	6953      	ldr	r3, [r2, #20]
 800306a:	0799      	lsls	r1, r3, #30
 800306c:	d513      	bpl.n	8003096 <HAL_SPI_TransmitReceive+0x20e>
 800306e:	b195      	cbz	r5, 8003096 <HAL_SPI_TransmitReceive+0x20e>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003070:	2d01      	cmp	r5, #1
 8003072:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003074:	d947      	bls.n	8003106 <HAL_SPI_TransmitReceive+0x27e>
 8003076:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003078:	2900      	cmp	r1, #0
 800307a:	d044      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x27e>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800307c:	f853 1b04 	ldr.w	r1, [r3], #4
 8003080:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003082:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003084:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003088:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800308a:	b29b      	uxth	r3, r3
 800308c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003090:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8003094:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8003096:	6953      	ldr	r3, [r2, #20]
 8003098:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800309c:	d012      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x23c>
 800309e:	b18e      	cbz	r6, 80030c4 <HAL_SPI_TransmitReceive+0x23c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80030a0:	6953      	ldr	r3, [r2, #20]
 80030a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80030a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030a8:	d035      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x28e>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80030aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ac:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80030b0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80030b2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80030b6:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80030be:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 80030c2:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c4:	f7fd fb4c 	bl	8000760 <HAL_GetTick>
 80030c8:	eba0 0008 	sub.w	r0, r0, r8
 80030cc:	4287      	cmp	r7, r0
 80030ce:	d802      	bhi.n	80030d6 <HAL_SPI_TransmitReceive+0x24e>
 80030d0:	1c7b      	adds	r3, r7, #1
 80030d2:	f47f af74 	bne.w	8002fbe <HAL_SPI_TransmitReceive+0x136>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	d1c5      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x1de>
 80030da:	2e00      	cmp	r6, #0
 80030dc:	d1c3      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x1de>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	071b      	lsls	r3, r3, #28
 80030e4:	d550      	bpl.n	8003188 <HAL_SPI_TransmitReceive+0x300>
  SPI_CloseTransfer(hspi);
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7ff fd28 	bl	8002b3c <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 80030ec:	2300      	movs	r3, #0
 80030ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 80030fc:	3000      	adds	r0, #0
 80030fe:	bf18      	it	ne
 8003100:	2001      	movne	r0, #1
 8003102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8003106:	f833 1b02 	ldrh.w	r1, [r3], #2
 800310a:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800310c:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800310e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8003112:	3b01      	subs	r3, #1
 8003114:	e7b9      	b.n	800308a <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003116:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003118:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800311c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800311e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003122:	3b01      	subs	r3, #1
 8003124:	e7c8      	b.n	80030b8 <HAL_SPI_TransmitReceive+0x230>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003126:	2d01      	cmp	r5, #1
 8003128:	d009      	beq.n	800313e <HAL_SPI_TransmitReceive+0x2b6>
 800312a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800312c:	b139      	cbz	r1, 800313e <HAL_SPI_TransmitReceive+0x2b6>
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 800312e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003132:	8411      	strh	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003134:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003136:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800313a:	3b02      	subs	r3, #2
 800313c:	e767      	b.n	800300e <HAL_SPI_TransmitReceive+0x186>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003144:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003146:	3301      	adds	r3, #1
 8003148:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800314a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800314e:	3b01      	subs	r3, #1
 8003150:	e75d      	b.n	800300e <HAL_SPI_TransmitReceive+0x186>
 8003152:	bf00      	nop
 8003154:	080082c2 	.word	0x080082c2
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8003158:	6951      	ldr	r1, [r2, #20]
 800315a:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800315e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003162:	d907      	bls.n	8003174 <HAL_SPI_TransmitReceive+0x2ec>
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8003164:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003166:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800316a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800316c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003170:	3b02      	subs	r3, #2
 8003172:	e765      	b.n	8003040 <HAL_SPI_TransmitReceive+0x1b8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003174:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8003178:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800317a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800317c:	3301      	adds	r3, #1
 800317e:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8003180:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003184:	3b01      	subs	r3, #1
 8003186:	e75b      	b.n	8003040 <HAL_SPI_TransmitReceive+0x1b8>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003188:	f7fd faea 	bl	8000760 <HAL_GetTick>
 800318c:	eba0 0008 	sub.w	r0, r0, r8
 8003190:	4287      	cmp	r7, r0
 8003192:	d8a4      	bhi.n	80030de <HAL_SPI_TransmitReceive+0x256>
 8003194:	1c7a      	adds	r2, r7, #1
 8003196:	d0a2      	beq.n	80030de <HAL_SPI_TransmitReceive+0x256>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003198:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800319c:	f043 0320 	orr.w	r3, r3, #32
 80031a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80031a4:	e79f      	b.n	80030e6 <HAL_SPI_TransmitReceive+0x25e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80031a6:	2d00      	cmp	r5, #0
 80031a8:	f47f aed5 	bne.w	8002f56 <HAL_SPI_TransmitReceive+0xce>
 80031ac:	e6fd      	b.n	8002faa <HAL_SPI_TransmitReceive+0x122>
 80031ae:	bf00      	nop

080031b0 <HAL_SPI_GetState>:
  return hspi->State;
 80031b0:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
}
 80031b4:	4770      	bx	lr

080031b6 <HAL_UART_GetState>:
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80031b6:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 80031ba:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
}
 80031be:	4310      	orrs	r0, r2
 80031c0:	4770      	bx	lr
 80031c2:	0000      	movs	r0, r0
 80031c4:	0000      	movs	r0, r0
	...

080031c8 <UART_SetConfig>:
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80031c8:	6842      	ldr	r2, [r0, #4]
 80031ca:	4ba3      	ldr	r3, [pc, #652]	; (8003458 <UART_SetConfig+0x290>)
 80031cc:	429a      	cmp	r2, r3
{
 80031ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031d2:	4605      	mov	r5, r0
 80031d4:	b087      	sub	sp, #28
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80031d6:	d904      	bls.n	80031e2 <UART_SetConfig+0x1a>
 80031d8:	f640 3134 	movw	r1, #2868	; 0xb34
 80031dc:	489f      	ldr	r0, [pc, #636]	; (800345c <UART_SetConfig+0x294>)
 80031de:	f003 fb77 	bl	80068d0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80031e2:	68ab      	ldr	r3, [r5, #8]
 80031e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031e8:	d007      	beq.n	80031fa <UART_SetConfig+0x32>
 80031ea:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80031ee:	d004      	beq.n	80031fa <UART_SetConfig+0x32>
 80031f0:	f640 3135 	movw	r1, #2869	; 0xb35
 80031f4:	4899      	ldr	r0, [pc, #612]	; (800345c <UART_SetConfig+0x294>)
 80031f6:	f003 fb6b 	bl	80068d0 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80031fa:	4b99      	ldr	r3, [pc, #612]	; (8003460 <UART_SetConfig+0x298>)
 80031fc:	682a      	ldr	r2, [r5, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	68eb      	ldr	r3, [r5, #12]
 8003202:	f040 8081 	bne.w	8003308 <UART_SetConfig+0x140>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8003206:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800320a:	d004      	beq.n	8003216 <UART_SetConfig+0x4e>
 800320c:	f640 3138 	movw	r1, #2872	; 0xb38
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003210:	4892      	ldr	r0, [pc, #584]	; (800345c <UART_SetConfig+0x294>)
 8003212:	f003 fb5d 	bl	80068d0 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003216:	692b      	ldr	r3, [r5, #16]
 8003218:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800321c:	d007      	beq.n	800322e <UART_SetConfig+0x66>
 800321e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003222:	d004      	beq.n	800322e <UART_SetConfig+0x66>
 8003224:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8003228:	488c      	ldr	r0, [pc, #560]	; (800345c <UART_SetConfig+0x294>)
 800322a:	f003 fb51 	bl	80068d0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800322e:	696b      	ldr	r3, [r5, #20]
 8003230:	f033 020c 	bics.w	r2, r3, #12
 8003234:	d100      	bne.n	8003238 <UART_SetConfig+0x70>
 8003236:	b923      	cbnz	r3, 8003242 <UART_SetConfig+0x7a>
 8003238:	f640 3141 	movw	r1, #2881	; 0xb41
 800323c:	4887      	ldr	r0, [pc, #540]	; (800345c <UART_SetConfig+0x294>)
 800323e:	f003 fb47 	bl	80068d0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003242:	69ab      	ldr	r3, [r5, #24]
 8003244:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8003248:	d004      	beq.n	8003254 <UART_SetConfig+0x8c>
 800324a:	f640 3142 	movw	r1, #2882	; 0xb42
 800324e:	4883      	ldr	r0, [pc, #524]	; (800345c <UART_SetConfig+0x294>)
 8003250:	f003 fb3e 	bl	80068d0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003254:	69eb      	ldr	r3, [r5, #28]
 8003256:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800325a:	d004      	beq.n	8003266 <UART_SetConfig+0x9e>
 800325c:	f640 3143 	movw	r1, #2883	; 0xb43
 8003260:	487e      	ldr	r0, [pc, #504]	; (800345c <UART_SetConfig+0x294>)
 8003262:	f003 fb35 	bl	80068d0 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8003266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003268:	2b0b      	cmp	r3, #11
 800326a:	d904      	bls.n	8003276 <UART_SetConfig+0xae>
 800326c:	f640 3144 	movw	r1, #2884	; 0xb44
 8003270:	487a      	ldr	r0, [pc, #488]	; (800345c <UART_SetConfig+0x294>)
 8003272:	f003 fb2d 	bl	80068d0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003276:	68ab      	ldr	r3, [r5, #8]
 8003278:	6929      	ldr	r1, [r5, #16]
 800327a:	69ea      	ldr	r2, [r5, #28]
 800327c:	4319      	orrs	r1, r3
 800327e:	696b      	ldr	r3, [r5, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003280:	6e68      	ldr	r0, [r5, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003282:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003284:	682b      	ldr	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003286:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003288:	681c      	ldr	r4, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800328a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800328c:	4875      	ldr	r0, [pc, #468]	; (8003464 <UART_SetConfig+0x29c>)
 800328e:	4020      	ands	r0, r4
 8003290:	4301      	orrs	r1, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003292:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003294:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800329c:	4301      	orrs	r1, r0
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800329e:	69a8      	ldr	r0, [r5, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a0:	6059      	str	r1, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032a2:	496f      	ldr	r1, [pc, #444]	; (8003460 <UART_SetConfig+0x298>)
 80032a4:	428b      	cmp	r3, r1
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032a6:	bf1c      	itt	ne
 80032a8:	6a29      	ldrne	r1, [r5, #32]
 80032aa:	4308      	orrne	r0, r1
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80032b2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80032b6:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ba:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032be:	f021 010f 	bic.w	r1, r1, #15
 80032c2:	4301      	orrs	r1, r0
 80032c4:	62d9      	str	r1, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c6:	4968      	ldr	r1, [pc, #416]	; (8003468 <UART_SetConfig+0x2a0>)
 80032c8:	428b      	cmp	r3, r1
 80032ca:	d12d      	bne.n	8003328 <UART_SetConfig+0x160>
 80032cc:	4b67      	ldr	r3, [pc, #412]	; (800346c <UART_SetConfig+0x2a4>)
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d4:	2b28      	cmp	r3, #40	; 0x28
 80032d6:	f200 8779 	bhi.w	80041cc <UART_SetConfig+0x1004>
 80032da:	4965      	ldr	r1, [pc, #404]	; (8003470 <UART_SetConfig+0x2a8>)
 80032dc:	5ccc      	ldrb	r4, [r1, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80032e2:	f040 877a 	bne.w	80041da <UART_SetConfig+0x1012>
  {
    switch (clocksource)
 80032e6:	2c08      	cmp	r4, #8
 80032e8:	f000 84f3 	beq.w	8003cd2 <UART_SetConfig+0xb0a>
 80032ec:	f200 8407 	bhi.w	8003afe <UART_SetConfig+0x936>
 80032f0:	2c01      	cmp	r4, #1
 80032f2:	f000 847f 	beq.w	8003bf4 <UART_SetConfig+0xa2c>
 80032f6:	f0c0 8441 	bcc.w	8003b7c <UART_SetConfig+0x9b4>
 80032fa:	2c04      	cmp	r4, #4
 80032fc:	f000 84c4 	beq.w	8003c88 <UART_SetConfig+0xac0>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        break;
      default:
        ret = HAL_ERROR;
 8003300:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003302:	2300      	movs	r3, #0
 8003304:	f000 bc9d 	b.w	8003c42 <UART_SetConfig+0xa7a>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003308:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800330c:	d004      	beq.n	8003318 <UART_SetConfig+0x150>
 800330e:	f640 313c 	movw	r1, #2876	; 0xb3c
 8003312:	4852      	ldr	r0, [pc, #328]	; (800345c <UART_SetConfig+0x294>)
 8003314:	f003 fadc 	bl	80068d0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003318:	6a2b      	ldr	r3, [r5, #32]
 800331a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800331e:	f43f af7a 	beq.w	8003216 <UART_SetConfig+0x4e>
 8003322:	f640 313d 	movw	r1, #2877	; 0xb3d
 8003326:	e773      	b.n	8003210 <UART_SetConfig+0x48>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003328:	4952      	ldr	r1, [pc, #328]	; (8003474 <UART_SetConfig+0x2ac>)
 800332a:	428b      	cmp	r3, r1
 800332c:	d108      	bne.n	8003340 <UART_SetConfig+0x178>
 800332e:	4b4f      	ldr	r3, [pc, #316]	; (800346c <UART_SetConfig+0x2a4>)
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	2b05      	cmp	r3, #5
 8003338:	f200 8745 	bhi.w	80041c6 <UART_SetConfig+0xffe>
 800333c:	494e      	ldr	r1, [pc, #312]	; (8003478 <UART_SetConfig+0x2b0>)
 800333e:	e7cd      	b.n	80032dc <UART_SetConfig+0x114>
 8003340:	494e      	ldr	r1, [pc, #312]	; (800347c <UART_SetConfig+0x2b4>)
 8003342:	428b      	cmp	r3, r1
 8003344:	d108      	bne.n	8003358 <UART_SetConfig+0x190>
 8003346:	4b49      	ldr	r3, [pc, #292]	; (800346c <UART_SetConfig+0x2a4>)
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	2b05      	cmp	r3, #5
 8003350:	f200 8739 	bhi.w	80041c6 <UART_SetConfig+0xffe>
 8003354:	494a      	ldr	r1, [pc, #296]	; (8003480 <UART_SetConfig+0x2b8>)
 8003356:	e7c1      	b.n	80032dc <UART_SetConfig+0x114>
 8003358:	494a      	ldr	r1, [pc, #296]	; (8003484 <UART_SetConfig+0x2bc>)
 800335a:	428b      	cmp	r3, r1
 800335c:	d108      	bne.n	8003370 <UART_SetConfig+0x1a8>
 800335e:	4b43      	ldr	r3, [pc, #268]	; (800346c <UART_SetConfig+0x2a4>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	2b05      	cmp	r3, #5
 8003368:	f200 872d 	bhi.w	80041c6 <UART_SetConfig+0xffe>
 800336c:	4946      	ldr	r1, [pc, #280]	; (8003488 <UART_SetConfig+0x2c0>)
 800336e:	e7b5      	b.n	80032dc <UART_SetConfig+0x114>
 8003370:	4946      	ldr	r1, [pc, #280]	; (800348c <UART_SetConfig+0x2c4>)
 8003372:	428b      	cmp	r3, r1
 8003374:	d108      	bne.n	8003388 <UART_SetConfig+0x1c0>
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <UART_SetConfig+0x2a4>)
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	2b05      	cmp	r3, #5
 8003380:	f200 8721 	bhi.w	80041c6 <UART_SetConfig+0xffe>
 8003384:	4942      	ldr	r1, [pc, #264]	; (8003490 <UART_SetConfig+0x2c8>)
 8003386:	e7a9      	b.n	80032dc <UART_SetConfig+0x114>
 8003388:	4942      	ldr	r1, [pc, #264]	; (8003494 <UART_SetConfig+0x2cc>)
 800338a:	428b      	cmp	r3, r1
 800338c:	d108      	bne.n	80033a0 <UART_SetConfig+0x1d8>
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <UART_SetConfig+0x2a4>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003396:	2b28      	cmp	r3, #40	; 0x28
 8003398:	f200 8715 	bhi.w	80041c6 <UART_SetConfig+0xffe>
 800339c:	493e      	ldr	r1, [pc, #248]	; (8003498 <UART_SetConfig+0x2d0>)
 800339e:	e79d      	b.n	80032dc <UART_SetConfig+0x114>
 80033a0:	493e      	ldr	r1, [pc, #248]	; (800349c <UART_SetConfig+0x2d4>)
 80033a2:	428b      	cmp	r3, r1
 80033a4:	d108      	bne.n	80033b8 <UART_SetConfig+0x1f0>
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <UART_SetConfig+0x2a4>)
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	f200 8709 	bhi.w	80041c6 <UART_SetConfig+0xffe>
 80033b4:	493a      	ldr	r1, [pc, #232]	; (80034a0 <UART_SetConfig+0x2d8>)
 80033b6:	e791      	b.n	80032dc <UART_SetConfig+0x114>
 80033b8:	493a      	ldr	r1, [pc, #232]	; (80034a4 <UART_SetConfig+0x2dc>)
 80033ba:	428b      	cmp	r3, r1
 80033bc:	d108      	bne.n	80033d0 <UART_SetConfig+0x208>
 80033be:	4b2b      	ldr	r3, [pc, #172]	; (800346c <UART_SetConfig+0x2a4>)
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	f200 86fd 	bhi.w	80041c6 <UART_SetConfig+0xffe>
 80033cc:	4936      	ldr	r1, [pc, #216]	; (80034a8 <UART_SetConfig+0x2e0>)
 80033ce:	e785      	b.n	80032dc <UART_SetConfig+0x114>
 80033d0:	4923      	ldr	r1, [pc, #140]	; (8003460 <UART_SetConfig+0x298>)
 80033d2:	428b      	cmp	r3, r1
 80033d4:	f040 86f7 	bne.w	80041c6 <UART_SetConfig+0xffe>
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <UART_SetConfig+0x2a4>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d901      	bls.n	80033e8 <UART_SetConfig+0x220>
        ret = HAL_ERROR;
 80033e4:	2201      	movs	r2, #1
 80033e6:	e0d6      	b.n	8003596 <UART_SetConfig+0x3ce>
 80033e8:	4a30      	ldr	r2, [pc, #192]	; (80034ac <UART_SetConfig+0x2e4>)
 80033ea:	5cd4      	ldrb	r4, [r2, r3]
    switch (clocksource)
 80033ec:	2c08      	cmp	r4, #8
 80033ee:	f000 80f8 	beq.w	80035e2 <UART_SetConfig+0x41a>
 80033f2:	d85d      	bhi.n	80034b0 <UART_SetConfig+0x2e8>
 80033f4:	2c02      	cmp	r4, #2
 80033f6:	f000 80ad 	beq.w	8003554 <UART_SetConfig+0x38c>
 80033fa:	2c04      	cmp	r4, #4
 80033fc:	d1f2      	bne.n	80033e4 <UART_SetConfig+0x21c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033fe:	4668      	mov	r0, sp
 8003400:	f7ff fa32 	bl	8002868 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003404:	9a01      	ldr	r2, [sp, #4]
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80ef 	beq.w	80035ec <UART_SetConfig+0x424>
 800340e:	2b01      	cmp	r3, #1
 8003410:	f000 80ee 	beq.w	80035f0 <UART_SetConfig+0x428>
 8003414:	2b02      	cmp	r3, #2
 8003416:	f000 80ed 	beq.w	80035f4 <UART_SetConfig+0x42c>
 800341a:	2b03      	cmp	r3, #3
 800341c:	f000 80ec 	beq.w	80035f8 <UART_SetConfig+0x430>
 8003420:	2b04      	cmp	r3, #4
 8003422:	f000 80da 	beq.w	80035da <UART_SetConfig+0x412>
 8003426:	2b05      	cmp	r3, #5
 8003428:	f000 80e8 	beq.w	80035fc <UART_SetConfig+0x434>
 800342c:	2b06      	cmp	r3, #6
 800342e:	f000 80e7 	beq.w	8003600 <UART_SetConfig+0x438>
 8003432:	2b07      	cmp	r3, #7
 8003434:	f000 80e6 	beq.w	8003604 <UART_SetConfig+0x43c>
 8003438:	2b08      	cmp	r3, #8
 800343a:	f000 80e5 	beq.w	8003608 <UART_SetConfig+0x440>
 800343e:	2b09      	cmp	r3, #9
 8003440:	f000 80e4 	beq.w	800360c <UART_SetConfig+0x444>
 8003444:	2b0a      	cmp	r3, #10
 8003446:	f000 80e3 	beq.w	8003610 <UART_SetConfig+0x448>
 800344a:	2b0b      	cmp	r3, #11
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003454:	e0c2      	b.n	80035dc <UART_SetConfig+0x414>
 8003456:	bf00      	nop
 8003458:	00bebc20 	.word	0x00bebc20
 800345c:	0800832f 	.word	0x0800832f
 8003460:	58000c00 	.word	0x58000c00
 8003464:	cfff69f3 	.word	0xcfff69f3
 8003468:	40011000 	.word	0x40011000
 800346c:	58024400 	.word	0x58024400
 8003470:	080082fa 	.word	0x080082fa
 8003474:	40004400 	.word	0x40004400
 8003478:	08008323 	.word	0x08008323
 800347c:	40004800 	.word	0x40004800
 8003480:	08008323 	.word	0x08008323
 8003484:	40004c00 	.word	0x40004c00
 8003488:	08008323 	.word	0x08008323
 800348c:	40005000 	.word	0x40005000
 8003490:	08008323 	.word	0x08008323
 8003494:	40011400 	.word	0x40011400
 8003498:	080082fa 	.word	0x080082fa
 800349c:	40007800 	.word	0x40007800
 80034a0:	08008323 	.word	0x08008323
 80034a4:	40007c00 	.word	0x40007c00
 80034a8:	08008323 	.word	0x08008323
 80034ac:	08008329 	.word	0x08008329
    switch (clocksource)
 80034b0:	2c20      	cmp	r4, #32
 80034b2:	f000 80e1 	beq.w	8003678 <UART_SetConfig+0x4b0>
 80034b6:	2c40      	cmp	r4, #64	; 0x40
 80034b8:	f000 80f8 	beq.w	80036ac <UART_SetConfig+0x4e4>
 80034bc:	2c10      	cmp	r4, #16
 80034be:	d191      	bne.n	80033e4 <UART_SetConfig+0x21c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034c0:	4bac      	ldr	r3, [pc, #688]	; (8003774 <UART_SetConfig+0x5ac>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	0692      	lsls	r2, r2, #26
 80034c6:	f140 80bb 	bpl.w	8003640 <UART_SetConfig+0x478>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4baa      	ldr	r3, [pc, #680]	; (8003778 <UART_SetConfig+0x5b0>)
 80034ce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80034d2:	40d3      	lsrs	r3, r2
 80034d4:	2800      	cmp	r0, #0
 80034d6:	f000 809d 	beq.w	8003614 <UART_SetConfig+0x44c>
 80034da:	2801      	cmp	r0, #1
 80034dc:	f000 809c 	beq.w	8003618 <UART_SetConfig+0x450>
 80034e0:	2802      	cmp	r0, #2
 80034e2:	f000 809b 	beq.w	800361c <UART_SetConfig+0x454>
 80034e6:	2803      	cmp	r0, #3
 80034e8:	f000 809a 	beq.w	8003620 <UART_SetConfig+0x458>
 80034ec:	2804      	cmp	r0, #4
 80034ee:	f000 8099 	beq.w	8003624 <UART_SetConfig+0x45c>
 80034f2:	2805      	cmp	r0, #5
 80034f4:	f000 8098 	beq.w	8003628 <UART_SetConfig+0x460>
 80034f8:	2806      	cmp	r0, #6
 80034fa:	f000 8097 	beq.w	800362c <UART_SetConfig+0x464>
 80034fe:	2807      	cmp	r0, #7
 8003500:	f000 8096 	beq.w	8003630 <UART_SetConfig+0x468>
 8003504:	2808      	cmp	r0, #8
 8003506:	f000 8095 	beq.w	8003634 <UART_SetConfig+0x46c>
 800350a:	2809      	cmp	r0, #9
 800350c:	f000 8094 	beq.w	8003638 <UART_SetConfig+0x470>
 8003510:	280a      	cmp	r0, #10
 8003512:	f000 8093 	beq.w	800363c <UART_SetConfig+0x474>
 8003516:	280b      	cmp	r0, #11
 8003518:	bf14      	ite	ne
 800351a:	2001      	movne	r0, #1
 800351c:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8003520:	fbb3 f2f0 	udiv	r2, r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003524:	686e      	ldr	r6, [r5, #4]
 8003526:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800352a:	4293      	cmp	r3, r2
 800352c:	f63f af5a 	bhi.w	80033e4 <UART_SetConfig+0x21c>
 8003530:	ebb2 3f06 	cmp.w	r2, r6, lsl #12
 8003534:	f63f af56 	bhi.w	80033e4 <UART_SetConfig+0x21c>
        switch (clocksource)
 8003538:	2c08      	cmp	r4, #8
 800353a:	f000 81ca 	beq.w	80038d2 <UART_SetConfig+0x70a>
 800353e:	f200 813b 	bhi.w	80037b8 <UART_SetConfig+0x5f0>
 8003542:	2c02      	cmp	r4, #2
 8003544:	f000 8185 	beq.w	8003852 <UART_SetConfig+0x68a>
 8003548:	2c04      	cmp	r4, #4
 800354a:	f000 81bd 	beq.w	80038c8 <UART_SetConfig+0x700>
            ret = HAL_ERROR;
 800354e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003550:	2000      	movs	r0, #0
 8003552:	e1b0      	b.n	80038b6 <UART_SetConfig+0x6ee>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003554:	f7ff f976 	bl	8002844 <HAL_RCCEx_GetD3PCLK1Freq>
 8003558:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800355a:	b343      	cbz	r3, 80035ae <UART_SetConfig+0x3e6>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d028      	beq.n	80035b2 <UART_SetConfig+0x3ea>
 8003560:	2b02      	cmp	r3, #2
 8003562:	d028      	beq.n	80035b6 <UART_SetConfig+0x3ee>
 8003564:	2b03      	cmp	r3, #3
 8003566:	d028      	beq.n	80035ba <UART_SetConfig+0x3f2>
 8003568:	2b04      	cmp	r3, #4
 800356a:	d028      	beq.n	80035be <UART_SetConfig+0x3f6>
 800356c:	2b05      	cmp	r3, #5
 800356e:	d028      	beq.n	80035c2 <UART_SetConfig+0x3fa>
 8003570:	2b06      	cmp	r3, #6
 8003572:	d028      	beq.n	80035c6 <UART_SetConfig+0x3fe>
 8003574:	2b07      	cmp	r3, #7
 8003576:	d028      	beq.n	80035ca <UART_SetConfig+0x402>
 8003578:	2b08      	cmp	r3, #8
 800357a:	d028      	beq.n	80035ce <UART_SetConfig+0x406>
 800357c:	2b09      	cmp	r3, #9
 800357e:	d028      	beq.n	80035d2 <UART_SetConfig+0x40a>
 8003580:	2b0a      	cmp	r3, #10
 8003582:	d028      	beq.n	80035d6 <UART_SetConfig+0x40e>
 8003584:	2b0b      	cmp	r3, #11
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800358e:	fbb0 f2f3 	udiv	r2, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003592:	2a00      	cmp	r2, #0
 8003594:	d1c6      	bne.n	8003524 <UART_SetConfig+0x35c>
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003596:	2301      	movs	r3, #1
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
  huart->TxISR = NULL;

  return ret;
}
 8003598:	4610      	mov	r0, r2
  huart->NbTxDataToProcess = 1;
 800359a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800359e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
  huart->RxISR = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	66eb      	str	r3, [r5, #108]	; 0x6c
  huart->TxISR = NULL;
 80035a6:	672b      	str	r3, [r5, #112]	; 0x70
}
 80035a8:	b007      	add	sp, #28
 80035aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035ae:	2301      	movs	r3, #1
 80035b0:	e7ed      	b.n	800358e <UART_SetConfig+0x3c6>
 80035b2:	4623      	mov	r3, r4
 80035b4:	e7eb      	b.n	800358e <UART_SetConfig+0x3c6>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e7e9      	b.n	800358e <UART_SetConfig+0x3c6>
 80035ba:	2306      	movs	r3, #6
 80035bc:	e7e7      	b.n	800358e <UART_SetConfig+0x3c6>
 80035be:	2308      	movs	r3, #8
 80035c0:	e7e5      	b.n	800358e <UART_SetConfig+0x3c6>
 80035c2:	230a      	movs	r3, #10
 80035c4:	e7e3      	b.n	800358e <UART_SetConfig+0x3c6>
 80035c6:	230c      	movs	r3, #12
 80035c8:	e7e1      	b.n	800358e <UART_SetConfig+0x3c6>
 80035ca:	2310      	movs	r3, #16
 80035cc:	e7df      	b.n	800358e <UART_SetConfig+0x3c6>
 80035ce:	2320      	movs	r3, #32
 80035d0:	e7dd      	b.n	800358e <UART_SetConfig+0x3c6>
 80035d2:	2340      	movs	r3, #64	; 0x40
 80035d4:	e7db      	b.n	800358e <UART_SetConfig+0x3c6>
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	e7d9      	b.n	800358e <UART_SetConfig+0x3c6>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035da:	2308      	movs	r3, #8
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035dc:	fbb2 f2f3 	udiv	r2, r2, r3
        break;
 80035e0:	e7d7      	b.n	8003592 <UART_SetConfig+0x3ca>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035e2:	a803      	add	r0, sp, #12
 80035e4:	f7ff f9ea 	bl	80029bc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80035e8:	9a04      	ldr	r2, [sp, #16]
 80035ea:	e70c      	b.n	8003406 <UART_SetConfig+0x23e>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e7f5      	b.n	80035dc <UART_SetConfig+0x414>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e7f3      	b.n	80035dc <UART_SetConfig+0x414>
 80035f4:	2304      	movs	r3, #4
 80035f6:	e7f1      	b.n	80035dc <UART_SetConfig+0x414>
 80035f8:	2306      	movs	r3, #6
 80035fa:	e7ef      	b.n	80035dc <UART_SetConfig+0x414>
 80035fc:	230a      	movs	r3, #10
 80035fe:	e7ed      	b.n	80035dc <UART_SetConfig+0x414>
 8003600:	230c      	movs	r3, #12
 8003602:	e7eb      	b.n	80035dc <UART_SetConfig+0x414>
 8003604:	2310      	movs	r3, #16
 8003606:	e7e9      	b.n	80035dc <UART_SetConfig+0x414>
 8003608:	2320      	movs	r3, #32
 800360a:	e7e7      	b.n	80035dc <UART_SetConfig+0x414>
 800360c:	2340      	movs	r3, #64	; 0x40
 800360e:	e7e5      	b.n	80035dc <UART_SetConfig+0x414>
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	e7e3      	b.n	80035dc <UART_SetConfig+0x414>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003614:	2001      	movs	r0, #1
 8003616:	e783      	b.n	8003520 <UART_SetConfig+0x358>
 8003618:	2002      	movs	r0, #2
 800361a:	e781      	b.n	8003520 <UART_SetConfig+0x358>
 800361c:	2004      	movs	r0, #4
 800361e:	e77f      	b.n	8003520 <UART_SetConfig+0x358>
 8003620:	2006      	movs	r0, #6
 8003622:	e77d      	b.n	8003520 <UART_SetConfig+0x358>
 8003624:	2008      	movs	r0, #8
 8003626:	e77b      	b.n	8003520 <UART_SetConfig+0x358>
 8003628:	200a      	movs	r0, #10
 800362a:	e779      	b.n	8003520 <UART_SetConfig+0x358>
 800362c:	200c      	movs	r0, #12
 800362e:	e777      	b.n	8003520 <UART_SetConfig+0x358>
 8003630:	2010      	movs	r0, #16
 8003632:	e775      	b.n	8003520 <UART_SetConfig+0x358>
 8003634:	2020      	movs	r0, #32
 8003636:	e773      	b.n	8003520 <UART_SetConfig+0x358>
 8003638:	2040      	movs	r0, #64	; 0x40
 800363a:	e771      	b.n	8003520 <UART_SetConfig+0x358>
 800363c:	2080      	movs	r0, #128	; 0x80
 800363e:	e76f      	b.n	8003520 <UART_SetConfig+0x358>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003640:	2800      	cmp	r0, #0
 8003642:	d04f      	beq.n	80036e4 <UART_SetConfig+0x51c>
 8003644:	2801      	cmp	r0, #1
 8003646:	d04f      	beq.n	80036e8 <UART_SetConfig+0x520>
 8003648:	2802      	cmp	r0, #2
 800364a:	d04f      	beq.n	80036ec <UART_SetConfig+0x524>
 800364c:	2803      	cmp	r0, #3
 800364e:	d04f      	beq.n	80036f0 <UART_SetConfig+0x528>
 8003650:	2804      	cmp	r0, #4
 8003652:	d04f      	beq.n	80036f4 <UART_SetConfig+0x52c>
 8003654:	2805      	cmp	r0, #5
 8003656:	d04f      	beq.n	80036f8 <UART_SetConfig+0x530>
 8003658:	2806      	cmp	r0, #6
 800365a:	d04f      	beq.n	80036fc <UART_SetConfig+0x534>
 800365c:	2807      	cmp	r0, #7
 800365e:	d04f      	beq.n	8003700 <UART_SetConfig+0x538>
 8003660:	2808      	cmp	r0, #8
 8003662:	d04f      	beq.n	8003704 <UART_SetConfig+0x53c>
 8003664:	2809      	cmp	r0, #9
 8003666:	d04f      	beq.n	8003708 <UART_SetConfig+0x540>
 8003668:	280a      	cmp	r0, #10
 800366a:	d051      	beq.n	8003710 <UART_SetConfig+0x548>
 800366c:	4a43      	ldr	r2, [pc, #268]	; (800377c <UART_SetConfig+0x5b4>)
 800366e:	4b42      	ldr	r3, [pc, #264]	; (8003778 <UART_SetConfig+0x5b0>)
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003670:	280b      	cmp	r0, #11
 8003672:	bf18      	it	ne
 8003674:	461a      	movne	r2, r3
 8003676:	e755      	b.n	8003524 <UART_SetConfig+0x35c>
 8003678:	2800      	cmp	r0, #0
 800367a:	d041      	beq.n	8003700 <UART_SetConfig+0x538>
 800367c:	2801      	cmp	r0, #1
 800367e:	d041      	beq.n	8003704 <UART_SetConfig+0x53c>
 8003680:	2802      	cmp	r0, #2
 8003682:	d041      	beq.n	8003708 <UART_SetConfig+0x540>
 8003684:	2803      	cmp	r0, #3
 8003686:	d041      	beq.n	800370c <UART_SetConfig+0x544>
 8003688:	2804      	cmp	r0, #4
 800368a:	d041      	beq.n	8003710 <UART_SetConfig+0x548>
 800368c:	2805      	cmp	r0, #5
 800368e:	d041      	beq.n	8003714 <UART_SetConfig+0x54c>
 8003690:	2806      	cmp	r0, #6
 8003692:	d041      	beq.n	8003718 <UART_SetConfig+0x550>
 8003694:	2807      	cmp	r0, #7
 8003696:	d041      	beq.n	800371c <UART_SetConfig+0x554>
 8003698:	2808      	cmp	r0, #8
 800369a:	d041      	beq.n	8003720 <UART_SetConfig+0x558>
 800369c:	2809      	cmp	r0, #9
 800369e:	d041      	beq.n	8003724 <UART_SetConfig+0x55c>
 80036a0:	280a      	cmp	r0, #10
 80036a2:	d042      	beq.n	800372a <UART_SetConfig+0x562>
 80036a4:	f643 5209 	movw	r2, #15625	; 0x3d09
 80036a8:	4b35      	ldr	r3, [pc, #212]	; (8003780 <UART_SetConfig+0x5b8>)
 80036aa:	e7e1      	b.n	8003670 <UART_SetConfig+0x4a8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d03f      	beq.n	8003730 <UART_SetConfig+0x568>
 80036b0:	2801      	cmp	r0, #1
 80036b2:	d040      	beq.n	8003736 <UART_SetConfig+0x56e>
 80036b4:	2802      	cmp	r0, #2
 80036b6:	d041      	beq.n	800373c <UART_SetConfig+0x574>
 80036b8:	2803      	cmp	r0, #3
 80036ba:	d042      	beq.n	8003742 <UART_SetConfig+0x57a>
 80036bc:	2804      	cmp	r0, #4
 80036be:	d043      	beq.n	8003748 <UART_SetConfig+0x580>
 80036c0:	2805      	cmp	r0, #5
 80036c2:	d044      	beq.n	800374e <UART_SetConfig+0x586>
 80036c4:	2806      	cmp	r0, #6
 80036c6:	d045      	beq.n	8003754 <UART_SetConfig+0x58c>
 80036c8:	2807      	cmp	r0, #7
 80036ca:	d046      	beq.n	800375a <UART_SetConfig+0x592>
 80036cc:	2808      	cmp	r0, #8
 80036ce:	d047      	beq.n	8003760 <UART_SetConfig+0x598>
 80036d0:	2809      	cmp	r0, #9
 80036d2:	d048      	beq.n	8003766 <UART_SetConfig+0x59e>
 80036d4:	280a      	cmp	r0, #10
 80036d6:	d049      	beq.n	800376c <UART_SetConfig+0x5a4>
 80036d8:	280b      	cmp	r0, #11
 80036da:	bf14      	ite	ne
 80036dc:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 80036e0:	2280      	moveq	r2, #128	; 0x80
 80036e2:	e71f      	b.n	8003524 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036e4:	4a24      	ldr	r2, [pc, #144]	; (8003778 <UART_SetConfig+0x5b0>)
 80036e6:	e71d      	b.n	8003524 <UART_SetConfig+0x35c>
 80036e8:	4a26      	ldr	r2, [pc, #152]	; (8003784 <UART_SetConfig+0x5bc>)
 80036ea:	e71b      	b.n	8003524 <UART_SetConfig+0x35c>
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <UART_SetConfig+0x5c0>)
 80036ee:	e719      	b.n	8003524 <UART_SetConfig+0x35c>
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <UART_SetConfig+0x5c4>)
 80036f2:	e717      	b.n	8003524 <UART_SetConfig+0x35c>
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <UART_SetConfig+0x5c8>)
 80036f6:	e715      	b.n	8003524 <UART_SetConfig+0x35c>
 80036f8:	4a26      	ldr	r2, [pc, #152]	; (8003794 <UART_SetConfig+0x5cc>)
 80036fa:	e713      	b.n	8003524 <UART_SetConfig+0x35c>
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <UART_SetConfig+0x5d0>)
 80036fe:	e711      	b.n	8003524 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <UART_SetConfig+0x5b8>)
 8003702:	e70f      	b.n	8003524 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003704:	4a25      	ldr	r2, [pc, #148]	; (800379c <UART_SetConfig+0x5d4>)
 8003706:	e70d      	b.n	8003524 <UART_SetConfig+0x35c>
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <UART_SetConfig+0x5d8>)
 800370a:	e70b      	b.n	8003524 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <UART_SetConfig+0x5dc>)
 800370e:	e709      	b.n	8003524 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <UART_SetConfig+0x5e0>)
 8003712:	e707      	b.n	8003524 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003714:	4a25      	ldr	r2, [pc, #148]	; (80037ac <UART_SetConfig+0x5e4>)
 8003716:	e705      	b.n	8003524 <UART_SetConfig+0x35c>
 8003718:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <UART_SetConfig+0x5e8>)
 800371a:	e703      	b.n	8003524 <UART_SetConfig+0x35c>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <UART_SetConfig+0x5b4>)
 800371e:	e701      	b.n	8003524 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003720:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <UART_SetConfig+0x5ec>)
 8003722:	e6ff      	b.n	8003524 <UART_SetConfig+0x35c>
 8003724:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003728:	e6fc      	b.n	8003524 <UART_SetConfig+0x35c>
 800372a:	f647 2212 	movw	r2, #31250	; 0x7a12
 800372e:	e6f9      	b.n	8003524 <UART_SetConfig+0x35c>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003730:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003734:	e6f6      	b.n	8003524 <UART_SetConfig+0x35c>
 8003736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800373a:	e6f3      	b.n	8003524 <UART_SetConfig+0x35c>
 800373c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003740:	e6f0      	b.n	8003524 <UART_SetConfig+0x35c>
 8003742:	f241 5255 	movw	r2, #5461	; 0x1555
 8003746:	e6ed      	b.n	8003524 <UART_SetConfig+0x35c>
 8003748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800374c:	e6ea      	b.n	8003524 <UART_SetConfig+0x35c>
 800374e:	f640 42cc 	movw	r2, #3276	; 0xccc
 8003752:	e6e7      	b.n	8003524 <UART_SetConfig+0x35c>
 8003754:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8003758:	e6e4      	b.n	8003524 <UART_SetConfig+0x35c>
 800375a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800375e:	e6e1      	b.n	8003524 <UART_SetConfig+0x35c>
 8003760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003764:	e6de      	b.n	8003524 <UART_SetConfig+0x35c>
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	e6db      	b.n	8003524 <UART_SetConfig+0x35c>
 800376c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003770:	e6d8      	b.n	8003524 <UART_SetConfig+0x35c>
 8003772:	bf00      	nop
 8003774:	58024400 	.word	0x58024400
 8003778:	03d09000 	.word	0x03d09000
 800377c:	0003d090 	.word	0x0003d090
 8003780:	003d0900 	.word	0x003d0900
 8003784:	01e84800 	.word	0x01e84800
 8003788:	00f42400 	.word	0x00f42400
 800378c:	00a2c2aa 	.word	0x00a2c2aa
 8003790:	007a1200 	.word	0x007a1200
 8003794:	0061a800 	.word	0x0061a800
 8003798:	00516155 	.word	0x00516155
 800379c:	001e8480 	.word	0x001e8480
 80037a0:	000f4240 	.word	0x000f4240
 80037a4:	000a2c2a 	.word	0x000a2c2a
 80037a8:	0007a120 	.word	0x0007a120
 80037ac:	00061a80 	.word	0x00061a80
 80037b0:	00051615 	.word	0x00051615
 80037b4:	0001e848 	.word	0x0001e848
        switch (clocksource)
 80037b8:	2c20      	cmp	r4, #32
 80037ba:	f000 80f8 	beq.w	80039ae <UART_SetConfig+0x7e6>
 80037be:	2c40      	cmp	r4, #64	; 0x40
 80037c0:	f000 812b 	beq.w	8003a1a <UART_SetConfig+0x852>
 80037c4:	2c10      	cmp	r4, #16
 80037c6:	f47f aec2 	bne.w	800354e <UART_SetConfig+0x386>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037ca:	4ab1      	ldr	r2, [pc, #708]	; (8003a90 <UART_SetConfig+0x8c8>)
 80037cc:	0874      	lsrs	r4, r6, #1
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	f013 0f20 	tst.w	r3, #32
 80037d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037d6:	f000 80ad 	beq.w	8003934 <UART_SetConfig+0x76c>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	48ad      	ldr	r0, [pc, #692]	; (8003a94 <UART_SetConfig+0x8cc>)
 80037de:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80037e2:	40d0      	lsrs	r0, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a3 	beq.w	8003930 <UART_SetConfig+0x768>
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	f000 808c 	beq.w	8003908 <UART_SetConfig+0x740>
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f000 808b 	beq.w	800390c <UART_SetConfig+0x744>
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	f000 808a 	beq.w	8003910 <UART_SetConfig+0x748>
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	f000 8089 	beq.w	8003914 <UART_SetConfig+0x74c>
 8003802:	2b05      	cmp	r3, #5
 8003804:	f000 8088 	beq.w	8003918 <UART_SetConfig+0x750>
 8003808:	2b06      	cmp	r3, #6
 800380a:	f000 8087 	beq.w	800391c <UART_SetConfig+0x754>
 800380e:	2b07      	cmp	r3, #7
 8003810:	f000 8086 	beq.w	8003920 <UART_SetConfig+0x758>
 8003814:	2b08      	cmp	r3, #8
 8003816:	f000 8085 	beq.w	8003924 <UART_SetConfig+0x75c>
 800381a:	2b09      	cmp	r3, #9
 800381c:	f000 8084 	beq.w	8003928 <UART_SetConfig+0x760>
 8003820:	2b0a      	cmp	r3, #10
 8003822:	f000 8083 	beq.w	800392c <UART_SetConfig+0x764>
 8003826:	2b0b      	cmp	r3, #11
 8003828:	f040 8082 	bne.w	8003930 <UART_SetConfig+0x768>
 800382c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003830:	2300      	movs	r3, #0
 8003832:	2100      	movs	r1, #0
 8003834:	f7fc fdac 	bl	8000390 <__aeabi_uldivmod>
 8003838:	4632      	mov	r2, r6
 800383a:	ea4f 2901 	mov.w	r9, r1, lsl #8
 800383e:	2300      	movs	r3, #0
 8003840:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003844:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8003848:	eb18 0004 	adds.w	r0, r8, r4
 800384c:	f149 0100 	adc.w	r1, r9, #0
 8003850:	e02e      	b.n	80038b0 <UART_SetConfig+0x6e8>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003852:	f7fe fff7 	bl	8002844 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d053      	beq.n	8003904 <UART_SetConfig+0x73c>
 800385c:	2b01      	cmp	r3, #1
 800385e:	d03d      	beq.n	80038dc <UART_SetConfig+0x714>
 8003860:	2b02      	cmp	r3, #2
 8003862:	d03d      	beq.n	80038e0 <UART_SetConfig+0x718>
 8003864:	2b03      	cmp	r3, #3
 8003866:	d03d      	beq.n	80038e4 <UART_SetConfig+0x71c>
 8003868:	2b04      	cmp	r3, #4
 800386a:	d03d      	beq.n	80038e8 <UART_SetConfig+0x720>
 800386c:	2b05      	cmp	r3, #5
 800386e:	d03d      	beq.n	80038ec <UART_SetConfig+0x724>
 8003870:	2b06      	cmp	r3, #6
 8003872:	d03d      	beq.n	80038f0 <UART_SetConfig+0x728>
 8003874:	2b07      	cmp	r3, #7
 8003876:	d03d      	beq.n	80038f4 <UART_SetConfig+0x72c>
 8003878:	2b08      	cmp	r3, #8
 800387a:	d03d      	beq.n	80038f8 <UART_SetConfig+0x730>
 800387c:	2b09      	cmp	r3, #9
 800387e:	d03d      	beq.n	80038fc <UART_SetConfig+0x734>
 8003880:	2b0a      	cmp	r3, #10
 8003882:	d03d      	beq.n	8003900 <UART_SetConfig+0x738>
 8003884:	2b0b      	cmp	r3, #11
 8003886:	d13d      	bne.n	8003904 <UART_SetConfig+0x73c>
 8003888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800388c:	2300      	movs	r3, #0
 800388e:	2100      	movs	r1, #0
 8003890:	f7fc fd7e 	bl	8000390 <__aeabi_uldivmod>
 8003894:	686c      	ldr	r4, [r5, #4]
 8003896:	020f      	lsls	r7, r1, #8
 8003898:	2300      	movs	r3, #0
 800389a:	0206      	lsls	r6, r0, #8
 800389c:	4622      	mov	r2, r4
 800389e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80038a2:	0860      	lsrs	r0, r4, #1
 80038a4:	eb16 0800 	adds.w	r8, r6, r0
 80038a8:	f147 0900 	adc.w	r9, r7, #0
 80038ac:	4640      	mov	r0, r8
 80038ae:	4649      	mov	r1, r9
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038b0:	f7fc fd6e 	bl	8000390 <__aeabi_uldivmod>
            break;
 80038b4:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038b6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80038ba:	4b77      	ldr	r3, [pc, #476]	; (8003a98 <UART_SetConfig+0x8d0>)
 80038bc:	4299      	cmp	r1, r3
 80038be:	f63f ad91 	bhi.w	80033e4 <UART_SetConfig+0x21c>
          huart->Instance->BRR = usartdiv;
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	60d8      	str	r0, [r3, #12]
 80038c6:	e666      	b.n	8003596 <UART_SetConfig+0x3ce>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038c8:	4668      	mov	r0, sp
 80038ca:	f7fe ffcd 	bl	8002868 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ce:	9801      	ldr	r0, [sp, #4]
 80038d0:	e7c1      	b.n	8003856 <UART_SetConfig+0x68e>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038d2:	a803      	add	r0, sp, #12
 80038d4:	f7ff f872 	bl	80029bc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038d8:	9804      	ldr	r0, [sp, #16]
 80038da:	e7bc      	b.n	8003856 <UART_SetConfig+0x68e>
 80038dc:	2202      	movs	r2, #2
 80038de:	e7d5      	b.n	800388c <UART_SetConfig+0x6c4>
 80038e0:	2204      	movs	r2, #4
 80038e2:	e7d3      	b.n	800388c <UART_SetConfig+0x6c4>
 80038e4:	2206      	movs	r2, #6
 80038e6:	e7d1      	b.n	800388c <UART_SetConfig+0x6c4>
 80038e8:	2208      	movs	r2, #8
 80038ea:	e7cf      	b.n	800388c <UART_SetConfig+0x6c4>
 80038ec:	220a      	movs	r2, #10
 80038ee:	e7cd      	b.n	800388c <UART_SetConfig+0x6c4>
 80038f0:	220c      	movs	r2, #12
 80038f2:	e7cb      	b.n	800388c <UART_SetConfig+0x6c4>
 80038f4:	2210      	movs	r2, #16
 80038f6:	e7c9      	b.n	800388c <UART_SetConfig+0x6c4>
 80038f8:	2220      	movs	r2, #32
 80038fa:	e7c7      	b.n	800388c <UART_SetConfig+0x6c4>
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	e7c5      	b.n	800388c <UART_SetConfig+0x6c4>
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	e7c3      	b.n	800388c <UART_SetConfig+0x6c4>
 8003904:	2201      	movs	r2, #1
 8003906:	e7c1      	b.n	800388c <UART_SetConfig+0x6c4>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003908:	2202      	movs	r2, #2
 800390a:	e791      	b.n	8003830 <UART_SetConfig+0x668>
 800390c:	2204      	movs	r2, #4
 800390e:	e78f      	b.n	8003830 <UART_SetConfig+0x668>
 8003910:	2206      	movs	r2, #6
 8003912:	e78d      	b.n	8003830 <UART_SetConfig+0x668>
 8003914:	2208      	movs	r2, #8
 8003916:	e78b      	b.n	8003830 <UART_SetConfig+0x668>
 8003918:	220a      	movs	r2, #10
 800391a:	e789      	b.n	8003830 <UART_SetConfig+0x668>
 800391c:	220c      	movs	r2, #12
 800391e:	e787      	b.n	8003830 <UART_SetConfig+0x668>
 8003920:	2210      	movs	r2, #16
 8003922:	e785      	b.n	8003830 <UART_SetConfig+0x668>
 8003924:	2220      	movs	r2, #32
 8003926:	e783      	b.n	8003830 <UART_SetConfig+0x668>
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	e781      	b.n	8003830 <UART_SetConfig+0x668>
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	e77f      	b.n	8003830 <UART_SetConfig+0x668>
 8003930:	2201      	movs	r2, #1
 8003932:	e77d      	b.n	8003830 <UART_SetConfig+0x668>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003934:	2b00      	cmp	r3, #0
 8003936:	d037      	beq.n	80039a8 <UART_SetConfig+0x7e0>
 8003938:	2b01      	cmp	r3, #1
 800393a:	d016      	beq.n	800396a <UART_SetConfig+0x7a2>
 800393c:	2b02      	cmp	r3, #2
 800393e:	d01d      	beq.n	800397c <UART_SetConfig+0x7b4>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d01d      	beq.n	8003980 <UART_SetConfig+0x7b8>
 8003944:	2b04      	cmp	r3, #4
 8003946:	d01f      	beq.n	8003988 <UART_SetConfig+0x7c0>
 8003948:	2b05      	cmp	r3, #5
 800394a:	d01f      	beq.n	800398c <UART_SetConfig+0x7c4>
 800394c:	2b06      	cmp	r3, #6
 800394e:	d01f      	beq.n	8003990 <UART_SetConfig+0x7c8>
 8003950:	2b07      	cmp	r3, #7
 8003952:	d021      	beq.n	8003998 <UART_SetConfig+0x7d0>
 8003954:	2b08      	cmp	r3, #8
 8003956:	d021      	beq.n	800399c <UART_SetConfig+0x7d4>
 8003958:	2b09      	cmp	r3, #9
 800395a:	d021      	beq.n	80039a0 <UART_SetConfig+0x7d8>
 800395c:	2b0a      	cmp	r3, #10
 800395e:	d021      	beq.n	80039a4 <UART_SetConfig+0x7dc>
 8003960:	2b0b      	cmp	r3, #11
 8003962:	d121      	bne.n	80039a8 <UART_SetConfig+0x7e0>
 8003964:	484b      	ldr	r0, [pc, #300]	; (8003a94 <UART_SetConfig+0x8cc>)
 8003966:	2100      	movs	r1, #0
 8003968:	e001      	b.n	800396e <UART_SetConfig+0x7a6>
 800396a:	484c      	ldr	r0, [pc, #304]	; (8003a9c <UART_SetConfig+0x8d4>)
 800396c:	2101      	movs	r1, #1
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396e:	1900      	adds	r0, r0, r4
 8003970:	4632      	mov	r2, r6
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	f141 0100 	adc.w	r1, r1, #0
 800397a:	e799      	b.n	80038b0 <UART_SetConfig+0x6e8>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800397c:	4848      	ldr	r0, [pc, #288]	; (8003aa0 <UART_SetConfig+0x8d8>)
 800397e:	e7f2      	b.n	8003966 <UART_SetConfig+0x79e>
 8003980:	a13b      	add	r1, pc, #236	; (adr r1, 8003a70 <UART_SetConfig+0x8a8>)
 8003982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003986:	e7f2      	b.n	800396e <UART_SetConfig+0x7a6>
 8003988:	4846      	ldr	r0, [pc, #280]	; (8003aa4 <UART_SetConfig+0x8dc>)
 800398a:	e7ec      	b.n	8003966 <UART_SetConfig+0x79e>
 800398c:	4846      	ldr	r0, [pc, #280]	; (8003aa8 <UART_SetConfig+0x8e0>)
 800398e:	e7ea      	b.n	8003966 <UART_SetConfig+0x79e>
 8003990:	a139      	add	r1, pc, #228	; (adr r1, 8003a78 <UART_SetConfig+0x8b0>)
 8003992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003996:	e7ea      	b.n	800396e <UART_SetConfig+0x7a6>
 8003998:	4844      	ldr	r0, [pc, #272]	; (8003aac <UART_SetConfig+0x8e4>)
 800399a:	e7e4      	b.n	8003966 <UART_SetConfig+0x79e>
 800399c:	4844      	ldr	r0, [pc, #272]	; (8003ab0 <UART_SetConfig+0x8e8>)
 800399e:	e7e2      	b.n	8003966 <UART_SetConfig+0x79e>
 80039a0:	4844      	ldr	r0, [pc, #272]	; (8003ab4 <UART_SetConfig+0x8ec>)
 80039a2:	e7e0      	b.n	8003966 <UART_SetConfig+0x79e>
 80039a4:	4844      	ldr	r0, [pc, #272]	; (8003ab8 <UART_SetConfig+0x8f0>)
 80039a6:	e7de      	b.n	8003966 <UART_SetConfig+0x79e>
 80039a8:	4844      	ldr	r0, [pc, #272]	; (8003abc <UART_SetConfig+0x8f4>)
 80039aa:	2103      	movs	r1, #3
 80039ac:	e7df      	b.n	800396e <UART_SetConfig+0x7a6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039b0:	b38b      	cbz	r3, 8003a16 <UART_SetConfig+0x84e>
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d016      	beq.n	80039e4 <UART_SetConfig+0x81c>
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d016      	beq.n	80039e8 <UART_SetConfig+0x820>
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d016      	beq.n	80039ec <UART_SetConfig+0x824>
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d019      	beq.n	80039f6 <UART_SetConfig+0x82e>
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d019      	beq.n	80039fa <UART_SetConfig+0x832>
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d019      	beq.n	80039fe <UART_SetConfig+0x836>
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	d01b      	beq.n	8003a06 <UART_SetConfig+0x83e>
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d01b      	beq.n	8003a0a <UART_SetConfig+0x842>
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d01b      	beq.n	8003a0e <UART_SetConfig+0x846>
 80039d6:	2b0a      	cmp	r3, #10
 80039d8:	d01b      	beq.n	8003a12 <UART_SetConfig+0x84a>
 80039da:	2b0b      	cmp	r3, #11
 80039dc:	d11b      	bne.n	8003a16 <UART_SetConfig+0x84e>
 80039de:	4838      	ldr	r0, [pc, #224]	; (8003ac0 <UART_SetConfig+0x8f8>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e0:	2100      	movs	r1, #0
 80039e2:	e006      	b.n	80039f2 <UART_SetConfig+0x82a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e4:	4832      	ldr	r0, [pc, #200]	; (8003ab0 <UART_SetConfig+0x8e8>)
 80039e6:	e7fb      	b.n	80039e0 <UART_SetConfig+0x818>
 80039e8:	4832      	ldr	r0, [pc, #200]	; (8003ab4 <UART_SetConfig+0x8ec>)
 80039ea:	e7f9      	b.n	80039e0 <UART_SetConfig+0x818>
 80039ec:	a124      	add	r1, pc, #144	; (adr r1, 8003a80 <UART_SetConfig+0x8b8>)
 80039ee:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f2:	0874      	lsrs	r4, r6, #1
 80039f4:	e7bb      	b.n	800396e <UART_SetConfig+0x7a6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f6:	4830      	ldr	r0, [pc, #192]	; (8003ab8 <UART_SetConfig+0x8f0>)
 80039f8:	e7f2      	b.n	80039e0 <UART_SetConfig+0x818>
 80039fa:	4832      	ldr	r0, [pc, #200]	; (8003ac4 <UART_SetConfig+0x8fc>)
 80039fc:	e7f0      	b.n	80039e0 <UART_SetConfig+0x818>
 80039fe:	a122      	add	r1, pc, #136	; (adr r1, 8003a88 <UART_SetConfig+0x8c0>)
 8003a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a04:	e7f5      	b.n	80039f2 <UART_SetConfig+0x82a>
 8003a06:	4823      	ldr	r0, [pc, #140]	; (8003a94 <UART_SetConfig+0x8cc>)
 8003a08:	e7ea      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a0a:	482f      	ldr	r0, [pc, #188]	; (8003ac8 <UART_SetConfig+0x900>)
 8003a0c:	e7e8      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a0e:	482f      	ldr	r0, [pc, #188]	; (8003acc <UART_SetConfig+0x904>)
 8003a10:	e7e6      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a12:	482f      	ldr	r0, [pc, #188]	; (8003ad0 <UART_SetConfig+0x908>)
 8003a14:	e7e4      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a16:	4825      	ldr	r0, [pc, #148]	; (8003aac <UART_SetConfig+0x8e4>)
 8003a18:	e7e2      	b.n	80039e0 <UART_SetConfig+0x818>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d06b      	beq.n	8003af8 <UART_SetConfig+0x930>
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d016      	beq.n	8003a52 <UART_SetConfig+0x88a>
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d017      	beq.n	8003a58 <UART_SetConfig+0x890>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d018      	beq.n	8003a5e <UART_SetConfig+0x896>
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d018      	beq.n	8003a62 <UART_SetConfig+0x89a>
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d019      	beq.n	8003a68 <UART_SetConfig+0x8a0>
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d051      	beq.n	8003adc <UART_SetConfig+0x914>
 8003a38:	2b07      	cmp	r3, #7
 8003a3a:	d051      	beq.n	8003ae0 <UART_SetConfig+0x918>
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d052      	beq.n	8003ae6 <UART_SetConfig+0x91e>
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	d053      	beq.n	8003aec <UART_SetConfig+0x924>
 8003a44:	2b0a      	cmp	r3, #10
 8003a46:	d054      	beq.n	8003af2 <UART_SetConfig+0x92a>
 8003a48:	2b0b      	cmp	r3, #11
 8003a4a:	d155      	bne.n	8003af8 <UART_SetConfig+0x930>
 8003a4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a50:	e7c6      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a52:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003a56:	e7c3      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a58:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a5c:	e7c0      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a5e:	481d      	ldr	r0, [pc, #116]	; (8003ad4 <UART_SetConfig+0x90c>)
 8003a60:	e7be      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a66:	e7bb      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a68:	481b      	ldr	r0, [pc, #108]	; (8003ad8 <UART_SetConfig+0x910>)
 8003a6a:	e7b9      	b.n	80039e0 <UART_SetConfig+0x818>
 8003a6c:	f3af 8000 	nop.w
 8003a70:	a2c2aa00 	.word	0xa2c2aa00
 8003a74:	00000000 	.word	0x00000000
 8003a78:	51615500 	.word	0x51615500
 8003a7c:	00000000 	.word	0x00000000
 8003a80:	0a2c2a00 	.word	0x0a2c2a00
 8003a84:	00000000 	.word	0x00000000
 8003a88:	05161500 	.word	0x05161500
 8003a8c:	00000000 	.word	0x00000000
 8003a90:	58024400 	.word	0x58024400
 8003a94:	03d09000 	.word	0x03d09000
 8003a98:	000ffcff 	.word	0x000ffcff
 8003a9c:	e8480000 	.word	0xe8480000
 8003aa0:	f4240000 	.word	0xf4240000
 8003aa4:	7a120000 	.word	0x7a120000
 8003aa8:	61a80000 	.word	0x61a80000
 8003aac:	3d090000 	.word	0x3d090000
 8003ab0:	1e848000 	.word	0x1e848000
 8003ab4:	0f424000 	.word	0x0f424000
 8003ab8:	07a12000 	.word	0x07a12000
 8003abc:	d0900000 	.word	0xd0900000
 8003ac0:	003d0900 	.word	0x003d0900
 8003ac4:	061a8000 	.word	0x061a8000
 8003ac8:	01e84800 	.word	0x01e84800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200
 8003ad4:	00155500 	.word	0x00155500
 8003ad8:	000ccc00 	.word	0x000ccc00
 8003adc:	48ad      	ldr	r0, [pc, #692]	; (8003d94 <UART_SetConfig+0xbcc>)
 8003ade:	e77f      	b.n	80039e0 <UART_SetConfig+0x818>
 8003ae0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ae4:	e77c      	b.n	80039e0 <UART_SetConfig+0x818>
 8003ae6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003aea:	e779      	b.n	80039e0 <UART_SetConfig+0x818>
 8003aec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003af0:	e776      	b.n	80039e0 <UART_SetConfig+0x818>
 8003af2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003af6:	e773      	b.n	80039e0 <UART_SetConfig+0x818>
 8003af8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003afc:	e770      	b.n	80039e0 <UART_SetConfig+0x818>
    switch (clocksource)
 8003afe:	2c20      	cmp	r4, #32
 8003b00:	f000 8164 	beq.w	8003dcc <UART_SetConfig+0xc04>
 8003b04:	2c40      	cmp	r4, #64	; 0x40
 8003b06:	f000 819a 	beq.w	8003e3e <UART_SetConfig+0xc76>
 8003b0a:	2c10      	cmp	r4, #16
 8003b0c:	f47f abf8 	bne.w	8003300 <UART_SetConfig+0x138>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b10:	4ba1      	ldr	r3, [pc, #644]	; (8003d98 <UART_SetConfig+0xbd0>)
 8003b12:	6869      	ldr	r1, [r5, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f012 0f20 	tst.w	r2, #32
 8003b1a:	f000 8113 	beq.w	8003d44 <UART_SetConfig+0xb7c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a9e      	ldr	r2, [pc, #632]	; (8003d9c <UART_SetConfig+0xbd4>)
 8003b22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f000 80f4 	beq.w	8003d18 <UART_SetConfig+0xb50>
 8003b30:	2801      	cmp	r0, #1
 8003b32:	f000 80f3 	beq.w	8003d1c <UART_SetConfig+0xb54>
 8003b36:	2802      	cmp	r0, #2
 8003b38:	f000 80f2 	beq.w	8003d20 <UART_SetConfig+0xb58>
 8003b3c:	2803      	cmp	r0, #3
 8003b3e:	f000 80f1 	beq.w	8003d24 <UART_SetConfig+0xb5c>
 8003b42:	2804      	cmp	r0, #4
 8003b44:	f000 80f0 	beq.w	8003d28 <UART_SetConfig+0xb60>
 8003b48:	2805      	cmp	r0, #5
 8003b4a:	f000 80ef 	beq.w	8003d2c <UART_SetConfig+0xb64>
 8003b4e:	2806      	cmp	r0, #6
 8003b50:	f000 80ee 	beq.w	8003d30 <UART_SetConfig+0xb68>
 8003b54:	2807      	cmp	r0, #7
 8003b56:	f000 80ed 	beq.w	8003d34 <UART_SetConfig+0xb6c>
 8003b5a:	2808      	cmp	r0, #8
 8003b5c:	f000 80ec 	beq.w	8003d38 <UART_SetConfig+0xb70>
 8003b60:	2809      	cmp	r0, #9
 8003b62:	f000 80eb 	beq.w	8003d3c <UART_SetConfig+0xb74>
 8003b66:	280a      	cmp	r0, #10
 8003b68:	f000 80ea 	beq.w	8003d40 <UART_SetConfig+0xb78>
 8003b6c:	280b      	cmp	r0, #11
 8003b6e:	bf14      	ite	ne
 8003b70:	2201      	movne	r2, #1
 8003b72:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b7a:	e01f      	b.n	8003bbc <UART_SetConfig+0x9f4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7fd ff9c 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b80:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003b82:	b309      	cbz	r1, 8003bc8 <UART_SetConfig+0xa00>
 8003b84:	2901      	cmp	r1, #1
 8003b86:	d021      	beq.n	8003bcc <UART_SetConfig+0xa04>
 8003b88:	2902      	cmp	r1, #2
 8003b8a:	d021      	beq.n	8003bd0 <UART_SetConfig+0xa08>
 8003b8c:	2903      	cmp	r1, #3
 8003b8e:	d021      	beq.n	8003bd4 <UART_SetConfig+0xa0c>
 8003b90:	2904      	cmp	r1, #4
 8003b92:	d021      	beq.n	8003bd8 <UART_SetConfig+0xa10>
 8003b94:	2905      	cmp	r1, #5
 8003b96:	d021      	beq.n	8003bdc <UART_SetConfig+0xa14>
 8003b98:	2906      	cmp	r1, #6
 8003b9a:	d021      	beq.n	8003be0 <UART_SetConfig+0xa18>
 8003b9c:	2907      	cmp	r1, #7
 8003b9e:	d021      	beq.n	8003be4 <UART_SetConfig+0xa1c>
 8003ba0:	2908      	cmp	r1, #8
 8003ba2:	d021      	beq.n	8003be8 <UART_SetConfig+0xa20>
 8003ba4:	2909      	cmp	r1, #9
 8003ba6:	d021      	beq.n	8003bec <UART_SetConfig+0xa24>
 8003ba8:	290a      	cmp	r1, #10
 8003baa:	d021      	beq.n	8003bf0 <UART_SetConfig+0xa28>
 8003bac:	290b      	cmp	r1, #11
 8003bae:	bf14      	ite	ne
 8003bb0:	2201      	movne	r2, #1
 8003bb2:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003bb6:	6869      	ldr	r1, [r5, #4]
 8003bb8:	fbb0 f2f2 	udiv	r2, r0, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bbc:	084b      	lsrs	r3, r1, #1
 8003bbe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc6:	e03a      	b.n	8003c3e <UART_SetConfig+0xa76>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bc8:	2201      	movs	r2, #1
 8003bca:	e7f4      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003bcc:	2202      	movs	r2, #2
 8003bce:	e7f2      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	e7f0      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003bd4:	2206      	movs	r2, #6
 8003bd6:	e7ee      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003bd8:	2208      	movs	r2, #8
 8003bda:	e7ec      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003bdc:	220a      	movs	r2, #10
 8003bde:	e7ea      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003be0:	220c      	movs	r2, #12
 8003be2:	e7e8      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003be4:	2210      	movs	r2, #16
 8003be6:	e7e6      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003be8:	2220      	movs	r2, #32
 8003bea:	e7e4      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003bec:	2240      	movs	r2, #64	; 0x40
 8003bee:	e7e2      	b.n	8003bb6 <UART_SetConfig+0x9ee>
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	e7e0      	b.n	8003bb6 <UART_SetConfig+0x9ee>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fd ff72 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003bfa:	b1c2      	cbz	r2, 8003c2e <UART_SetConfig+0xa66>
 8003bfc:	2a01      	cmp	r2, #1
 8003bfe:	d02f      	beq.n	8003c60 <UART_SetConfig+0xa98>
 8003c00:	2a02      	cmp	r2, #2
 8003c02:	d02f      	beq.n	8003c64 <UART_SetConfig+0xa9c>
 8003c04:	2a03      	cmp	r2, #3
 8003c06:	d02f      	beq.n	8003c68 <UART_SetConfig+0xaa0>
 8003c08:	2a04      	cmp	r2, #4
 8003c0a:	d02f      	beq.n	8003c6c <UART_SetConfig+0xaa4>
 8003c0c:	2a05      	cmp	r2, #5
 8003c0e:	d02f      	beq.n	8003c70 <UART_SetConfig+0xaa8>
 8003c10:	2a06      	cmp	r2, #6
 8003c12:	d02f      	beq.n	8003c74 <UART_SetConfig+0xaac>
 8003c14:	2a07      	cmp	r2, #7
 8003c16:	d02f      	beq.n	8003c78 <UART_SetConfig+0xab0>
 8003c18:	2a08      	cmp	r2, #8
 8003c1a:	d02f      	beq.n	8003c7c <UART_SetConfig+0xab4>
 8003c1c:	2a09      	cmp	r2, #9
 8003c1e:	d02f      	beq.n	8003c80 <UART_SetConfig+0xab8>
 8003c20:	2a0a      	cmp	r2, #10
 8003c22:	d02f      	beq.n	8003c84 <UART_SetConfig+0xabc>
 8003c24:	2a0b      	cmp	r2, #11
 8003c26:	bf14      	ite	ne
 8003c28:	2401      	movne	r4, #1
 8003c2a:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003c2e:	686a      	ldr	r2, [r5, #4]
 8003c30:	fbb0 f4f4 	udiv	r4, r0, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c34:	0853      	lsrs	r3, r2, #1
 8003c36:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c3e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c40:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c42:	f1a3 0010 	sub.w	r0, r3, #16
 8003c46:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003c4a:	4288      	cmp	r0, r1
 8003c4c:	f63f abca 	bhi.w	80033e4 <UART_SetConfig+0x21c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c50:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c54:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003c58:	6828      	ldr	r0, [r5, #0]
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	60c3      	str	r3, [r0, #12]
 8003c5e:	e49a      	b.n	8003596 <UART_SetConfig+0x3ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c60:	2402      	movs	r4, #2
 8003c62:	e7e4      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c64:	2404      	movs	r4, #4
 8003c66:	e7e2      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c68:	2406      	movs	r4, #6
 8003c6a:	e7e0      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c6c:	2408      	movs	r4, #8
 8003c6e:	e7de      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c70:	240a      	movs	r4, #10
 8003c72:	e7dc      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c74:	240c      	movs	r4, #12
 8003c76:	e7da      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c78:	2410      	movs	r4, #16
 8003c7a:	e7d8      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c7c:	2420      	movs	r4, #32
 8003c7e:	e7d6      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c80:	2440      	movs	r4, #64	; 0x40
 8003c82:	e7d4      	b.n	8003c2e <UART_SetConfig+0xa66>
 8003c84:	2480      	movs	r4, #128	; 0x80
 8003c86:	e7d2      	b.n	8003c2e <UART_SetConfig+0xa66>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c88:	4668      	mov	r0, sp
 8003c8a:	f7fe fded 	bl	8002868 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003c90:	9b01      	ldr	r3, [sp, #4]
 8003c92:	b36a      	cbz	r2, 8003cf0 <UART_SetConfig+0xb28>
 8003c94:	2a01      	cmp	r2, #1
 8003c96:	d02d      	beq.n	8003cf4 <UART_SetConfig+0xb2c>
 8003c98:	2a02      	cmp	r2, #2
 8003c9a:	d016      	beq.n	8003cca <UART_SetConfig+0xb02>
 8003c9c:	2a03      	cmp	r2, #3
 8003c9e:	d02d      	beq.n	8003cfc <UART_SetConfig+0xb34>
 8003ca0:	2a04      	cmp	r2, #4
 8003ca2:	d011      	beq.n	8003cc8 <UART_SetConfig+0xb00>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ca4:	2a05      	cmp	r2, #5
 8003ca6:	d02b      	beq.n	8003d00 <UART_SetConfig+0xb38>
 8003ca8:	2a06      	cmp	r2, #6
 8003caa:	d02b      	beq.n	8003d04 <UART_SetConfig+0xb3c>
 8003cac:	2a07      	cmp	r2, #7
 8003cae:	d02b      	beq.n	8003d08 <UART_SetConfig+0xb40>
 8003cb0:	2a08      	cmp	r2, #8
 8003cb2:	d02b      	beq.n	8003d0c <UART_SetConfig+0xb44>
 8003cb4:	2a09      	cmp	r2, #9
 8003cb6:	d02b      	beq.n	8003d10 <UART_SetConfig+0xb48>
 8003cb8:	2a0a      	cmp	r2, #10
 8003cba:	d02b      	beq.n	8003d14 <UART_SetConfig+0xb4c>
 8003cbc:	2a0b      	cmp	r2, #11
 8003cbe:	bf14      	ite	ne
 8003cc0:	2401      	movne	r4, #1
 8003cc2:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003cc6:	e000      	b.n	8003cca <UART_SetConfig+0xb02>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cc8:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cca:	686a      	ldr	r2, [r5, #4]
 8003ccc:	fbb3 f4f4 	udiv	r4, r3, r4
 8003cd0:	e7b0      	b.n	8003c34 <UART_SetConfig+0xa6c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003cd2:	a803      	add	r0, sp, #12
 8003cd4:	f7fe fe72 	bl	80029bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003cda:	9b04      	ldr	r3, [sp, #16]
 8003cdc:	b142      	cbz	r2, 8003cf0 <UART_SetConfig+0xb28>
 8003cde:	2a01      	cmp	r2, #1
 8003ce0:	d008      	beq.n	8003cf4 <UART_SetConfig+0xb2c>
 8003ce2:	2a02      	cmp	r2, #2
 8003ce4:	d008      	beq.n	8003cf8 <UART_SetConfig+0xb30>
 8003ce6:	2a03      	cmp	r2, #3
 8003ce8:	d008      	beq.n	8003cfc <UART_SetConfig+0xb34>
 8003cea:	2a04      	cmp	r2, #4
 8003cec:	d1da      	bne.n	8003ca4 <UART_SetConfig+0xadc>
 8003cee:	e7ec      	b.n	8003cca <UART_SetConfig+0xb02>
 8003cf0:	2401      	movs	r4, #1
 8003cf2:	e7ea      	b.n	8003cca <UART_SetConfig+0xb02>
 8003cf4:	2402      	movs	r4, #2
 8003cf6:	e7e8      	b.n	8003cca <UART_SetConfig+0xb02>
 8003cf8:	2404      	movs	r4, #4
 8003cfa:	e7e6      	b.n	8003cca <UART_SetConfig+0xb02>
 8003cfc:	2406      	movs	r4, #6
 8003cfe:	e7e4      	b.n	8003cca <UART_SetConfig+0xb02>
 8003d00:	240a      	movs	r4, #10
 8003d02:	e7e2      	b.n	8003cca <UART_SetConfig+0xb02>
 8003d04:	240c      	movs	r4, #12
 8003d06:	e7e0      	b.n	8003cca <UART_SetConfig+0xb02>
 8003d08:	2410      	movs	r4, #16
 8003d0a:	e7de      	b.n	8003cca <UART_SetConfig+0xb02>
 8003d0c:	2420      	movs	r4, #32
 8003d0e:	e7dc      	b.n	8003cca <UART_SetConfig+0xb02>
 8003d10:	2440      	movs	r4, #64	; 0x40
 8003d12:	e7da      	b.n	8003cca <UART_SetConfig+0xb02>
 8003d14:	2480      	movs	r4, #128	; 0x80
 8003d16:	e7d8      	b.n	8003cca <UART_SetConfig+0xb02>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d18:	2201      	movs	r2, #1
 8003d1a:	e72c      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	e72a      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d20:	2204      	movs	r2, #4
 8003d22:	e728      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d24:	2206      	movs	r2, #6
 8003d26:	e726      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d28:	2208      	movs	r2, #8
 8003d2a:	e724      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d2c:	220a      	movs	r2, #10
 8003d2e:	e722      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d30:	220c      	movs	r2, #12
 8003d32:	e720      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d34:	2210      	movs	r2, #16
 8003d36:	e71e      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d38:	2220      	movs	r2, #32
 8003d3a:	e71c      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	e71a      	b.n	8003b76 <UART_SetConfig+0x9ae>
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	e718      	b.n	8003b76 <UART_SetConfig+0x9ae>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d44:	b1f0      	cbz	r0, 8003d84 <UART_SetConfig+0xbbc>
 8003d46:	2801      	cmp	r0, #1
 8003d48:	d01e      	beq.n	8003d88 <UART_SetConfig+0xbc0>
 8003d4a:	2802      	cmp	r0, #2
 8003d4c:	d01e      	beq.n	8003d8c <UART_SetConfig+0xbc4>
 8003d4e:	2803      	cmp	r0, #3
 8003d50:	d01e      	beq.n	8003d90 <UART_SetConfig+0xbc8>
 8003d52:	2804      	cmp	r0, #4
 8003d54:	d02c      	beq.n	8003db0 <UART_SetConfig+0xbe8>
 8003d56:	2805      	cmp	r0, #5
 8003d58:	d02c      	beq.n	8003db4 <UART_SetConfig+0xbec>
 8003d5a:	2806      	cmp	r0, #6
 8003d5c:	d02c      	beq.n	8003db8 <UART_SetConfig+0xbf0>
 8003d5e:	2807      	cmp	r0, #7
 8003d60:	d02c      	beq.n	8003dbc <UART_SetConfig+0xbf4>
 8003d62:	2808      	cmp	r0, #8
 8003d64:	d02c      	beq.n	8003dc0 <UART_SetConfig+0xbf8>
 8003d66:	2809      	cmp	r0, #9
 8003d68:	d02c      	beq.n	8003dc4 <UART_SetConfig+0xbfc>
 8003d6a:	280a      	cmp	r0, #10
 8003d6c:	d02c      	beq.n	8003dc8 <UART_SetConfig+0xc00>
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <UART_SetConfig+0xbd8>)
 8003d70:	4a0c      	ldr	r2, [pc, #48]	; (8003da4 <UART_SetConfig+0xbdc>)
 8003d72:	280b      	cmp	r0, #11
 8003d74:	bf14      	ite	ne
 8003d76:	4610      	movne	r0, r2
 8003d78:	4618      	moveq	r0, r3
 8003d7a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 8003d7e:	fbb0 f3f1 	udiv	r3, r0, r1
 8003d82:	e75c      	b.n	8003c3e <UART_SetConfig+0xa76>
 8003d84:	4807      	ldr	r0, [pc, #28]	; (8003da4 <UART_SetConfig+0xbdc>)
 8003d86:	e7f8      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003d88:	4804      	ldr	r0, [pc, #16]	; (8003d9c <UART_SetConfig+0xbd4>)
 8003d8a:	e7f6      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003d8c:	4806      	ldr	r0, [pc, #24]	; (8003da8 <UART_SetConfig+0xbe0>)
 8003d8e:	e7f4      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003d90:	4806      	ldr	r0, [pc, #24]	; (8003dac <UART_SetConfig+0xbe4>)
 8003d92:	e7f2      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003d94:	000aaa00 	.word	0x000aaa00
 8003d98:	58024400 	.word	0x58024400
 8003d9c:	03d09000 	.word	0x03d09000
 8003da0:	0007a120 	.word	0x0007a120
 8003da4:	07a12000 	.word	0x07a12000
 8003da8:	01e84800 	.word	0x01e84800
 8003dac:	01458554 	.word	0x01458554
 8003db0:	48a1      	ldr	r0, [pc, #644]	; (8004038 <UART_SetConfig+0xe70>)
 8003db2:	e7e2      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003db4:	48a1      	ldr	r0, [pc, #644]	; (800403c <UART_SetConfig+0xe74>)
 8003db6:	e7e0      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003db8:	48a1      	ldr	r0, [pc, #644]	; (8004040 <UART_SetConfig+0xe78>)
 8003dba:	e7de      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003dbc:	48a1      	ldr	r0, [pc, #644]	; (8004044 <UART_SetConfig+0xe7c>)
 8003dbe:	e7dc      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003dc0:	48a1      	ldr	r0, [pc, #644]	; (8004048 <UART_SetConfig+0xe80>)
 8003dc2:	e7da      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003dc4:	48a1      	ldr	r0, [pc, #644]	; (800404c <UART_SetConfig+0xe84>)
 8003dc6:	e7d8      	b.n	8003d7a <UART_SetConfig+0xbb2>
 8003dc8:	48a1      	ldr	r0, [pc, #644]	; (8004050 <UART_SetConfig+0xe88>)
 8003dca:	e7d6      	b.n	8003d7a <UART_SetConfig+0xbb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dcc:	b300      	cbz	r0, 8003e10 <UART_SetConfig+0xc48>
 8003dce:	2801      	cmp	r0, #1
 8003dd0:	d020      	beq.n	8003e14 <UART_SetConfig+0xc4c>
 8003dd2:	2802      	cmp	r0, #2
 8003dd4:	d020      	beq.n	8003e18 <UART_SetConfig+0xc50>
 8003dd6:	2803      	cmp	r0, #3
 8003dd8:	d020      	beq.n	8003e1c <UART_SetConfig+0xc54>
 8003dda:	2804      	cmp	r0, #4
 8003ddc:	d020      	beq.n	8003e20 <UART_SetConfig+0xc58>
 8003dde:	2805      	cmp	r0, #5
 8003de0:	d020      	beq.n	8003e24 <UART_SetConfig+0xc5c>
 8003de2:	2806      	cmp	r0, #6
 8003de4:	d020      	beq.n	8003e28 <UART_SetConfig+0xc60>
 8003de6:	2807      	cmp	r0, #7
 8003de8:	d020      	beq.n	8003e2c <UART_SetConfig+0xc64>
 8003dea:	2808      	cmp	r0, #8
 8003dec:	d020      	beq.n	8003e30 <UART_SetConfig+0xc68>
 8003dee:	2809      	cmp	r0, #9
 8003df0:	d020      	beq.n	8003e34 <UART_SetConfig+0xc6c>
 8003df2:	280a      	cmp	r0, #10
 8003df4:	d020      	beq.n	8003e38 <UART_SetConfig+0xc70>
 8003df6:	f647 2212 	movw	r2, #31250	; 0x7a12
 8003dfa:	4b92      	ldr	r3, [pc, #584]	; (8004044 <UART_SetConfig+0xe7c>)
 8003dfc:	280b      	cmp	r0, #11
 8003dfe:	bf14      	ite	ne
 8003e00:	4618      	movne	r0, r3
 8003e02:	4610      	moveq	r0, r2
 8003e04:	686b      	ldr	r3, [r5, #4]
 8003e06:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0e:	e716      	b.n	8003c3e <UART_SetConfig+0xa76>
 8003e10:	488c      	ldr	r0, [pc, #560]	; (8004044 <UART_SetConfig+0xe7c>)
 8003e12:	e7f7      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e14:	488c      	ldr	r0, [pc, #560]	; (8004048 <UART_SetConfig+0xe80>)
 8003e16:	e7f5      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e18:	488c      	ldr	r0, [pc, #560]	; (800404c <UART_SetConfig+0xe84>)
 8003e1a:	e7f3      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e1c:	488d      	ldr	r0, [pc, #564]	; (8004054 <UART_SetConfig+0xe8c>)
 8003e1e:	e7f1      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e20:	488b      	ldr	r0, [pc, #556]	; (8004050 <UART_SetConfig+0xe88>)
 8003e22:	e7ef      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e24:	488c      	ldr	r0, [pc, #560]	; (8004058 <UART_SetConfig+0xe90>)
 8003e26:	e7ed      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e28:	488c      	ldr	r0, [pc, #560]	; (800405c <UART_SetConfig+0xe94>)
 8003e2a:	e7eb      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e2c:	488c      	ldr	r0, [pc, #560]	; (8004060 <UART_SetConfig+0xe98>)
 8003e2e:	e7e9      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e30:	488c      	ldr	r0, [pc, #560]	; (8004064 <UART_SetConfig+0xe9c>)
 8003e32:	e7e7      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e34:	488c      	ldr	r0, [pc, #560]	; (8004068 <UART_SetConfig+0xea0>)
 8003e36:	e7e5      	b.n	8003e04 <UART_SetConfig+0xc3c>
 8003e38:	f24f 4024 	movw	r0, #62500	; 0xf424
 8003e3c:	e7e2      	b.n	8003e04 <UART_SetConfig+0xc3c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e3e:	b1e8      	cbz	r0, 8003e7c <UART_SetConfig+0xcb4>
 8003e40:	2801      	cmp	r0, #1
 8003e42:	d017      	beq.n	8003e74 <UART_SetConfig+0xcac>
 8003e44:	2802      	cmp	r0, #2
 8003e46:	d01c      	beq.n	8003e82 <UART_SetConfig+0xcba>
 8003e48:	2803      	cmp	r0, #3
 8003e4a:	d01d      	beq.n	8003e88 <UART_SetConfig+0xcc0>
 8003e4c:	2804      	cmp	r0, #4
 8003e4e:	d01e      	beq.n	8003e8e <UART_SetConfig+0xcc6>
 8003e50:	2805      	cmp	r0, #5
 8003e52:	d01f      	beq.n	8003e94 <UART_SetConfig+0xccc>
 8003e54:	2806      	cmp	r0, #6
 8003e56:	d020      	beq.n	8003e9a <UART_SetConfig+0xcd2>
 8003e58:	2807      	cmp	r0, #7
 8003e5a:	d021      	beq.n	8003ea0 <UART_SetConfig+0xcd8>
 8003e5c:	2808      	cmp	r0, #8
 8003e5e:	d022      	beq.n	8003ea6 <UART_SetConfig+0xcde>
 8003e60:	2809      	cmp	r0, #9
 8003e62:	d023      	beq.n	8003eac <UART_SetConfig+0xce4>
 8003e64:	280a      	cmp	r0, #10
 8003e66:	d024      	beq.n	8003eb2 <UART_SetConfig+0xcea>
 8003e68:	280b      	cmp	r0, #11
 8003e6a:	bf14      	ite	ne
 8003e6c:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8003e70:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003e74:	6869      	ldr	r1, [r5, #4]
 8003e76:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 8003e7a:	e6a2      	b.n	8003bc2 <UART_SetConfig+0x9fa>
 8003e7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e80:	e7f8      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e86:	e7f5      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003e88:	f642 22aa 	movw	r2, #10922	; 0x2aaa
 8003e8c:	e7f2      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e92:	e7ef      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003e94:	f641 1298 	movw	r2, #6552	; 0x1998
 8003e98:	e7ec      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003e9a:	f241 5254 	movw	r2, #5460	; 0x1554
 8003e9e:	e7e9      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ea4:	e7e6      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eaa:	e7e3      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eb0:	e7e0      	b.n	8003e74 <UART_SetConfig+0xcac>
 8003eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb6:	e7dd      	b.n	8003e74 <UART_SetConfig+0xcac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fd fdfe 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ebc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ebe:	b363      	cbz	r3, 8003f1a <UART_SetConfig+0xd52>
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d02c      	beq.n	8003f1e <UART_SetConfig+0xd56>
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d02c      	beq.n	8003f22 <UART_SetConfig+0xd5a>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d02c      	beq.n	8003f26 <UART_SetConfig+0xd5e>
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d02c      	beq.n	8003f2a <UART_SetConfig+0xd62>
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d02c      	beq.n	8003f2e <UART_SetConfig+0xd66>
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d02c      	beq.n	8003f32 <UART_SetConfig+0xd6a>
 8003ed8:	2b07      	cmp	r3, #7
 8003eda:	d02c      	beq.n	8003f36 <UART_SetConfig+0xd6e>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d02c      	beq.n	8003f3a <UART_SetConfig+0xd72>
 8003ee0:	2b09      	cmp	r3, #9
 8003ee2:	d02c      	beq.n	8003f3e <UART_SetConfig+0xd76>
 8003ee4:	2b0a      	cmp	r3, #10
 8003ee6:	d02c      	beq.n	8003f42 <UART_SetConfig+0xd7a>
 8003ee8:	2b0b      	cmp	r3, #11
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003ef2:	686a      	ldr	r2, [r5, #4]
 8003ef4:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ef8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f00:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f02:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f04:	f1a3 0010 	sub.w	r0, r3, #16
 8003f08:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003f0c:	4288      	cmp	r0, r1
 8003f0e:	f63f aa69 	bhi.w	80033e4 <UART_SetConfig+0x21c>
      huart->Instance->BRR = usartdiv;
 8003f12:	6829      	ldr	r1, [r5, #0]
 8003f14:	60cb      	str	r3, [r1, #12]
 8003f16:	f7ff bb3e 	b.w	8003596 <UART_SetConfig+0x3ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e7e9      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e7e7      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f22:	2304      	movs	r3, #4
 8003f24:	e7e5      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f26:	2306      	movs	r3, #6
 8003f28:	e7e3      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	e7e1      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f2e:	230a      	movs	r3, #10
 8003f30:	e7df      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f32:	230c      	movs	r3, #12
 8003f34:	e7dd      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f36:	2310      	movs	r3, #16
 8003f38:	e7db      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e7d9      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f3e:	2340      	movs	r3, #64	; 0x40
 8003f40:	e7d7      	b.n	8003ef2 <UART_SetConfig+0xd2a>
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	e7d5      	b.n	8003ef2 <UART_SetConfig+0xd2a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f46:	f7fd fdc9 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f4c:	b1c3      	cbz	r3, 8003f80 <UART_SetConfig+0xdb8>
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d01a      	beq.n	8003f88 <UART_SetConfig+0xdc0>
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0xdc4>
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d01a      	beq.n	8003f90 <UART_SetConfig+0xdc8>
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d01a      	beq.n	8003f94 <UART_SetConfig+0xdcc>
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d01a      	beq.n	8003f98 <UART_SetConfig+0xdd0>
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d01a      	beq.n	8003f9c <UART_SetConfig+0xdd4>
 8003f66:	2b07      	cmp	r3, #7
 8003f68:	d01a      	beq.n	8003fa0 <UART_SetConfig+0xdd8>
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d01a      	beq.n	8003fa4 <UART_SetConfig+0xddc>
 8003f6e:	2b09      	cmp	r3, #9
 8003f70:	d01a      	beq.n	8003fa8 <UART_SetConfig+0xde0>
 8003f72:	2b0a      	cmp	r3, #10
 8003f74:	d01a      	beq.n	8003fac <UART_SetConfig+0xde4>
 8003f76:	2b0b      	cmp	r3, #11
 8003f78:	bf14      	ite	ne
 8003f7a:	2401      	movne	r4, #1
 8003f7c:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8003f80:	686a      	ldr	r2, [r5, #4]
 8003f82:	fbb0 f3f4 	udiv	r3, r0, r4
 8003f86:	e7b7      	b.n	8003ef8 <UART_SetConfig+0xd30>
 8003f88:	2402      	movs	r4, #2
 8003f8a:	e7f9      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003f8c:	2404      	movs	r4, #4
 8003f8e:	e7f7      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003f90:	2406      	movs	r4, #6
 8003f92:	e7f5      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003f94:	2408      	movs	r4, #8
 8003f96:	e7f3      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003f98:	240a      	movs	r4, #10
 8003f9a:	e7f1      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003f9c:	240c      	movs	r4, #12
 8003f9e:	e7ef      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003fa0:	2410      	movs	r4, #16
 8003fa2:	e7ed      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003fa4:	2420      	movs	r4, #32
 8003fa6:	e7eb      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003fa8:	2440      	movs	r4, #64	; 0x40
 8003faa:	e7e9      	b.n	8003f80 <UART_SetConfig+0xdb8>
 8003fac:	2480      	movs	r4, #128	; 0x80
 8003fae:	e7e7      	b.n	8003f80 <UART_SetConfig+0xdb8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb0:	2408      	movs	r4, #8
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb2:	6868      	ldr	r0, [r5, #4]
 8003fb4:	fbb3 f3f4 	udiv	r3, r3, r4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb8:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003fbc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003fc0:	e79e      	b.n	8003f00 <UART_SetConfig+0xd38>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fc2:	a803      	add	r0, sp, #12
 8003fc4:	f7fe fcfa 	bl	80029bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003fca:	9b04      	ldr	r3, [sp, #16]
 8003fcc:	b14a      	cbz	r2, 8003fe2 <UART_SetConfig+0xe1a>
 8003fce:	2a01      	cmp	r2, #1
 8003fd0:	d009      	beq.n	8003fe6 <UART_SetConfig+0xe1e>
 8003fd2:	2a02      	cmp	r2, #2
 8003fd4:	d009      	beq.n	8003fea <UART_SetConfig+0xe22>
 8003fd6:	2a03      	cmp	r2, #3
 8003fd8:	d009      	beq.n	8003fee <UART_SetConfig+0xe26>
 8003fda:	2a04      	cmp	r2, #4
 8003fdc:	f040 811d 	bne.w	800421a <UART_SetConfig+0x1052>
 8003fe0:	e7e7      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003fe2:	2401      	movs	r4, #1
 8003fe4:	e7e5      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003fe6:	2402      	movs	r4, #2
 8003fe8:	e7e3      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003fea:	2404      	movs	r4, #4
 8003fec:	e7e1      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003fee:	2406      	movs	r4, #6
 8003ff0:	e7df      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003ff2:	240a      	movs	r4, #10
 8003ff4:	e7dd      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003ff6:	240c      	movs	r4, #12
 8003ff8:	e7db      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003ffa:	2410      	movs	r4, #16
 8003ffc:	e7d9      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8003ffe:	2420      	movs	r4, #32
 8004000:	e7d7      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8004002:	2440      	movs	r4, #64	; 0x40
 8004004:	e7d5      	b.n	8003fb2 <UART_SetConfig+0xdea>
 8004006:	2480      	movs	r4, #128	; 0x80
 8004008:	e7d3      	b.n	8003fb2 <UART_SetConfig+0xdea>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800400a:	2201      	movs	r2, #1
 800400c:	e158      	b.n	80042c0 <UART_SetConfig+0x10f8>
 800400e:	2202      	movs	r2, #2
 8004010:	e156      	b.n	80042c0 <UART_SetConfig+0x10f8>
 8004012:	2204      	movs	r2, #4
 8004014:	e154      	b.n	80042c0 <UART_SetConfig+0x10f8>
 8004016:	2206      	movs	r2, #6
 8004018:	e152      	b.n	80042c0 <UART_SetConfig+0x10f8>
 800401a:	2208      	movs	r2, #8
 800401c:	e150      	b.n	80042c0 <UART_SetConfig+0x10f8>
 800401e:	220a      	movs	r2, #10
 8004020:	e14e      	b.n	80042c0 <UART_SetConfig+0x10f8>
 8004022:	220c      	movs	r2, #12
 8004024:	e14c      	b.n	80042c0 <UART_SetConfig+0x10f8>
 8004026:	2210      	movs	r2, #16
 8004028:	e14a      	b.n	80042c0 <UART_SetConfig+0x10f8>
 800402a:	2220      	movs	r2, #32
 800402c:	e148      	b.n	80042c0 <UART_SetConfig+0x10f8>
 800402e:	2240      	movs	r2, #64	; 0x40
 8004030:	e146      	b.n	80042c0 <UART_SetConfig+0x10f8>
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	e144      	b.n	80042c0 <UART_SetConfig+0x10f8>
 8004036:	bf00      	nop
 8004038:	00f42400 	.word	0x00f42400
 800403c:	00c35000 	.word	0x00c35000
 8004040:	00a2c2aa 	.word	0x00a2c2aa
 8004044:	007a1200 	.word	0x007a1200
 8004048:	003d0900 	.word	0x003d0900
 800404c:	001e8480 	.word	0x001e8480
 8004050:	000f4240 	.word	0x000f4240
 8004054:	00145854 	.word	0x00145854
 8004058:	000c3500 	.word	0x000c3500
 800405c:	000a2c2a 	.word	0x000a2c2a
 8004060:	0007a120 	.word	0x0007a120
 8004064:	0003d090 	.word	0x0003d090
 8004068:	0001e848 	.word	0x0001e848
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800406c:	b1f0      	cbz	r0, 80040ac <UART_SetConfig+0xee4>
 800406e:	2801      	cmp	r0, #1
 8004070:	d01e      	beq.n	80040b0 <UART_SetConfig+0xee8>
 8004072:	2802      	cmp	r0, #2
 8004074:	d01e      	beq.n	80040b4 <UART_SetConfig+0xeec>
 8004076:	2803      	cmp	r0, #3
 8004078:	d01e      	beq.n	80040b8 <UART_SetConfig+0xef0>
 800407a:	2804      	cmp	r0, #4
 800407c:	d01e      	beq.n	80040bc <UART_SetConfig+0xef4>
 800407e:	2805      	cmp	r0, #5
 8004080:	d01e      	beq.n	80040c0 <UART_SetConfig+0xef8>
 8004082:	2806      	cmp	r0, #6
 8004084:	d01e      	beq.n	80040c4 <UART_SetConfig+0xefc>
 8004086:	2807      	cmp	r0, #7
 8004088:	d01e      	beq.n	80040c8 <UART_SetConfig+0xf00>
 800408a:	2808      	cmp	r0, #8
 800408c:	d01e      	beq.n	80040cc <UART_SetConfig+0xf04>
 800408e:	2809      	cmp	r0, #9
 8004090:	d01e      	beq.n	80040d0 <UART_SetConfig+0xf08>
 8004092:	280a      	cmp	r0, #10
 8004094:	d01e      	beq.n	80040d4 <UART_SetConfig+0xf0c>
 8004096:	4b8e      	ldr	r3, [pc, #568]	; (80042d0 <UART_SetConfig+0x1108>)
 8004098:	4a8e      	ldr	r2, [pc, #568]	; (80042d4 <UART_SetConfig+0x110c>)
 800409a:	280b      	cmp	r0, #11
 800409c:	bf14      	ite	ne
 800409e:	4610      	movne	r0, r2
 80040a0:	4618      	moveq	r0, r3
 80040a2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 80040a6:	fbb0 f3f1 	udiv	r3, r0, r1
 80040aa:	e729      	b.n	8003f00 <UART_SetConfig+0xd38>
 80040ac:	4889      	ldr	r0, [pc, #548]	; (80042d4 <UART_SetConfig+0x110c>)
 80040ae:	e7f8      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040b0:	4889      	ldr	r0, [pc, #548]	; (80042d8 <UART_SetConfig+0x1110>)
 80040b2:	e7f6      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040b4:	4889      	ldr	r0, [pc, #548]	; (80042dc <UART_SetConfig+0x1114>)
 80040b6:	e7f4      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040b8:	4889      	ldr	r0, [pc, #548]	; (80042e0 <UART_SetConfig+0x1118>)
 80040ba:	e7f2      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040bc:	4889      	ldr	r0, [pc, #548]	; (80042e4 <UART_SetConfig+0x111c>)
 80040be:	e7f0      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040c0:	4889      	ldr	r0, [pc, #548]	; (80042e8 <UART_SetConfig+0x1120>)
 80040c2:	e7ee      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040c4:	4889      	ldr	r0, [pc, #548]	; (80042ec <UART_SetConfig+0x1124>)
 80040c6:	e7ec      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040c8:	4889      	ldr	r0, [pc, #548]	; (80042f0 <UART_SetConfig+0x1128>)
 80040ca:	e7ea      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040cc:	4889      	ldr	r0, [pc, #548]	; (80042f4 <UART_SetConfig+0x112c>)
 80040ce:	e7e8      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040d0:	4889      	ldr	r0, [pc, #548]	; (80042f8 <UART_SetConfig+0x1130>)
 80040d2:	e7e6      	b.n	80040a2 <UART_SetConfig+0xeda>
 80040d4:	4889      	ldr	r0, [pc, #548]	; (80042fc <UART_SetConfig+0x1134>)
 80040d6:	e7e4      	b.n	80040a2 <UART_SetConfig+0xeda>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040d8:	b300      	cbz	r0, 800411c <UART_SetConfig+0xf54>
 80040da:	2801      	cmp	r0, #1
 80040dc:	d020      	beq.n	8004120 <UART_SetConfig+0xf58>
 80040de:	2802      	cmp	r0, #2
 80040e0:	d020      	beq.n	8004124 <UART_SetConfig+0xf5c>
 80040e2:	2803      	cmp	r0, #3
 80040e4:	d020      	beq.n	8004128 <UART_SetConfig+0xf60>
 80040e6:	2804      	cmp	r0, #4
 80040e8:	d020      	beq.n	800412c <UART_SetConfig+0xf64>
 80040ea:	2805      	cmp	r0, #5
 80040ec:	d020      	beq.n	8004130 <UART_SetConfig+0xf68>
 80040ee:	2806      	cmp	r0, #6
 80040f0:	d020      	beq.n	8004134 <UART_SetConfig+0xf6c>
 80040f2:	2807      	cmp	r0, #7
 80040f4:	d020      	beq.n	8004138 <UART_SetConfig+0xf70>
 80040f6:	2808      	cmp	r0, #8
 80040f8:	d020      	beq.n	800413c <UART_SetConfig+0xf74>
 80040fa:	2809      	cmp	r0, #9
 80040fc:	d020      	beq.n	8004140 <UART_SetConfig+0xf78>
 80040fe:	280a      	cmp	r0, #10
 8004100:	d021      	beq.n	8004146 <UART_SetConfig+0xf7e>
 8004102:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004106:	4b7a      	ldr	r3, [pc, #488]	; (80042f0 <UART_SetConfig+0x1128>)
 8004108:	280b      	cmp	r0, #11
 800410a:	bf14      	ite	ne
 800410c:	4618      	movne	r0, r3
 800410e:	4610      	moveq	r0, r2
 8004110:	686b      	ldr	r3, [r5, #4]
 8004112:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004116:	fbb0 f3f3 	udiv	r3, r0, r3
 800411a:	e6f1      	b.n	8003f00 <UART_SetConfig+0xd38>
 800411c:	4874      	ldr	r0, [pc, #464]	; (80042f0 <UART_SetConfig+0x1128>)
 800411e:	e7f7      	b.n	8004110 <UART_SetConfig+0xf48>
 8004120:	4874      	ldr	r0, [pc, #464]	; (80042f4 <UART_SetConfig+0x112c>)
 8004122:	e7f5      	b.n	8004110 <UART_SetConfig+0xf48>
 8004124:	4874      	ldr	r0, [pc, #464]	; (80042f8 <UART_SetConfig+0x1130>)
 8004126:	e7f3      	b.n	8004110 <UART_SetConfig+0xf48>
 8004128:	4875      	ldr	r0, [pc, #468]	; (8004300 <UART_SetConfig+0x1138>)
 800412a:	e7f1      	b.n	8004110 <UART_SetConfig+0xf48>
 800412c:	4873      	ldr	r0, [pc, #460]	; (80042fc <UART_SetConfig+0x1134>)
 800412e:	e7ef      	b.n	8004110 <UART_SetConfig+0xf48>
 8004130:	4874      	ldr	r0, [pc, #464]	; (8004304 <UART_SetConfig+0x113c>)
 8004132:	e7ed      	b.n	8004110 <UART_SetConfig+0xf48>
 8004134:	4874      	ldr	r0, [pc, #464]	; (8004308 <UART_SetConfig+0x1140>)
 8004136:	e7eb      	b.n	8004110 <UART_SetConfig+0xf48>
 8004138:	4865      	ldr	r0, [pc, #404]	; (80042d0 <UART_SetConfig+0x1108>)
 800413a:	e7e9      	b.n	8004110 <UART_SetConfig+0xf48>
 800413c:	4873      	ldr	r0, [pc, #460]	; (800430c <UART_SetConfig+0x1144>)
 800413e:	e7e7      	b.n	8004110 <UART_SetConfig+0xf48>
 8004140:	f24f 4024 	movw	r0, #62500	; 0xf424
 8004144:	e7e4      	b.n	8004110 <UART_SetConfig+0xf48>
 8004146:	f647 2012 	movw	r0, #31250	; 0x7a12
 800414a:	e7e1      	b.n	8004110 <UART_SetConfig+0xf48>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800414c:	b1d0      	cbz	r0, 8004184 <UART_SetConfig+0xfbc>
 800414e:	2801      	cmp	r0, #1
 8004150:	d01b      	beq.n	800418a <UART_SetConfig+0xfc2>
 8004152:	2802      	cmp	r0, #2
 8004154:	d01c      	beq.n	8004190 <UART_SetConfig+0xfc8>
 8004156:	2803      	cmp	r0, #3
 8004158:	d01d      	beq.n	8004196 <UART_SetConfig+0xfce>
 800415a:	2804      	cmp	r0, #4
 800415c:	d01e      	beq.n	800419c <UART_SetConfig+0xfd4>
 800415e:	2805      	cmp	r0, #5
 8004160:	d01f      	beq.n	80041a2 <UART_SetConfig+0xfda>
 8004162:	2806      	cmp	r0, #6
 8004164:	d020      	beq.n	80041a8 <UART_SetConfig+0xfe0>
 8004166:	2807      	cmp	r0, #7
 8004168:	d021      	beq.n	80041ae <UART_SetConfig+0xfe6>
 800416a:	2808      	cmp	r0, #8
 800416c:	d022      	beq.n	80041b4 <UART_SetConfig+0xfec>
 800416e:	2809      	cmp	r0, #9
 8004170:	d023      	beq.n	80041ba <UART_SetConfig+0xff2>
 8004172:	280a      	cmp	r0, #10
 8004174:	d024      	beq.n	80041c0 <UART_SetConfig+0xff8>
 8004176:	280b      	cmp	r0, #11
 8004178:	bf14      	ite	ne
 800417a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800417e:	2380      	moveq	r3, #128	; 0x80
 8004180:	6868      	ldr	r0, [r5, #4]
 8004182:	e719      	b.n	8003fb8 <UART_SetConfig+0xdf0>
 8004184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004188:	e7fa      	b.n	8004180 <UART_SetConfig+0xfb8>
 800418a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800418e:	e7f7      	b.n	8004180 <UART_SetConfig+0xfb8>
 8004190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004194:	e7f4      	b.n	8004180 <UART_SetConfig+0xfb8>
 8004196:	f241 5355 	movw	r3, #5461	; 0x1555
 800419a:	e7f1      	b.n	8004180 <UART_SetConfig+0xfb8>
 800419c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a0:	e7ee      	b.n	8004180 <UART_SetConfig+0xfb8>
 80041a2:	f640 43cc 	movw	r3, #3276	; 0xccc
 80041a6:	e7eb      	b.n	8004180 <UART_SetConfig+0xfb8>
 80041a8:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80041ac:	e7e8      	b.n	8004180 <UART_SetConfig+0xfb8>
 80041ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b2:	e7e5      	b.n	8004180 <UART_SetConfig+0xfb8>
 80041b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b8:	e7e2      	b.n	8004180 <UART_SetConfig+0xfb8>
 80041ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041be:	e7df      	b.n	8004180 <UART_SetConfig+0xfb8>
 80041c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c4:	e7dc      	b.n	8004180 <UART_SetConfig+0xfb8>
 80041c6:	2480      	movs	r4, #128	; 0x80
 80041c8:	f7ff b889 	b.w	80032de <UART_SetConfig+0x116>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80041d0:	f43f a896 	beq.w	8003300 <UART_SetConfig+0x138>
        ret = HAL_ERROR;
 80041d4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e694      	b.n	8003f04 <UART_SetConfig+0xd3c>
    switch (clocksource)
 80041da:	2c08      	cmp	r4, #8
 80041dc:	f43f aef1 	beq.w	8003fc2 <UART_SetConfig+0xdfa>
 80041e0:	d833      	bhi.n	800424a <UART_SetConfig+0x1082>
 80041e2:	2c01      	cmp	r4, #1
 80041e4:	f43f aeaf 	beq.w	8003f46 <UART_SetConfig+0xd7e>
 80041e8:	f4ff ae66 	bcc.w	8003eb8 <UART_SetConfig+0xcf0>
 80041ec:	2c04      	cmp	r4, #4
 80041ee:	f47f a8f9 	bne.w	80033e4 <UART_SetConfig+0x21c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041f2:	4668      	mov	r0, sp
 80041f4:	f7fe fb38 	bl	8002868 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80041fa:	9b01      	ldr	r3, [sp, #4]
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	f43f aef0 	beq.w	8003fe2 <UART_SetConfig+0xe1a>
 8004202:	2a01      	cmp	r2, #1
 8004204:	f43f aeef 	beq.w	8003fe6 <UART_SetConfig+0xe1e>
 8004208:	2a02      	cmp	r2, #2
 800420a:	f43f aed2 	beq.w	8003fb2 <UART_SetConfig+0xdea>
 800420e:	2a03      	cmp	r2, #3
 8004210:	f43f aeed 	beq.w	8003fee <UART_SetConfig+0xe26>
 8004214:	2a04      	cmp	r2, #4
 8004216:	f43f aecb 	beq.w	8003fb0 <UART_SetConfig+0xde8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800421a:	2a05      	cmp	r2, #5
 800421c:	f43f aee9 	beq.w	8003ff2 <UART_SetConfig+0xe2a>
 8004220:	2a06      	cmp	r2, #6
 8004222:	f43f aee8 	beq.w	8003ff6 <UART_SetConfig+0xe2e>
 8004226:	2a07      	cmp	r2, #7
 8004228:	f43f aee7 	beq.w	8003ffa <UART_SetConfig+0xe32>
 800422c:	2a08      	cmp	r2, #8
 800422e:	f43f aee6 	beq.w	8003ffe <UART_SetConfig+0xe36>
 8004232:	2a09      	cmp	r2, #9
 8004234:	f43f aee5 	beq.w	8004002 <UART_SetConfig+0xe3a>
 8004238:	2a0a      	cmp	r2, #10
 800423a:	f43f aee4 	beq.w	8004006 <UART_SetConfig+0xe3e>
 800423e:	2a0b      	cmp	r2, #11
 8004240:	bf14      	ite	ne
 8004242:	2401      	movne	r4, #1
 8004244:	f44f 7480 	moveq.w	r4, #256	; 0x100
 8004248:	e6b3      	b.n	8003fb2 <UART_SetConfig+0xdea>
    switch (clocksource)
 800424a:	2c20      	cmp	r4, #32
 800424c:	f43f af44 	beq.w	80040d8 <UART_SetConfig+0xf10>
 8004250:	2c40      	cmp	r4, #64	; 0x40
 8004252:	f43f af7b 	beq.w	800414c <UART_SetConfig+0xf84>
 8004256:	2c10      	cmp	r4, #16
 8004258:	f47f a8c4 	bne.w	80033e4 <UART_SetConfig+0x21c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800425c:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <UART_SetConfig+0x1148>)
 800425e:	6869      	ldr	r1, [r5, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f012 0f20 	tst.w	r2, #32
 8004266:	f43f af01 	beq.w	800406c <UART_SetConfig+0xea4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <UART_SetConfig+0x110c>)
 800426e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004272:	40d3      	lsrs	r3, r2
 8004274:	2800      	cmp	r0, #0
 8004276:	f43f aec8 	beq.w	800400a <UART_SetConfig+0xe42>
 800427a:	2801      	cmp	r0, #1
 800427c:	f43f aec7 	beq.w	800400e <UART_SetConfig+0xe46>
 8004280:	2802      	cmp	r0, #2
 8004282:	f43f aec6 	beq.w	8004012 <UART_SetConfig+0xe4a>
 8004286:	2803      	cmp	r0, #3
 8004288:	f43f aec5 	beq.w	8004016 <UART_SetConfig+0xe4e>
 800428c:	2804      	cmp	r0, #4
 800428e:	f43f aec4 	beq.w	800401a <UART_SetConfig+0xe52>
 8004292:	2805      	cmp	r0, #5
 8004294:	f43f aec3 	beq.w	800401e <UART_SetConfig+0xe56>
 8004298:	2806      	cmp	r0, #6
 800429a:	f43f aec2 	beq.w	8004022 <UART_SetConfig+0xe5a>
 800429e:	2807      	cmp	r0, #7
 80042a0:	f43f aec1 	beq.w	8004026 <UART_SetConfig+0xe5e>
 80042a4:	2808      	cmp	r0, #8
 80042a6:	f43f aec0 	beq.w	800402a <UART_SetConfig+0xe62>
 80042aa:	2809      	cmp	r0, #9
 80042ac:	f43f aebf 	beq.w	800402e <UART_SetConfig+0xe66>
 80042b0:	280a      	cmp	r0, #10
 80042b2:	f43f aebe 	beq.w	8004032 <UART_SetConfig+0xe6a>
 80042b6:	280b      	cmp	r0, #11
 80042b8:	bf14      	ite	ne
 80042ba:	2201      	movne	r2, #1
 80042bc:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80042c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80042c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80042cc:	e618      	b.n	8003f00 <UART_SetConfig+0xd38>
 80042ce:	bf00      	nop
 80042d0:	0003d090 	.word	0x0003d090
 80042d4:	03d09000 	.word	0x03d09000
 80042d8:	01e84800 	.word	0x01e84800
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	00a2c2aa 	.word	0x00a2c2aa
 80042e4:	007a1200 	.word	0x007a1200
 80042e8:	0061a800 	.word	0x0061a800
 80042ec:	00516155 	.word	0x00516155
 80042f0:	003d0900 	.word	0x003d0900
 80042f4:	001e8480 	.word	0x001e8480
 80042f8:	000f4240 	.word	0x000f4240
 80042fc:	0007a120 	.word	0x0007a120
 8004300:	000a2c2a 	.word	0x000a2c2a
 8004304:	00061a80 	.word	0x00061a80
 8004308:	00051615 	.word	0x00051615
 800430c:	0001e848 	.word	0x0001e848
 8004310:	58024400 	.word	0x58024400

08004314 <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004314:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004316:	2bff      	cmp	r3, #255	; 0xff
{
 8004318:	b510      	push	{r4, lr}
 800431a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800431c:	d904      	bls.n	8004328 <UART_AdvFeatureConfig+0x14>
 800431e:	f640 4149 	movw	r1, #3145	; 0xc49
 8004322:	486a      	ldr	r0, [pc, #424]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 8004324:	f002 fad4 	bl	80068d0 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800432a:	07d8      	lsls	r0, r3, #31
 800432c:	d50f      	bpl.n	800434e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800432e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004330:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8004334:	d004      	beq.n	8004340 <UART_AdvFeatureConfig+0x2c>
 8004336:	f640 414e 	movw	r1, #3150	; 0xc4e
 800433a:	4864      	ldr	r0, [pc, #400]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 800433c:	f002 fac8 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004344:	6853      	ldr	r3, [r2, #4]
 8004346:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800434a:	430b      	orrs	r3, r1
 800434c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800434e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004350:	0799      	lsls	r1, r3, #30
 8004352:	d50f      	bpl.n	8004374 <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004354:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004356:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800435a:	d004      	beq.n	8004366 <UART_AdvFeatureConfig+0x52>
 800435c:	f640 4155 	movw	r1, #3157	; 0xc55
 8004360:	485a      	ldr	r0, [pc, #360]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 8004362:	f002 fab5 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800436a:	6853      	ldr	r3, [r2, #4]
 800436c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004370:	430b      	orrs	r3, r1
 8004372:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004376:	075a      	lsls	r2, r3, #29
 8004378:	d50f      	bpl.n	800439a <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800437a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800437c:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8004380:	d004      	beq.n	800438c <UART_AdvFeatureConfig+0x78>
 8004382:	f640 415c 	movw	r1, #3164	; 0xc5c
 8004386:	4851      	ldr	r0, [pc, #324]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 8004388:	f002 faa2 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004390:	6853      	ldr	r3, [r2, #4]
 8004392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004396:	430b      	orrs	r3, r1
 8004398:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800439c:	071b      	lsls	r3, r3, #28
 800439e:	d50f      	bpl.n	80043c0 <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80043a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043a2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80043a6:	d004      	beq.n	80043b2 <UART_AdvFeatureConfig+0x9e>
 80043a8:	f640 4163 	movw	r1, #3171	; 0xc63
 80043ac:	4847      	ldr	r0, [pc, #284]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 80043ae:	f002 fa8f 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043b6:	6853      	ldr	r3, [r2, #4]
 80043b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043bc:	430b      	orrs	r3, r1
 80043be:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043c2:	06d8      	lsls	r0, r3, #27
 80043c4:	d50f      	bpl.n	80043e6 <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80043c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043c8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80043cc:	d004      	beq.n	80043d8 <UART_AdvFeatureConfig+0xc4>
 80043ce:	f640 416a 	movw	r1, #3178	; 0xc6a
 80043d2:	483e      	ldr	r0, [pc, #248]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 80043d4:	f002 fa7c 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80043dc:	6893      	ldr	r3, [r2, #8]
 80043de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	d50f      	bpl.n	800440c <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80043ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ee:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80043f2:	d004      	beq.n	80043fe <UART_AdvFeatureConfig+0xea>
 80043f4:	f640 4171 	movw	r1, #3185	; 0xc71
 80043f8:	4834      	ldr	r0, [pc, #208]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 80043fa:	f002 fa69 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004402:	6893      	ldr	r3, [r2, #8]
 8004404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004408:	430b      	orrs	r3, r1
 800440a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800440c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800440e:	065a      	lsls	r2, r3, #25
 8004410:	d548      	bpl.n	80044a4 <UART_AdvFeatureConfig+0x190>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <UART_AdvFeatureConfig+0x1bc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d020      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 800441a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800441e:	4293      	cmp	r3, r2
 8004420:	d01c      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 8004422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 800442a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800442e:	4293      	cmp	r3, r2
 8004430:	d014      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 8004432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004436:	4293      	cmp	r3, r2
 8004438:	d010      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 800443a:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800443e:	4293      	cmp	r3, r2
 8004440:	d00c      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 8004442:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8004446:	4293      	cmp	r3, r2
 8004448:	d008      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 800444a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <UART_AdvFeatureConfig+0x148>
 8004452:	f640 4178 	movw	r1, #3192	; 0xc78
 8004456:	481d      	ldr	r0, [pc, #116]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 8004458:	f002 fa3a 	bl	80068d0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800445c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800445e:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8004462:	d004      	beq.n	800446e <UART_AdvFeatureConfig+0x15a>
 8004464:	f640 4179 	movw	r1, #3193	; 0xc79
 8004468:	4818      	ldr	r0, [pc, #96]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 800446a:	f002 fa31 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800446e:	6821      	ldr	r1, [r4, #0]
 8004470:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004472:	684b      	ldr	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004474:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004478:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800447c:	ea43 0302 	orr.w	r3, r3, r2
 8004480:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004482:	d10f      	bne.n	80044a4 <UART_AdvFeatureConfig+0x190>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004484:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004486:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800448a:	d004      	beq.n	8004496 <UART_AdvFeatureConfig+0x182>
 800448c:	f640 417e 	movw	r1, #3198	; 0xc7e
 8004490:	480e      	ldr	r0, [pc, #56]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 8004492:	f002 fa1d 	bl	80068d0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004496:	6822      	ldr	r2, [r4, #0]
 8004498:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800449a:	6853      	ldr	r3, [r2, #4]
 800449c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044a6:	061b      	lsls	r3, r3, #24
 80044a8:	d50f      	bpl.n	80044ca <UART_AdvFeatureConfig+0x1b6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80044aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80044ac:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80044b0:	d004      	beq.n	80044bc <UART_AdvFeatureConfig+0x1a8>
 80044b2:	f640 4186 	movw	r1, #3206	; 0xc86
 80044b6:	4805      	ldr	r0, [pc, #20]	; (80044cc <UART_AdvFeatureConfig+0x1b8>)
 80044b8:	f002 fa0a 	bl	80068d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80044c0:	6853      	ldr	r3, [r2, #4]
 80044c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6053      	str	r3, [r2, #4]
 80044ca:	bd10      	pop	{r4, pc}
 80044cc:	0800832f 	.word	0x0800832f
 80044d0:	40011000 	.word	0x40011000

080044d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d8:	9d06      	ldr	r5, [sp, #24]
 80044da:	4604      	mov	r4, r0
 80044dc:	460f      	mov	r7, r1
 80044de:	4616      	mov	r6, r2
 80044e0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	6821      	ldr	r1, [r4, #0]
 80044e4:	69ca      	ldr	r2, [r1, #28]
 80044e6:	ea37 0302 	bics.w	r3, r7, r2
 80044ea:	bf0c      	ite	eq
 80044ec:	2201      	moveq	r2, #1
 80044ee:	2200      	movne	r2, #0
 80044f0:	42b2      	cmp	r2, r6
 80044f2:	d002      	beq.n	80044fa <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2000      	movs	r0, #0
}
 80044f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	1c68      	adds	r0, r5, #1
 80044fc:	d0f2      	beq.n	80044e4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fe:	f7fc f92f 	bl	8000760 <HAL_GetTick>
 8004502:	eba0 0008 	sub.w	r0, r0, r8
 8004506:	4285      	cmp	r5, r0
 8004508:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800450a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450c:	d300      	bcc.n	8004510 <UART_WaitOnFlagUntilTimeout+0x3c>
 800450e:	b98d      	cbnz	r5, 8004534 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004514:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	6883      	ldr	r3, [r0, #8]
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800451e:	2320      	movs	r3, #32
 8004520:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004524:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004528:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800452a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800452c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8004530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004534:	075a      	lsls	r2, r3, #29
 8004536:	d5d4      	bpl.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004538:	69c3      	ldr	r3, [r0, #28]
 800453a:	051b      	lsls	r3, r3, #20
 800453c:	d5d1      	bpl.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800453e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004542:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004544:	6803      	ldr	r3, [r0, #0]
 8004546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800454a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	6883      	ldr	r3, [r0, #8]
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004554:	2320      	movs	r3, #32
 8004556:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800455a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800455e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004562:	e7e1      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0x54>

08004564 <HAL_UART_Transmit>:
{
 8004564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004568:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800456a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 800456e:	4604      	mov	r4, r0
 8004570:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004572:	2b20      	cmp	r3, #32
{
 8004574:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004576:	d14e      	bne.n	8004616 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8004578:	2900      	cmp	r1, #0
 800457a:	d04a      	beq.n	8004612 <HAL_UART_Transmit+0xae>
 800457c:	2a00      	cmp	r2, #0
 800457e:	d048      	beq.n	8004612 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8004580:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d046      	beq.n	8004616 <HAL_UART_Transmit+0xb2>
 8004588:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800458c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004590:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004596:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 800459a:	f7fc f8e1 	bl	8000760 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80045a0:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80045a2:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80045aa:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ae:	d103      	bne.n	80045b8 <HAL_UART_Transmit+0x54>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	b90b      	cbnz	r3, 80045b8 <HAL_UART_Transmit+0x54>
 80045b4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80045b6:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80045b8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045bc:	463b      	mov	r3, r7
 80045be:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80045c2:	b292      	uxth	r2, r2
 80045c4:	b952      	cbnz	r2, 80045dc <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	2140      	movs	r1, #64	; 0x40
 80045c8:	4620      	mov	r0, r4
 80045ca:	f7ff ff83 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 80045ce:	b958      	cbnz	r0, 80045e8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80045d0:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80045d2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 80045d6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 80045da:	e006      	b.n	80045ea <HAL_UART_Transmit+0x86>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7ff ff77 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 80045e6:	b118      	cbz	r0, 80045f0 <HAL_UART_Transmit+0x8c>
        return HAL_TIMEOUT;
 80045e8:	2003      	movs	r0, #3
}
 80045ea:	b003      	add	sp, #12
 80045ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045f0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80045f2:	b95e      	cbnz	r6, 800460c <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045f4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045fc:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80045fe:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8004602:	3b01      	subs	r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800460a:	e7d5      	b.n	80045b8 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800460c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004610:	e7f4      	b.n	80045fc <HAL_UART_Transmit+0x98>
      return  HAL_ERROR;
 8004612:	2001      	movs	r0, #1
 8004614:	e7e9      	b.n	80045ea <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8004616:	2002      	movs	r0, #2
 8004618:	e7e7      	b.n	80045ea <HAL_UART_Transmit+0x86>

0800461a <UART_CheckIdleState>:
{
 800461a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	2600      	movs	r6, #0
{
 800461e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004620:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004624:	f7fc f89c 	bl	8000760 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004628:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800462a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	071a      	lsls	r2, r3, #28
 8004630:	d417      	bmi.n	8004662 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	075b      	lsls	r3, r3, #29
 8004638:	d50a      	bpl.n	8004650 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800463a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800463e:	2200      	movs	r2, #0
 8004640:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004644:	4620      	mov	r0, r4
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	462b      	mov	r3, r5
 800464a:	f7ff ff43 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 800464e:	b9a0      	cbnz	r0, 800467a <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004650:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004652:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004654:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004658:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800465c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8004660:	e00c      	b.n	800467c <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004666:	4632      	mov	r2, r6
 8004668:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	4603      	mov	r3, r0
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff ff2f 	bl	80044d4 <UART_WaitOnFlagUntilTimeout>
 8004676:	2800      	cmp	r0, #0
 8004678:	d0db      	beq.n	8004632 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800467a:	2003      	movs	r0, #3
}
 800467c:	b002      	add	sp, #8
 800467e:	bd70      	pop	{r4, r5, r6, pc}

08004680 <HAL_UART_Init>:
{
 8004680:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004682:	4604      	mov	r4, r0
 8004684:	2800      	cmp	r0, #0
 8004686:	d079      	beq.n	800477c <HAL_UART_Init+0xfc>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004688:	6981      	ldr	r1, [r0, #24]
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	4a3c      	ldr	r2, [pc, #240]	; (8004780 <HAL_UART_Init+0x100>)
 800468e:	2900      	cmp	r1, #0
 8004690:	d051      	beq.n	8004736 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004692:	4293      	cmp	r3, r2
 8004694:	d023      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004696:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_UART_Init+0x5e>
 800469e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01b      	beq.n	80046de <HAL_UART_Init+0x5e>
 80046a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d017      	beq.n	80046de <HAL_UART_Init+0x5e>
 80046ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_UART_Init+0x5e>
 80046b6:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <HAL_UART_Init+0x5e>
 80046be:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <HAL_UART_Init+0x5e>
 80046c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <HAL_UART_Init+0x5e>
 80046ce:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <HAL_UART_Init+0x104>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_UART_Init+0x5e>
 80046d4:	f44f 7199 	mov.w	r1, #306	; 0x132
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80046d8:	482b      	ldr	r0, [pc, #172]	; (8004788 <HAL_UART_Init+0x108>)
 80046da:	f002 f8f9 	bl	80068d0 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 80046de:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80046e2:	b923      	cbnz	r3, 80046ee <HAL_UART_Init+0x6e>
    huart->Lock = HAL_UNLOCKED;
 80046e4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80046e8:	4620      	mov	r0, r4
 80046ea:	f002 f95d 	bl	80069a8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80046ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80046f0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046f2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004700:	f7fe fd62 	bl	80031c8 <UART_SetConfig>
 8004704:	2801      	cmp	r0, #1
 8004706:	d039      	beq.n	800477c <HAL_UART_Init+0xfc>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800470a:	b113      	cbz	r3, 8004712 <HAL_UART_Init+0x92>
    UART_AdvFeatureConfig(huart);
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff fe01 	bl	8004314 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004712:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004714:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800471c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004724:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
}
 800472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004730:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004732:	f7ff bf72 	b.w	800461a <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8004736:	4293      	cmp	r3, r2
 8004738:	d0d1      	beq.n	80046de <HAL_UART_Init+0x5e>
 800473a:	4a14      	ldr	r2, [pc, #80]	; (800478c <HAL_UART_Init+0x10c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d0ce      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004740:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004744:	4293      	cmp	r3, r2
 8004746:	d0ca      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800474c:	4293      	cmp	r3, r2
 800474e:	d0c6      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004750:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004754:	4293      	cmp	r3, r2
 8004756:	d0c2      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004758:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800475c:	4293      	cmp	r3, r2
 800475e:	d0be      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004760:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8004764:	4293      	cmp	r3, r2
 8004766:	d0ba      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800476c:	4293      	cmp	r3, r2
 800476e:	d0b6      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <HAL_UART_Init+0x104>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d0b3      	beq.n	80046de <HAL_UART_Init+0x5e>
 8004776:	f240 1137 	movw	r1, #311	; 0x137
 800477a:	e7ad      	b.n	80046d8 <HAL_UART_Init+0x58>
}
 800477c:	2001      	movs	r0, #1
 800477e:	bd10      	pop	{r4, pc}
 8004780:	40011000 	.word	0x40011000
 8004784:	58000c00 	.word	0x58000c00
 8004788:	0800832f 	.word	0x0800832f
 800478c:	40004400 	.word	0x40004400

08004790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004792:	2203      	movs	r2, #3
 8004794:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004796:	2104      	movs	r1, #4
 8004798:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800479a:	f88d 2003 	strb.w	r2, [sp, #3]
 800479e:	2207      	movs	r2, #7
 80047a0:	f88d 3000 	strb.w	r3, [sp]
 80047a4:	f88d 2004 	strb.w	r2, [sp, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f88d 3001 	strb.w	r3, [sp, #1]
 80047ae:	f88d 2006 	strb.w	r2, [sp, #6]
 80047b2:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047b6:	2208      	movs	r2, #8
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80047b8:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047bc:	f88d 2008 	strb.w	r2, [sp, #8]
 80047c0:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047c4:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80047c6:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80047ca:	f88d 1009 	strb.w	r1, [sp, #9]
 80047ce:	f88d 400a 	strb.w	r4, [sp, #10]
 80047d2:	f88d 100b 	strb.w	r1, [sp, #11]
 80047d6:	f88d 300d 	strb.w	r3, [sp, #13]
 80047da:	f88d 300e 	strb.w	r3, [sp, #14]
 80047de:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047e2:	b92a      	cbnz	r2, 80047f0 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 80047e4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80047e8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80047ec:	b004      	add	sp, #16
 80047ee:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047f0:	6802      	ldr	r2, [r0, #0]
 80047f2:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047f4:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80047f6:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80047f8:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80047fc:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 8004800:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8004804:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8004808:	00d2      	lsls	r2, r2, #3
 800480a:	fb92 f2f1 	sdiv	r2, r2, r1
 800480e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004812:	aa04      	add	r2, sp, #16
 8004814:	4413      	add	r3, r2
 8004816:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800481a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800481e:	00d2      	lsls	r2, r2, #3
 8004820:	fb92 f3f3 	sdiv	r3, r2, r3
 8004824:	e7e0      	b.n	80047e8 <UARTEx_SetNbDataToProcess+0x58>
	...

08004828 <HAL_UARTEx_DisableFifoMode>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8004828:	6803      	ldr	r3, [r0, #0]
 800482a:	4a20      	ldr	r2, [pc, #128]	; (80048ac <HAL_UARTEx_DisableFifoMode+0x84>)
 800482c:	4293      	cmp	r3, r2
{
 800482e:	b510      	push	{r4, lr}
 8004830:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8004832:	d020      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004834:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004838:	4293      	cmp	r3, r2
 800483a:	d01c      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 800483c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004848:	4293      	cmp	r3, r2
 800484a:	d014      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 800484c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004850:	4293      	cmp	r3, r2
 8004852:	d010      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004854:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004858:	4293      	cmp	r3, r2
 800485a:	d00c      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 800485c:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8004860:	4293      	cmp	r3, r2
 8004862:	d008      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 8004864:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_UARTEx_DisableFifoMode+0x4e>
 800486c:	f240 2111 	movw	r1, #529	; 0x211
 8004870:	480f      	ldr	r0, [pc, #60]	; (80048b0 <HAL_UARTEx_DisableFifoMode+0x88>)
 8004872:	f002 f82d 	bl	80068d0 <assert_failed>
  __HAL_LOCK(huart);
 8004876:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800487a:	2b01      	cmp	r3, #1
 800487c:	d013      	beq.n	80048a6 <HAL_UARTEx_DisableFifoMode+0x7e>
  huart->gState = HAL_UART_STATE_BUSY;
 800487e:	2324      	movs	r3, #36	; 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004880:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8004882:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800488a:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800488c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8004890:	f021 0101 	bic.w	r1, r1, #1
 8004894:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004896:	6660      	str	r0, [r4, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004898:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800489a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800489c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 80048a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 80048a4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80048a6:	2002      	movs	r0, #2
}
 80048a8:	bd10      	pop	{r4, pc}
 80048aa:	bf00      	nop
 80048ac:	40011000 	.word	0x40011000
 80048b0:	08008368 	.word	0x08008368

080048b4 <HAL_UARTEx_SetTxFifoThreshold>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80048b4:	6803      	ldr	r3, [r0, #0]
 80048b6:	4a2b      	ldr	r2, [pc, #172]	; (8004964 <HAL_UARTEx_SetTxFifoThreshold+0xb0>)
 80048b8:	4293      	cmp	r3, r2
{
 80048ba:	b570      	push	{r4, r5, r6, lr}
 80048bc:	4604      	mov	r4, r0
 80048be:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80048c0:	d020      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048c2:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01c      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d014      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048de:	4293      	cmp	r3, r2
 80048e0:	d010      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048e2:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00c      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048ea:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d008      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 80048fa:	f240 213f 	movw	r1, #575	; 0x23f
 80048fe:	481a      	ldr	r0, [pc, #104]	; (8004968 <HAL_UARTEx_SetTxFifoThreshold+0xb4>)
 8004900:	f001 ffe6 	bl	80068d0 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8004904:	f035 42c0 	bics.w	r2, r5, #1610612736	; 0x60000000
 8004908:	f025 5300 	bic.w	r3, r5, #536870912	; 0x20000000
 800490c:	d007      	beq.n	800491e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 800490e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004912:	d004      	beq.n	800491e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 8004914:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004918:	4813      	ldr	r0, [pc, #76]	; (8004968 <HAL_UARTEx_SetTxFifoThreshold+0xb4>)
 800491a:	f001 ffd9 	bl	80068d0 <assert_failed>
  __HAL_LOCK(huart);
 800491e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d01c      	beq.n	8004960 <HAL_UARTEx_SetTxFifoThreshold+0xac>
 8004926:	2301      	movs	r3, #1
  UARTEx_SetNbDataToProcess(huart);
 8004928:	4620      	mov	r0, r4
  __HAL_LOCK(huart);
 800492a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800492e:	2324      	movs	r3, #36	; 0x24
 8004930:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004940:	6899      	ldr	r1, [r3, #8]
 8004942:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8004946:	4329      	orrs	r1, r5
 8004948:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800494a:	f7ff ff21 	bl	8004790 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800494e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004950:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004952:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004954:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004956:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 800495a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 800495e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004960:	2002      	movs	r0, #2
}
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	40011000 	.word	0x40011000
 8004968:	08008368 	.word	0x08008368

0800496c <HAL_UARTEx_SetRxFifoThreshold>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800496c:	6803      	ldr	r3, [r0, #0]
 800496e:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_UARTEx_SetRxFifoThreshold+0xb0>)
 8004970:	4293      	cmp	r3, r2
{
 8004972:	b570      	push	{r4, r5, r6, lr}
 8004974:	4604      	mov	r4, r0
 8004976:	460d      	mov	r5, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8004978:	d020      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800497a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800497e:	4293      	cmp	r3, r2
 8004980:	d01c      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8004982:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800498a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800498e:	4293      	cmp	r3, r2
 8004990:	d014      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8004992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004996:	4293      	cmp	r3, r2
 8004998:	d010      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800499a:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00c      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80049a2:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d008      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80049aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80049b2:	f44f 711c 	mov.w	r1, #624	; 0x270
 80049b6:	481a      	ldr	r0, [pc, #104]	; (8004a20 <HAL_UARTEx_SetRxFifoThreshold+0xb4>)
 80049b8:	f001 ff8a 	bl	80068d0 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80049bc:	f035 62c0 	bics.w	r2, r5, #100663296	; 0x6000000
 80049c0:	f025 7300 	bic.w	r3, r5, #33554432	; 0x2000000
 80049c4:	d007      	beq.n	80049d6 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ca:	d004      	beq.n	80049d6 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 80049cc:	f240 2171 	movw	r1, #625	; 0x271
 80049d0:	4813      	ldr	r0, [pc, #76]	; (8004a20 <HAL_UARTEx_SetRxFifoThreshold+0xb4>)
 80049d2:	f001 ff7d 	bl	80068d0 <assert_failed>
  __HAL_LOCK(huart);
 80049d6:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d01c      	beq.n	8004a18 <HAL_UARTEx_SetRxFifoThreshold+0xac>
 80049de:	2301      	movs	r3, #1
  UARTEx_SetNbDataToProcess(huart);
 80049e0:	4620      	mov	r0, r4
  __HAL_LOCK(huart);
 80049e2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80049e6:	2324      	movs	r3, #36	; 0x24
 80049e8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	681e      	ldr	r6, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	f021 6160 	bic.w	r1, r1, #234881024	; 0xe000000
 80049fe:	4329      	orrs	r1, r5
 8004a00:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004a02:	f7ff fec5 	bl	8004790 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a06:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004a08:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a0a:	601e      	str	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004a0c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004a0e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 8004a12:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  return HAL_OK;
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004a18:	2002      	movs	r0, #2
}
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	08008368 	.word	0x08008368

08004a24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a26:	3b01      	subs	r3, #1
 8004a28:	d101      	bne.n	8004a2e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a2e:	6902      	ldr	r2, [r0, #16]
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	daf8      	bge.n	8004a26 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a34:	6903      	ldr	r3, [r0, #16]
 8004a36:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <USB_CoreReset+0x2c>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	d0f3      	beq.n	8004a2a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a42:	6903      	ldr	r3, [r0, #16]
 8004a44:	f013 0301 	ands.w	r3, r3, #1
 8004a48:	d1f9      	bne.n	8004a3e <USB_CoreReset+0x1a>

  return HAL_OK;
 8004a4a:	4618      	mov	r0, r3
}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	00030d41 	.word	0x00030d41

08004a54 <USB_CoreInit>:
{
 8004a54:	b084      	sub	sp, #16
 8004a56:	b538      	push	{r3, r4, r5, lr}
 8004a58:	ad05      	add	r5, sp, #20
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d126      	bne.n	8004ab4 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a66:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a6e:	68c3      	ldr	r3, [r0, #12]
 8004a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a7a:	68c3      	ldr	r3, [r0, #12]
 8004a7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a80:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004a82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d103      	bne.n	8004a90 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a88:	68c3      	ldr	r3, [r0, #12]
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff ffc7 	bl	8004a24 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004a96:	9b08      	ldr	r3, [sp, #32]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a9c:	68a3      	ldr	r3, [r4, #8]
 8004a9e:	f043 0308 	orr.w	r3, r3, #8
 8004aa2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aa4:	68a3      	ldr	r3, [r4, #8]
 8004aa6:	f043 0320 	orr.w	r3, r3, #32
 8004aaa:	60a3      	str	r3, [r4, #8]
}
 8004aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab0:	b004      	add	sp, #16
 8004ab2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ab4:	68c3      	ldr	r3, [r0, #12]
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aba:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004abc:	f7ff ffb2 	bl	8004a24 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ac2:	b923      	cbnz	r3, 8004ace <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ac4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aca:	63a3      	str	r3, [r4, #56]	; 0x38
 8004acc:	e7e3      	b.n	8004a96 <USB_CoreInit+0x42>
 8004ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad4:	e7f9      	b.n	8004aca <USB_CoreInit+0x76>

08004ad6 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ad6:	6883      	ldr	r3, [r0, #8]
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	6083      	str	r3, [r0, #8]
}
 8004ade:	2000      	movs	r0, #0
 8004ae0:	4770      	bx	lr

08004ae2 <USB_SetCurrentMode>:
{
 8004ae2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ae4:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004ae6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ae8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004aec:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004aee:	d108      	bne.n	8004b02 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004af0:	68c3      	ldr	r3, [r0, #12]
 8004af2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004af6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004af8:	2032      	movs	r0, #50	; 0x32
 8004afa:	f7fb fe37 	bl	800076c <HAL_Delay>
  return HAL_OK;
 8004afe:	2000      	movs	r0, #0
 8004b00:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004b02:	b919      	cbnz	r1, 8004b0c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b04:	68c3      	ldr	r3, [r0, #12]
 8004b06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b0a:	e7f4      	b.n	8004af6 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8004b0c:	2001      	movs	r0, #1
}
 8004b0e:	bd08      	pop	{r3, pc}

08004b10 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b10:	0189      	lsls	r1, r1, #6
 8004b12:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <USB_FlushTxFifo+0x20>)
 8004b14:	f041 0120 	orr.w	r1, r1, #32
 8004b18:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	d005      	beq.n	8004b2a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b1e:	6903      	ldr	r3, [r0, #16]
 8004b20:	f013 0320 	ands.w	r3, r3, #32
 8004b24:	d1f9      	bne.n	8004b1a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004b26:	4618      	mov	r0, r3
 8004b28:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004b2a:	2003      	movs	r0, #3
}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	00030d41 	.word	0x00030d41

08004b34 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b34:	2310      	movs	r3, #16
 8004b36:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <USB_FlushRxFifo+0x1c>)
 8004b38:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8004b3a:	3a01      	subs	r2, #1
 8004b3c:	d005      	beq.n	8004b4a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b3e:	6903      	ldr	r3, [r0, #16]
 8004b40:	f013 0310 	ands.w	r3, r3, #16
 8004b44:	d1f9      	bne.n	8004b3a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004b46:	4618      	mov	r0, r3
 8004b48:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004b4a:	2003      	movs	r0, #3
}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	00030d41 	.word	0x00030d41

08004b54 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004b54:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004b58:	4319      	orrs	r1, r3
 8004b5a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004b5e:	2000      	movs	r0, #0
 8004b60:	4770      	bx	lr
	...

08004b64 <USB_DevInit>:
{
 8004b64:	b084      	sub	sp, #16
 8004b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	a809      	add	r0, sp, #36	; 0x24
 8004b6e:	4688      	mov	r8, r1
 8004b70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004b74:	2300      	movs	r3, #0
 8004b76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004b78:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8004b80:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8004b82:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8004b86:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8004b88:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004b8a:	d1f7      	bne.n	8004b7c <USB_DevInit+0x18>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	d172      	bne.n	8004c78 <USB_DevInit+0x114>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b96:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b9e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004ba8:	2300      	movs	r3, #0
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004baa:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8004bae:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bb2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004bb6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d161      	bne.n	8004c84 <USB_DevInit+0x120>
    if (cfg.speed == USBD_HS_SPEED)
 8004bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bc2:	2900      	cmp	r1, #0
 8004bc4:	d15c      	bne.n	8004c80 <USB_DevInit+0x11c>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7ff ffc4 	bl	8004b54 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bcc:	2110      	movs	r1, #16
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff ff9e 	bl	8004b10 <USB_FlushTxFifo>
 8004bd4:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f7ff ffac 	bl	8004b34 <USB_FlushRxFifo>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d153      	bne.n	8004c88 <USB_DevInit+0x124>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004be0:	1c08      	adds	r0, r1, #0
 8004be2:	bf18      	it	ne
 8004be4:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bec:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bf0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bf4:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bf6:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8004bfa:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bfc:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bfe:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c00:	4543      	cmp	r3, r8
 8004c02:	d143      	bne.n	8004c8c <USB_DevInit+0x128>
 8004c04:	2100      	movs	r1, #0
 8004c06:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c0a:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c0e:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c12:	468e      	mov	lr, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c14:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	d14a      	bne.n	8004cb2 <USB_DevInit+0x14e>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c1c:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8004c1e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8004c26:	d107      	bne.n	8004c38 <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004c28:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <USB_DevInit+0x178>)
 8004c2a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004c2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c32:	f043 0303 	orr.w	r3, r3, #3
 8004c36:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c3c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004c40:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004c42:	b91f      	cbnz	r7, 8004c4c <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c44:	69a3      	ldr	r3, [r4, #24]
 8004c46:	f043 0310 	orr.w	r3, r3, #16
 8004c4a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c4c:	69a2      	ldr	r2, [r4, #24]
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <USB_DevInit+0x17c>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c56:	b11b      	cbz	r3, 8004c60 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c58:	69a3      	ldr	r3, [r4, #24]
 8004c5a:	f043 0308 	orr.w	r3, r3, #8
 8004c5e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004c60:	2e01      	cmp	r6, #1
 8004c62:	d105      	bne.n	8004c70 <USB_DevInit+0x10c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c64:	69a3      	ldr	r3, [r4, #24]
 8004c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	61a3      	str	r3, [r4, #24]
}
 8004c70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	b004      	add	sp, #16
 8004c76:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c7e:	e793      	b.n	8004ba8 <USB_DevInit+0x44>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c80:	4619      	mov	r1, r3
 8004c82:	e7a0      	b.n	8004bc6 <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c84:	2103      	movs	r1, #3
 8004c86:	e79e      	b.n	8004bc6 <USB_DevInit+0x62>
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e7ac      	b.n	8004be6 <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c8c:	f8d2 a000 	ldr.w	sl, [r2]
 8004c90:	f1ba 0f00 	cmp.w	sl, #0
 8004c94:	da0b      	bge.n	8004cae <USB_DevInit+0x14a>
      if (i == 0U)
 8004c96:	b93b      	cbnz	r3, 8004ca8 <USB_DevInit+0x144>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c98:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c9c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c9e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ca0:	f8c2 9008 	str.w	r9, [r2, #8]
 8004ca4:	3220      	adds	r2, #32
 8004ca6:	e7ab      	b.n	8004c00 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ca8:	f8c2 e000 	str.w	lr, [r2]
 8004cac:	e7f6      	b.n	8004c9c <USB_DevInit+0x138>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cae:	6011      	str	r1, [r2, #0]
 8004cb0:	e7f4      	b.n	8004c9c <USB_DevInit+0x138>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb2:	f8d2 a000 	ldr.w	sl, [r2]
 8004cb6:	f1ba 0f00 	cmp.w	sl, #0
 8004cba:	da0c      	bge.n	8004cd6 <USB_DevInit+0x172>
      if (i == 0U)
 8004cbc:	b941      	cbnz	r1, 8004cd0 <USB_DevInit+0x16c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cbe:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cc2:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cc8:	f8c2 9008 	str.w	r9, [r2, #8]
 8004ccc:	3220      	adds	r2, #32
 8004cce:	e7a3      	b.n	8004c18 <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cd0:	f8c2 c000 	str.w	ip, [r2]
 8004cd4:	e7f5      	b.n	8004cc2 <USB_DevInit+0x15e>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cd6:	f8c2 e000 	str.w	lr, [r2]
 8004cda:	e7f2      	b.n	8004cc2 <USB_DevInit+0x15e>
 8004cdc:	00800100 	.word	0x00800100
 8004ce0:	803c3800 	.word	0x803c3800

08004ce4 <USB_DevDisconnect>:
{
 8004ce4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ce6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004cea:	f043 0302 	orr.w	r3, r3, #2
 8004cee:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	f7fb fd3a 	bl	800076c <HAL_Delay>
}
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	bd08      	pop	{r3, pc}

08004cfc <LoadMBR>:
  Remarks:
    None
  ********************************************************************/

BYTE LoadMBR(DISK* dsk)
{
 8004cfc:	b510      	push	{r4, lr}
    BYTE error = CE_GOOD;
    BYTE type;
    BootSec BSec;

    // Get the partition table from the MBR
    if(MDD_SectorRead( FO_MBR, dsk->buffer) != TRUE)
 8004cfe:	6801      	ldr	r1, [r0, #0]
{
 8004d00:	4604      	mov	r4, r0
    if(MDD_SectorRead( FO_MBR, dsk->buffer) != TRUE)
 8004d02:	2000      	movs	r0, #0
 8004d04:	f002 f94e 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 8004d08:	2801      	cmp	r0, #1
 8004d0a:	d003      	beq.n	8004d14 <LoadMBR+0x18>
    {
        error = CE_BAD_SECTOR_READ;
        FSerrno = CE_BAD_SECTOR_READ;
 8004d0c:	2008      	movs	r0, #8
            error = CE_CARDFAT32;
#endif
                    break;

                default:
                    FSerrno = CE_UNSUPPORTED_FS;
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <LoadMBR+0xd8>)
 8004d10:	7018      	strb	r0, [r3, #0]
            } // switch
        }
    }

    return(error);
}// -- LoadMBR
 8004d12:	bd10      	pop	{r4, pc}
        BSec = (BootSec) dsk->buffer;
 8004d14:	6823      	ldr	r3, [r4, #0]
        if((BSec->Signature0 == FAT_GOOD_SIGN_0) && (BSec->Signature1 == FAT_GOOD_SIGN_1))
 8004d16:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 8004d1a:	2a55      	cmp	r2, #85	; 0x55
 8004d1c:	d13b      	bne.n	8004d96 <LoadMBR+0x9a>
 8004d1e:	f893 21ff 	ldrb.w	r2, [r3, #511]	; 0x1ff
 8004d22:	2aaa      	cmp	r2, #170	; 0xaa
 8004d24:	d137      	bne.n	8004d96 <LoadMBR+0x9a>
            if(ReadByte( dsk->buffer, BSI_FSTYPE ) == 'F' && \
 8004d26:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8004d2a:	2a46      	cmp	r2, #70	; 0x46
 8004d2c:	d118      	bne.n	8004d60 <LoadMBR+0x64>
 8004d2e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004d32:	2a41      	cmp	r2, #65	; 0x41
 8004d34:	d114      	bne.n	8004d60 <LoadMBR+0x64>
            ReadByte( dsk->buffer, BSI_FSTYPE + 1 ) == 'A' && \
 8004d36:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004d3a:	2a54      	cmp	r2, #84	; 0x54
 8004d3c:	d110      	bne.n	8004d60 <LoadMBR+0x64>
            ReadByte( dsk->buffer, BSI_FSTYPE + 2 ) == 'T' && \
 8004d3e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004d42:	2a31      	cmp	r2, #49	; 0x31
 8004d44:	d10c      	bne.n	8004d60 <LoadMBR+0x64>
            ReadByte( dsk->buffer, BSI_FSTYPE + 3 ) == '1' && \
 8004d46:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004d4a:	2a29      	cmp	r2, #41	; 0x29
 8004d4c:	d108      	bne.n	8004d60 <LoadMBR+0x64>
                dsk->firsts = 0;
 8004d4e:	2000      	movs	r0, #0
                dsk->type = FAT16;
 8004d50:	2302      	movs	r3, #2
                dsk->firsts = 0;
 8004d52:	7120      	strb	r0, [r4, #4]
 8004d54:	7160      	strb	r0, [r4, #5]
 8004d56:	71a0      	strb	r0, [r4, #6]
 8004d58:	71e0      	strb	r0, [r4, #7]
            		 dsk->type = FAT32;
 8004d5a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004d5e:	bd10      	pop	{r4, pc}
            	 if(ReadByte( dsk->buffer, BSI_FAT32_FSTYPE ) == 'F' && \
 8004d60:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004d64:	2a46      	cmp	r2, #70	; 0x46
 8004d66:	d118      	bne.n	8004d9a <LoadMBR+0x9e>
 8004d68:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8004d6c:	2a41      	cmp	r2, #65	; 0x41
 8004d6e:	d114      	bne.n	8004d9a <LoadMBR+0x9e>
                    ReadByte( dsk->buffer, BSI_FAT32_FSTYPE + 1 ) == 'A' && \
 8004d70:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004d74:	2a54      	cmp	r2, #84	; 0x54
 8004d76:	d110      	bne.n	8004d9a <LoadMBR+0x9e>
                    ReadByte( dsk->buffer, BSI_FAT32_FSTYPE + 2 ) == 'T' && \
 8004d78:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8004d7c:	2a33      	cmp	r2, #51	; 0x33
 8004d7e:	d10c      	bne.n	8004d9a <LoadMBR+0x9e>
                    ReadByte( dsk->buffer, BSI_FAT32_FSTYPE + 3 ) == '3' && \
 8004d80:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8004d84:	2a29      	cmp	r2, #41	; 0x29
 8004d86:	d108      	bne.n	8004d9a <LoadMBR+0x9e>
            		 dsk->firsts = 0;
 8004d88:	2000      	movs	r0, #0
 8004d8a:	7120      	strb	r0, [r4, #4]
 8004d8c:	7160      	strb	r0, [r4, #5]
 8004d8e:	71a0      	strb	r0, [r4, #6]
 8004d90:	71e0      	strb	r0, [r4, #7]
            		 dsk->type = FAT32;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e7e1      	b.n	8004d5a <LoadMBR+0x5e>
            FSerrno = CE_BAD_PARTITION;
 8004d96:	2004      	movs	r0, #4
 8004d98:	e7b9      	b.n	8004d0e <LoadMBR+0x12>
            dsk->firsts = Partition->Partition0.PTE_FrstSect;
 8004d9a:	f8d3 21c6 	ldr.w	r2, [r3, #454]	; 0x1c6
 8004d9e:	6062      	str	r2, [r4, #4]
              type = Partition->Partition0.PTE_FSDesc;
 8004da0:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 8004da4:	2b0e      	cmp	r3, #14
 8004da6:	d813      	bhi.n	8004dd0 <LoadMBR+0xd4>
 8004da8:	2201      	movs	r2, #1
 8004daa:	f244 0050 	movw	r0, #16464	; 0x4050
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	4018      	ands	r0, r3
 8004db4:	d108      	bne.n	8004dc8 <LoadMBR+0xcc>
 8004db6:	f413 51c0 	ands.w	r1, r3, #6144	; 0x1800
 8004dba:	d1ea      	bne.n	8004d92 <LoadMBR+0x96>
 8004dbc:	079b      	lsls	r3, r3, #30
 8004dbe:	d507      	bpl.n	8004dd0 <LoadMBR+0xd4>
                    dsk->type = FAT12;
 8004dc0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    BYTE error = CE_GOOD;
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	bd10      	pop	{r4, pc}
                    dsk->type = FAT16;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004dce:	e7f9      	b.n	8004dc4 <LoadMBR+0xc8>
                    FSerrno = CE_UNSUPPORTED_FS;
 8004dd0:	2005      	movs	r0, #5
 8004dd2:	e79c      	b.n	8004d0e <LoadMBR+0x12>
 8004dd4:	200007ea 	.word	0x200007ea

08004dd8 <FileObjectCopy>:
  Remarks:
    None
  **************************************************************/

void FileObjectCopy(FILEOBJ foDest, FILEOBJ foSource)
{
 8004dd8:	1e4b      	subs	r3, r1, #1
 8004dda:	3801      	subs	r0, #1
 8004ddc:	313b      	adds	r1, #59	; 0x3b

    size = sizeof(FSFILE);

    for(Index=0; Index < size; Index++)
    {
        dest[Index] = source[Index];
 8004dde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    for(Index=0; Index < size; Index++)
 8004de2:	428b      	cmp	r3, r1
        dest[Index] = source[Index];
 8004de4:	f800 2f01 	strb.w	r2, [r0, #1]!
    for(Index=0; Index < size; Index++)
 8004de8:	d1f9      	bne.n	8004dde <FileObjectCopy+0x6>
    }
}
 8004dea:	4770      	bx	lr

08004dec <ReadWord>:
{
    BYTE loByte, hiByte;
    WORD res;

    loByte = pBuffer[index];
    hiByte = pBuffer[index+1];
 8004dec:	1843      	adds	r3, r0, r1
    res = hiByte;
    res *= 0x100;
    res |= loByte;
 8004dee:	5c40      	ldrb	r0, [r0, r1]
    res = hiByte;
 8004df0:	785a      	ldrb	r2, [r3, #1]
    return(res);
}
 8004df2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8004df6:	4770      	bx	lr

08004df8 <ReadDWord>:
  Remarks:
    None.
  ****************************************************/

DWORD ReadDWord(BYTE* pBuffer, WORD index)
{
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4606      	mov	r6, r0
    WORD loWord, hiWord;
    DWORD result;

    loWord = ReadWord(pBuffer, index);
 8004dfc:	f7ff fff6 	bl	8004dec <ReadWord>
    hiWord = ReadWord(pBuffer, index+2);
 8004e00:	3102      	adds	r1, #2
    loWord = ReadWord(pBuffer, index);
 8004e02:	4605      	mov	r5, r0
    hiWord = ReadWord(pBuffer, index+2);
 8004e04:	4630      	mov	r0, r6
 8004e06:	b289      	uxth	r1, r1
 8004e08:	f7ff fff0 	bl	8004dec <ReadWord>

    result = hiWord;
    result *= 0x10000;
    result |= loWord;
    return result;
}
 8004e0c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8004e10:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e14 <LoadBootSector>:
{
 8004e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(MDD_SectorRead(dsk->firsts, dsk->buffer) != TRUE)
 8004e18:	6801      	ldr	r1, [r0, #0]
{
 8004e1a:	4604      	mov	r4, r0
    if(MDD_SectorRead(dsk->firsts, dsk->buffer) != TRUE)
 8004e1c:	6840      	ldr	r0, [r0, #4]
 8004e1e:	f002 f8c1 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 8004e22:	2801      	cmp	r0, #1
 8004e24:	d005      	beq.n	8004e32 <LoadBootSector+0x1e>
        FSerrno = CE_BAD_SECTOR_READ;
 8004e26:	2008      	movs	r0, #8
				FSerrno = CE_UNSUPPORTED_SECTOR_SIZE;
 8004e28:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <LoadBootSector+0x120>)
 8004e2a:	7018      	strb	r0, [r3, #0]
}
 8004e2c:	b003      	add	sp, #12
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        BSec = (BootSec)dsk->buffer;
 8004e32:	6825      	ldr	r5, [r4, #0]
        if((BSec->Signature0 != FAT_GOOD_SIGN_0) || (BSec->Signature1 != FAT_GOOD_SIGN_1))
 8004e34:	f895 31fe 	ldrb.w	r3, [r5, #510]	; 0x1fe
 8004e38:	2b55      	cmp	r3, #85	; 0x55
 8004e3a:	d103      	bne.n	8004e44 <LoadBootSector+0x30>
 8004e3c:	f895 31ff 	ldrb.w	r3, [r5, #511]	; 0x1ff
 8004e40:	2baa      	cmp	r3, #170	; 0xaa
 8004e42:	d001      	beq.n	8004e48 <LoadBootSector+0x34>
            FSerrno = CE_NOT_FORMATTED;
 8004e44:	2003      	movs	r0, #3
 8004e46:	e7ef      	b.n	8004e28 <LoadBootSector+0x14>
			ReservedSectorCount = ReadWord( dsk->buffer, BSI_RESRVSEC );
 8004e48:	210e      	movs	r1, #14
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f7ff ffce 	bl	8004dec <ReadWord>
			dsk->fat = dsk->firsts + ReservedSectorCount;
 8004e50:	6867      	ldr	r7, [r4, #4]
    return(pBuffer[index]);
 8004e52:	f895 b00d 	ldrb.w	fp, [r5, #13]
			ReservedSectorCount = ReadWord( dsk->buffer, BSI_RESRVSEC );
 8004e56:	4682      	mov	sl, r0
			dsk->fat = dsk->firsts + ReservedSectorCount;
 8004e58:	4407      	add	r7, r0
			dsk->fatsize = ReadWord( dsk->buffer, BSI_SPF );
 8004e5a:	2116      	movs	r1, #22
			dsk->SecPerClus = ReadByte( dsk->buffer, BSI_SPC );
 8004e5c:	f884 b023 	strb.w	fp, [r4, #35]	; 0x23
			dsk->fatsize = ReadWord( dsk->buffer, BSI_SPF );
 8004e60:	4628      	mov	r0, r5
			dsk->fat = dsk->firsts + ReservedSectorCount;
 8004e62:	60a7      	str	r7, [r4, #8]
    return(pBuffer[index]);
 8004e64:	f895 9010 	ldrb.w	r9, [r5, #16]
			dsk->fatcopy    = ReadByte( dsk->buffer, BSI_FATCOUNT );
 8004e68:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
			dsk->fatsize = ReadWord( dsk->buffer, BSI_SPF );
 8004e6c:	f7ff ffbe 	bl	8004dec <ReadWord>
 8004e70:	f8c4 001e 	str.w	r0, [r4, #30]
			if(dsk->fatsize == 0)
 8004e74:	b928      	cbnz	r0, 8004e82 <LoadBootSector+0x6e>
				dsk->fatsize  = ReadDWord( dsk->buffer, BSI_FATSZ32 );
 8004e76:	2124      	movs	r1, #36	; 0x24
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f7ff ffbd 	bl	8004df8 <ReadDWord>
 8004e7e:	f8c4 001e 	str.w	r0, [r4, #30]
			dsk->root = dsk->fat + (DWORD)(dsk->fatcopy * (DWORD)dsk->fatsize);
 8004e82:	f8d4 601e 	ldr.w	r6, [r4, #30]
			dsk->maxroot = ReadWord( dsk->buffer, BSI_ROOTDIRENTS );
 8004e86:	2111      	movs	r1, #17
 8004e88:	4628      	mov	r0, r5
			dsk->root = dsk->fat + (DWORD)(dsk->fatcopy * (DWORD)dsk->fatsize);
 8004e8a:	fb09 f906 	mul.w	r9, r9, r6
 8004e8e:	444f      	add	r7, r9
 8004e90:	60e7      	str	r7, [r4, #12]
			dsk->maxroot = ReadWord( dsk->buffer, BSI_ROOTDIRENTS );
 8004e92:	f7ff ffab 	bl	8004dec <ReadWord>
			TotSec = ReadWord( dsk->buffer, BSI_TOTSEC16 );
 8004e96:	2113      	movs	r1, #19
			dsk->maxroot = ReadWord( dsk->buffer, BSI_ROOTDIRENTS );
 8004e98:	82a0      	strh	r0, [r4, #20]
 8004e9a:	4680      	mov	r8, r0
			TotSec = ReadWord( dsk->buffer, BSI_TOTSEC16 );
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7ff ffa5 	bl	8004dec <ReadWord>
			if( TotSec == 0 )
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	b920      	cbnz	r0, 8004eb0 <LoadBootSector+0x9c>
				TotSec = ReadDWord( dsk->buffer, BSI_TOTSEC32 );
 8004ea6:	2120      	movs	r1, #32
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f7ff ffa5 	bl	8004df8 <ReadDWord>
 8004eae:	4606      	mov	r6, r0
			BytesPerSec = ReadWord( dsk->buffer, BSI_BPS );
 8004eb0:	210b      	movs	r1, #11
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f7ff ff9a 	bl	8004dec <ReadWord>
			if( BytesPerSec == 0 || (BytesPerSec & 1) == 1 )
 8004eb8:	4602      	mov	r2, r0
 8004eba:	b108      	cbz	r0, 8004ec0 <LoadBootSector+0xac>
 8004ebc:	07c3      	lsls	r3, r0, #31
 8004ebe:	d501      	bpl.n	8004ec4 <LoadBootSector+0xb0>
				FSerrno = CE_UNSUPPORTED_SECTOR_SIZE;
 8004ec0:	2021      	movs	r0, #33	; 0x21
 8004ec2:	e7b1      	b.n	8004e28 <LoadBootSector+0x14>
			RootDirSectors = ((dsk->maxroot * NUMBER_OF_BYTES_IN_DIR_ENTRY) + (BytesPerSec - 1)) / BytesPerSec;
 8004ec4:	1e43      	subs	r3, r0, #1
			DataSec = TotSec - (ReservedSectorCount + (dsk->fatcopy * dsk->fatsize )  + RootDirSectors);
 8004ec6:	44d1      	add	r9, sl
            if(dsk->maxcls < 4085)
 8004ec8:	f640 71f4 	movw	r1, #4084	; 0xff4
			RootDirSectors = ((dsk->maxroot * NUMBER_OF_BYTES_IN_DIR_ENTRY) + (BytesPerSec - 1)) / BytesPerSec;
 8004ecc:	eb03 1348 	add.w	r3, r3, r8, lsl #5
			DataSec = TotSec - (ReservedSectorCount + (dsk->fatcopy * dsk->fatsize )  + RootDirSectors);
 8004ed0:	eba6 0609 	sub.w	r6, r6, r9
			RootDirSectors = ((dsk->maxroot * NUMBER_OF_BYTES_IN_DIR_ENTRY) + (BytesPerSec - 1)) / BytesPerSec;
 8004ed4:	fb93 f3f0 	sdiv	r3, r3, r0
			DataSec = TotSec - (ReservedSectorCount + (dsk->fatcopy * dsk->fatsize )  + RootDirSectors);
 8004ed8:	1af6      	subs	r6, r6, r3
			dsk->maxcls = DataSec / dsk->SecPerClus;
 8004eda:	fbb6 fbfb 	udiv	fp, r6, fp
            if(dsk->maxcls < 4085)
 8004ede:	458b      	cmp	fp, r1
			dsk->maxcls = DataSec / dsk->SecPerClus;
 8004ee0:	f8c4 b016 	str.w	fp, [r4, #22]
            if(dsk->maxcls < 4085)
 8004ee4:	d817      	bhi.n	8004f16 <LoadBootSector+0x102>
                dsk->type = FAT12;
 8004ee6:	2101      	movs	r1, #1
                        dsk->type = FAT32;
 8004ee8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			if (dsk->type == FAT32)
 8004eec:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8004ef0:	4e11      	ldr	r6, [pc, #68]	; (8004f38 <LoadBootSector+0x124>)
 8004ef2:	2903      	cmp	r1, #3
 8004ef4:	d116      	bne.n	8004f24 <LoadBootSector+0x110>
					FatRootDirClusterValue = ReadDWord( dsk->buffer, BSI_ROOTCLUS );
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	4628      	mov	r0, r5
 8004efa:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004efe:	f7ff ff7b 	bl	8004df8 <ReadDWord>
				dsk->data = dsk->root + RootDirSectors;
 8004f02:	9b01      	ldr	r3, [sp, #4]
 8004f04:	9a00      	ldr	r2, [sp, #0]
 8004f06:	441f      	add	r7, r3
					FatRootDirClusterValue = ReadDWord( dsk->buffer, BSI_ROOTCLUS );
 8004f08:	6030      	str	r0, [r6, #0]
				dsk->data = dsk->root + RootDirSectors;
 8004f0a:	6127      	str	r7, [r4, #16]
			if(BytesPerSec > MEDIA_SECTOR_SIZE)
 8004f0c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004f10:	d8d6      	bhi.n	8004ec0 <LoadBootSector+0xac>
    BYTE        error = CE_GOOD;
 8004f12:	2000      	movs	r0, #0
 8004f14:	e78a      	b.n	8004e2c <LoadBootSector+0x18>
                if(dsk->maxcls < 65525)
 8004f16:	f64f 71f4 	movw	r1, #65524	; 0xfff4
 8004f1a:	458b      	cmp	fp, r1
                    dsk->type = FAT16;
 8004f1c:	bf94      	ite	ls
 8004f1e:	2102      	movls	r1, #2
                        dsk->type = FAT32;
 8004f20:	2103      	movhi	r1, #3
 8004f22:	e7e1      	b.n	8004ee8 <LoadBootSector+0xd4>
                dsk->data = dsk->root + ( dsk->maxroot >> 4);
 8004f24:	f3c8 180f 	ubfx	r8, r8, #4, #16
                FatRootDirClusterValue = 0;
 8004f28:	2300      	movs	r3, #0
                dsk->data = dsk->root + ( dsk->maxroot >> 4);
 8004f2a:	4447      	add	r7, r8
                FatRootDirClusterValue = 0;
 8004f2c:	6033      	str	r3, [r6, #0]
                dsk->data = dsk->root + ( dsk->maxroot >> 4);
 8004f2e:	6127      	str	r7, [r4, #16]
 8004f30:	e7ec      	b.n	8004f0c <LoadBootSector+0xf8>
 8004f32:	bf00      	nop
 8004f34:	200007ea 	.word	0x200007ea
 8004f38:	20000770 	.word	0x20000770

08004f3c <DISKmount>:
    dsk->mount = FALSE; // default invalid
 8004f3c:	2300      	movs	r3, #0
{
 8004f3e:	b510      	push	{r4, lr}
    dsk->mount = FALSE; // default invalid
 8004f40:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
{
 8004f44:	4604      	mov	r4, r0
    dsk->buffer = gDataBuffer;    // assign buffer
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <DISKmount+0x4c>)
 8004f48:	6003      	str	r3, [r0, #0]
    mediaInformation = MDD_MediaInitialize();
 8004f4a:	f001 ff27 	bl	8006d9c <MDD_SDSPI_MediaInitialize>
    if(mediaInformation->errorCode != MEDIA_NO_ERROR)
 8004f4e:	7803      	ldrb	r3, [r0, #0]
 8004f50:	b11b      	cbz	r3, 8004f5a <DISKmount+0x1e>
        FSerrno = CE_INIT_ERROR;
 8004f52:	2006      	movs	r0, #6
                FSerrno = CE_UNSUPPORTED_SECTOR_SIZE;
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <DISKmount+0x50>)
 8004f56:	7018      	strb	r0, [r3, #0]
                return error;
 8004f58:	bd10      	pop	{r4, pc}
        if(mediaInformation->validityFlags.bits.sectorSize)
 8004f5a:	7843      	ldrb	r3, [r0, #1]
 8004f5c:	07db      	lsls	r3, r3, #31
 8004f5e:	d507      	bpl.n	8004f70 <DISKmount+0x34>
			dsk->sectorSize = mediaInformation->sectorSize;
 8004f60:	8843      	ldrh	r3, [r0, #2]
            if(mediaInformation->sectorSize > MEDIA_SECTOR_SIZE)
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			dsk->sectorSize = mediaInformation->sectorSize;
 8004f66:	f8c4 301a 	str.w	r3, [r4, #26]
            if(mediaInformation->sectorSize > MEDIA_SECTOR_SIZE)
 8004f6a:	d901      	bls.n	8004f70 <DISKmount+0x34>
                FSerrno = CE_UNSUPPORTED_SECTOR_SIZE;
 8004f6c:	2021      	movs	r0, #33	; 0x21
 8004f6e:	e7f1      	b.n	8004f54 <DISKmount+0x18>
        if((error = LoadMBR(dsk)) == CE_GOOD)
 8004f70:	4620      	mov	r0, r4
 8004f72:	f7ff fec3 	bl	8004cfc <LoadMBR>
 8004f76:	b930      	cbnz	r0, 8004f86 <DISKmount+0x4a>
            if((error = LoadBootSector(dsk)) == CE_GOOD)
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff ff4b 	bl	8004e14 <LoadBootSector>
 8004f7e:	b910      	cbnz	r0, 8004f86 <DISKmount+0x4a>
                dsk->mount = TRUE; // Mark that the DISK mounted successfully
 8004f80:	2301      	movs	r3, #1
 8004f82:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
} // -- mount
 8004f86:	bd10      	pop	{r4, pc}
 8004f88:	20000230 	.word	0x20000230
 8004f8c:	200007ea 	.word	0x200007ea

08004f90 <FSInit>:
{
 8004f90:	b538      	push	{r3, r4, r5, lr}
        gFileSlotOpen[fIndex] = TRUE;
 8004f92:	2201      	movs	r2, #1
 8004f94:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <FSInit+0x70>)
    gBufferZeroed = FALSE;
 8004f96:	2400      	movs	r4, #0
    if(DISKmount(&gDiskData) == CE_GOOD)
 8004f98:	4d1a      	ldr	r5, [pc, #104]	; (8005004 <FSInit+0x74>)
        gFileSlotOpen[fIndex] = TRUE;
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	705a      	strb	r2, [r3, #1]
    if(DISKmount(&gDiskData) == CE_GOOD)
 8004f9e:	4628      	mov	r0, r5
        gFileSlotOpen[fIndex] = TRUE;
 8004fa0:	709a      	strb	r2, [r3, #2]
    gBufferZeroed = FALSE;
 8004fa2:	4b19      	ldr	r3, [pc, #100]	; (8005008 <FSInit+0x78>)
    gLastFATSectorRead = 0xFFFFFFFF;
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <FSInit+0x7c>)
    gBufferZeroed = FALSE;
 8004fa6:	701c      	strb	r4, [r3, #0]
    gNeedFATWrite = FALSE;
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <FSInit+0x80>)
 8004faa:	701c      	strb	r4, [r3, #0]
    gLastFATSectorRead = 0xFFFFFFFF;
 8004fac:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb0:	6013      	str	r3, [r2, #0]
    gLastDataSectorRead = 0xFFFFFFFF;
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <FSInit+0x84>)
 8004fb4:	6013      	str	r3, [r2, #0]
    if(DISKmount(&gDiskData) == CE_GOOD)
 8004fb6:	f7ff ffc1 	bl	8004f3c <DISKmount>
 8004fba:	b9f0      	cbnz	r0, 8004ffa <FSInit+0x6a>
        cwdptr->dsk = &gDiskData;
 8004fbc:	4b16      	ldr	r3, [pc, #88]	; (8005018 <FSInit+0x88>)
        cwdptr->name[0] = '\\';
 8004fbe:	225c      	movs	r2, #92	; 0x5c
        cwdptr->dsk = &gDiskData;
 8004fc0:	681b      	ldr	r3, [r3, #0]
        cwdptr->sec = 0;
 8004fc2:	8198      	strh	r0, [r3, #12]
 8004fc4:	f103 012b 	add.w	r1, r3, #43	; 0x2b
        cwdptr->pos = 0;
 8004fc8:	81d8      	strh	r0, [r3, #14]
        cwdptr->seek = 0;
 8004fca:	6118      	str	r0, [r3, #16]
        cwdptr->size = 0;
 8004fcc:	6158      	str	r0, [r3, #20]
            cwdptr->name[fIndex] = 0x20;
 8004fce:	2020      	movs	r0, #32
        cwdptr->name[0] = '\\';
 8004fd0:	f883 2020 	strb.w	r2, [r3, #32]
 8004fd4:	f103 0221 	add.w	r2, r3, #33	; 0x21
        cwdptr->dsk = &gDiskData;
 8004fd8:	601d      	str	r5, [r3, #0]
            cwdptr->name[fIndex] = 0x20;
 8004fda:	f802 0b01 	strb.w	r0, [r2], #1
        for (fIndex = 1; fIndex < 11; fIndex++)
 8004fde:	428a      	cmp	r2, r1
 8004fe0:	d1fb      	bne.n	8004fda <FSInit+0x4a>
        cwdptr->attributes = ATTR_DIRECTORY;
 8004fe2:	2110      	movs	r1, #16
        cwdptr->entry = 0;
 8004fe4:	2200      	movs	r2, #0
        return TRUE;
 8004fe6:	2001      	movs	r0, #1
        cwdptr->attributes = ATTR_DIRECTORY;
 8004fe8:	8619      	strh	r1, [r3, #48]	; 0x30
        cwdptr->dirclus = FatRootDirClusterValue;
 8004fea:	490c      	ldr	r1, [pc, #48]	; (800501c <FSInit+0x8c>)
        cwdptr->entry = 0;
 8004fec:	859a      	strh	r2, [r3, #44]	; 0x2c
        cwdptr->dirclus = FatRootDirClusterValue;
 8004fee:	6809      	ldr	r1, [r1, #0]
 8004ff0:	6359      	str	r1, [r3, #52]	; 0x34
        cwdptr->dirccls = FatRootDirClusterValue;
 8004ff2:	6399      	str	r1, [r3, #56]	; 0x38
        FSerrno = 0;
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <FSInit+0x90>)
 8004ff6:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
    return FALSE;
 8004ffa:	4620      	mov	r0, r4
}
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
 8004ffe:	bf00      	nop
 8005000:	20000430 	.word	0x20000430
 8005004:	20000774 	.word	0x20000774
 8005008:	2000020c 	.word	0x2000020c
 800500c:	20000010 	.word	0x20000010
 8005010:	2000020e 	.word	0x2000020e
 8005014:	2000000c 	.word	0x2000000c
 8005018:	20000008 	.word	0x20000008
 800501c:	20000770 	.word	0x20000770
 8005020:	200007ea 	.word	0x200007ea

08005024 <Cluster2Sector>:
DWORD Cluster2Sector(DISK* dsk, DWORD cluster)
{
    DWORD sector;

    /* Rt: Settings based on FAT type */
    switch (dsk->type)
 8005024:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005028:	2b03      	cmp	r3, #3
 800502a:	d106      	bne.n	800503a <Cluster2Sector+0x16>
        default:
            // The root dir takes up cluster 0 and 1
            if(cluster == 0 ||cluster == 1)
                sector = dsk->root + cluster;
            else
                sector = (((DWORD)cluster-2) * dsk->SecPerClus) + dsk->data;
 800502c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005030:	3902      	subs	r1, #2
 8005032:	6900      	ldr	r0, [r0, #16]
 8005034:	fb03 0001 	mla	r0, r3, r1, r0
            break;
    }

    return(sector);

}
 8005038:	4770      	bx	lr
            if(cluster == 0 ||cluster == 1)
 800503a:	2901      	cmp	r1, #1
 800503c:	d8f6      	bhi.n	800502c <Cluster2Sector+0x8>
                sector = dsk->root + cluster;
 800503e:	68c0      	ldr	r0, [r0, #12]
 8005040:	4408      	add	r0, r1
 8005042:	4770      	bx	lr

08005044 <Write_File_Entry>:
{
 8005044:	b538      	push	{r3, r4, r5, lr}
    dsk = fo->dsk;
 8005046:	6805      	ldr	r5, [r0, #0]
    offset2  = (*curEntry / (dsk->sectorSize/32));
 8005048:	880c      	ldrh	r4, [r1, #0]
 800504a:	f8d5 301a 	ldr.w	r3, [r5, #26]
    ccls = fo->dirccls;
 800504e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    offset2  = (*curEntry / (dsk->sectorSize/32));
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	fbb4 f4f3 	udiv	r4, r4, r3
    switch (dsk->type)
 8005056:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    offset2  = (*curEntry / (dsk->sectorSize/32));
 800505a:	b2e4      	uxtb	r4, r4
    switch (dsk->type)
 800505c:	b17b      	cbz	r3, 800507e <Write_File_Entry+0x3a>
 800505e:	2b02      	cmp	r3, #2
 8005060:	d909      	bls.n	8005076 <Write_File_Entry+0x32>
 8005062:	2b03      	cmp	r3, #3
 8005064:	d10b      	bne.n	800507e <Write_File_Entry+0x3a>
                offset2 = offset2 % (dsk->SecPerClus);
 8005066:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 800506a:	fbb4 f3f1 	udiv	r3, r4, r1
 800506e:	fb01 4413 	mls	r4, r1, r3, r4
 8005072:	b2e4      	uxtb	r4, r4
 8005074:	e003      	b.n	800507e <Write_File_Entry+0x3a>
            if(ccls != FatRootDirClusterValue)
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <Write_File_Entry+0x54>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d1f3      	bne.n	8005066 <Write_File_Entry+0x22>
    sector = Cluster2Sector(dsk,ccls);
 800507e:	4611      	mov	r1, r2
 8005080:	4628      	mov	r0, r5
 8005082:	f7ff ffcf 	bl	8005024 <Cluster2Sector>
    if(!MDD_SectorWrite( sector + offset2, dsk->buffer, FALSE))
 8005086:	2200      	movs	r2, #0
 8005088:	6829      	ldr	r1, [r5, #0]
 800508a:	4420      	add	r0, r4
 800508c:	f001 fff6 	bl	800707c <MDD_SDSPI_SectorWrite>
} // Write_File_Entry
 8005090:	3000      	adds	r0, #0
 8005092:	bf18      	it	ne
 8005094:	2001      	movne	r0, #1
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	20000770 	.word	0x20000770

0800509c <flushData>:
{
    DWORD l;
    DISK * dsk;

    // This will either be the pointer to the last file, or the handle
    FILEOBJ stream = gBufferOwner;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <flushData+0x2c>)
 800509e:	681a      	ldr	r2, [r3, #0]
{
 80050a0:	b510      	push	{r4, lr}

    dsk = stream->dsk;
 80050a2:	6814      	ldr	r4, [r2, #0]

    // figure out the lba
    l = Cluster2Sector(dsk,stream->ccls);
 80050a4:	6891      	ldr	r1, [r2, #8]
 80050a6:	4620      	mov	r0, r4
 80050a8:	f7ff ffbc 	bl	8005024 <Cluster2Sector>
    l += (WORD)stream->sec;      // add the sector number to it
 80050ac:	8993      	ldrh	r3, [r2, #12]

    if(!MDD_SectorWrite( l, dsk->buffer, FALSE))
 80050ae:	6821      	ldr	r1, [r4, #0]
 80050b0:	2200      	movs	r2, #0
 80050b2:	4418      	add	r0, r3
 80050b4:	f001 ffe2 	bl	800707c <MDD_SDSPI_SectorWrite>
 80050b8:	b118      	cbz	r0, 80050c2 <flushData+0x26>
    {
        return CE_WRITE_ERROR;
    }

    gNeedDataWrite = FALSE;
 80050ba:	2000      	movs	r0, #0
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <flushData+0x30>)
 80050be:	7018      	strb	r0, [r3, #0]

    return CE_GOOD;
 80050c0:	bd10      	pop	{r4, pc}
        return CE_WRITE_ERROR;
 80050c2:	2009      	movs	r0, #9
}
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	bf00      	nop
 80050c8:	20000208 	.word	0x20000208
 80050cc:	2000020d 	.word	0x2000020d

080050d0 <EraseCluster>:
{
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	4605      	mov	r5, r0
    SectorAddress = Cluster2Sector(disk,cluster);
 80050d4:	f7ff ffa6 	bl	8005024 <Cluster2Sector>
    if (gNeedDataWrite)
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <EraseCluster+0x60>)
    SectorAddress = Cluster2Sector(disk,cluster);
 80050da:	4606      	mov	r6, r0
    if (gNeedDataWrite)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b9bb      	cbnz	r3, 8005110 <EraseCluster+0x40>
    if (gBufferZeroed == FALSE)
 80050e0:	4c14      	ldr	r4, [pc, #80]	; (8005134 <EraseCluster+0x64>)
    gBufferOwner = NULL;
 80050e2:	2200      	movs	r2, #0
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <EraseCluster+0x68>)
    if (gBufferZeroed == FALSE)
 80050e6:	7821      	ldrb	r1, [r4, #0]
    gBufferOwner = NULL;
 80050e8:	601a      	str	r2, [r3, #0]
    if (gBufferZeroed == FALSE)
 80050ea:	b931      	cbnz	r1, 80050fa <EraseCluster+0x2a>
        memset(disk->buffer, 0x00, MEDIA_SECTOR_SIZE);
 80050ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f0:	6828      	ldr	r0, [r5, #0]
 80050f2:	f002 f87f 	bl	80071f4 <memset>
        gBufferZeroed = TRUE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	7023      	strb	r3, [r4, #0]
            error = CE_WRITE_ERROR;
 80050fa:	4630      	mov	r0, r6
 80050fc:	2400      	movs	r4, #0
    for(index = 0; index < disk->SecPerClus && error == CE_GOOD; index++)
 80050fe:	1b83      	subs	r3, r0, r6
 8005100:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8005104:	b2db      	uxtb	r3, r3
 8005106:	429a      	cmp	r2, r3
 8005108:	d900      	bls.n	800510c <EraseCluster+0x3c>
 800510a:	b13c      	cbz	r4, 800511c <EraseCluster+0x4c>
}
 800510c:	4620      	mov	r0, r4
 800510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (flushData())
 8005110:	f7ff ffc4 	bl	800509c <flushData>
 8005114:	2800      	cmp	r0, #0
 8005116:	d0e3      	beq.n	80050e0 <EraseCluster+0x10>
            return CE_WRITE_ERROR;
 8005118:	2409      	movs	r4, #9
 800511a:	e7f7      	b.n	800510c <EraseCluster+0x3c>
        if (MDD_SectorWrite( SectorAddress++, disk->buffer, FALSE) != TRUE)
 800511c:	4622      	mov	r2, r4
 800511e:	6829      	ldr	r1, [r5, #0]
 8005120:	1c47      	adds	r7, r0, #1
 8005122:	f001 ffab 	bl	800707c <MDD_SDSPI_SectorWrite>
            error = CE_WRITE_ERROR;
 8005126:	2801      	cmp	r0, #1
        if (MDD_SectorWrite( SectorAddress++, disk->buffer, FALSE) != TRUE)
 8005128:	4638      	mov	r0, r7
            error = CE_WRITE_ERROR;
 800512a:	bf18      	it	ne
 800512c:	2409      	movne	r4, #9
 800512e:	e7e6      	b.n	80050fe <EraseCluster+0x2e>
 8005130:	2000020d 	.word	0x2000020d
 8005134:	2000020c 	.word	0x2000020c
 8005138:	20000208 	.word	0x20000208

0800513c <ValidateChars>:
    to be 'TRUE,' partial string search characters are allowed.
  Remarks:
    None.
  *************************************************************/
BYTE ValidateChars(char * FileName , BYTE mode)
{
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	4606      	mov	r6, r0
 8005140:	460f      	mov	r7, r1
    int StrSz, index;
    unsigned char radix = FALSE;
 8005142:	2500      	movs	r5, #0

    StrSz = strlen(FileName);
 8005144:	f7fb f8cc 	bl	80002e0 <strlen>

    for( index = 0; index < StrSz; index++ )
 8005148:	4634      	mov	r4, r6
    {
        if (((FileName[index] <= 0x20) && (FileName[index] != 0x05)) ||
 800514a:	491b      	ldr	r1, [pc, #108]	; (80051b8 <ValidateChars+0x7c>)
    for( index = 0; index < StrSz; index++ )
 800514c:	1ba3      	subs	r3, r4, r6
 800514e:	4298      	cmp	r0, r3
 8005150:	dc01      	bgt.n	8005156 <ValidateChars+0x1a>
            // Convert lower-case to upper-case
            if ((FileName[index] >= 0x61) && (FileName[index] <= 0x7A))
                FileName[index] -= 0x20;
        }
    }
    return TRUE;
 8005152:	2001      	movs	r0, #1
 8005154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((FileName[index] <= 0x20) && (FileName[index] != 0x05)) ||
 8005156:	f814 2b01 	ldrb.w	r2, [r4], #1
 800515a:	2a20      	cmp	r2, #32
 800515c:	d803      	bhi.n	8005166 <ValidateChars+0x2a>
 800515e:	2a05      	cmp	r2, #5
 8005160:	d016      	beq.n	8005190 <ValidateChars+0x54>
            return FALSE;
 8005162:	2000      	movs	r0, #0
 8005164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((FileName[index] <= 0x20) && (FileName[index] != 0x05)) ||
 8005166:	f1a2 0322 	sub.w	r3, r2, #34	; 0x22
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b1c      	cmp	r3, #28
 800516e:	d805      	bhi.n	800517c <ValidateChars+0x40>
 8005170:	fa21 f303 	lsr.w	r3, r1, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	f013 0301 	ands.w	r3, r3, #1
 800517a:	d0f2      	beq.n	8005162 <ValidateChars+0x26>
            (FileName[index] == 0x3E) || (FileName[index] == 0x5B) ||
 800517c:	f1a2 035b 	sub.w	r3, r2, #91	; 0x5b
 8005180:	2b02      	cmp	r3, #2
 8005182:	d9ee      	bls.n	8005162 <ValidateChars+0x26>
            (FileName[index] == 0x5C) || (FileName[index] == 0x5D) ||
 8005184:	2a7c      	cmp	r2, #124	; 0x7c
 8005186:	d0ec      	beq.n	8005162 <ValidateChars+0x26>
            (FileName[index] == 0x7C) || ((FileName[index] == 0x2E) && radix == TRUE))
 8005188:	2a2e      	cmp	r2, #46	; 0x2e
 800518a:	d111      	bne.n	80051b0 <ValidateChars+0x74>
 800518c:	2d01      	cmp	r5, #1
 800518e:	d0e8      	beq.n	8005162 <ValidateChars+0x26>
            if (mode == FALSE)
 8005190:	b91f      	cbnz	r7, 800519a <ValidateChars+0x5e>
                if ((FileName[index] == '*') || (FileName[index] == '?'))
 8005192:	2a2a      	cmp	r2, #42	; 0x2a
 8005194:	d0e5      	beq.n	8005162 <ValidateChars+0x26>
 8005196:	2a3f      	cmp	r2, #63	; 0x3f
 8005198:	d0e3      	beq.n	8005162 <ValidateChars+0x26>
                radix = TRUE;
 800519a:	2a2e      	cmp	r2, #46	; 0x2e
 800519c:	bf08      	it	eq
 800519e:	2501      	moveq	r5, #1
            if ((FileName[index] >= 0x61) && (FileName[index] <= 0x7A))
 80051a0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80051a4:	2b19      	cmp	r3, #25
                FileName[index] -= 0x20;
 80051a6:	bf9c      	itt	ls
 80051a8:	3a20      	subls	r2, #32
 80051aa:	f804 2c01 	strbls.w	r2, [r4, #-1]
 80051ae:	e7cd      	b.n	800514c <ValidateChars+0x10>
            if (mode == FALSE)
 80051b0:	2f00      	cmp	r7, #0
 80051b2:	d0ee      	beq.n	8005192 <ValidateChars+0x56>
 80051b4:	e7f4      	b.n	80051a0 <ValidateChars+0x64>
 80051b6:	bf00      	nop
 80051b8:	1f002601 	.word	0x1f002601

080051bc <FormatFileName>:
{
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051be:	1e4b      	subs	r3, r1, #1
 80051c0:	460d      	mov	r5, r1
 80051c2:	4616      	mov	r6, r2
 80051c4:	b085      	sub	sp, #20
 80051c6:	f101 020a 	add.w	r2, r1, #10
 80051ca:	4604      	mov	r4, r0
        *(fN2 + count) = ' '; // Load destination filename to be space intially.
 80051cc:	2120      	movs	r1, #32
 80051ce:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (count = 0; count < 11; count++)
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d1fb      	bne.n	80051ce <FormatFileName+0x12>
    if (fileName[0] == '.' || fileName[0] == 0)
 80051d6:	7820      	ldrb	r0, [r4, #0]
 80051d8:	282e      	cmp	r0, #46	; 0x2e
 80051da:	d00f      	beq.n	80051fc <FormatFileName+0x40>
 80051dc:	b368      	cbz	r0, 800523a <FormatFileName+0x7e>
    temp = strlen( fileName );
 80051de:	4620      	mov	r0, r4
 80051e0:	f7fb f87e 	bl	80002e0 <strlen>
    if( temp <= TOTAL_FILE_SIZE ) // 8+3+1
 80051e4:	b280      	uxth	r0, r0
 80051e6:	280c      	cmp	r0, #12
 80051e8:	d808      	bhi.n	80051fc <FormatFileName+0x40>
        strcpy( szName, fileName );  // copy to RAM in case fileName is located in flash
 80051ea:	4621      	mov	r1, r4
 80051ec:	4668      	mov	r0, sp
 80051ee:	f002 f893 	bl	8007318 <strcpy>
    if ( !ValidateChars(szName, mode) )
 80051f2:	4631      	mov	r1, r6
 80051f4:	4668      	mov	r0, sp
 80051f6:	f7ff ffa1 	bl	800513c <ValidateChars>
 80051fa:	b908      	cbnz	r0, 8005200 <FormatFileName+0x44>
        return FALSE;
 80051fc:	2000      	movs	r0, #0
 80051fe:	e01c      	b.n	800523a <FormatFileName+0x7e>
    if( (pExt = strchr( szName, '.' )) != 0 )
 8005200:	212e      	movs	r1, #46	; 0x2e
 8005202:	4668      	mov	r0, sp
 8005204:	f002 f87a 	bl	80072fc <strchr>
 8005208:	4604      	mov	r4, r0
 800520a:	b138      	cbz	r0, 800521c <FormatFileName+0x60>
        *pExt = 0; // Assigning NULL here makes the "szName" to be terminated and "pExt" pointer to hold only extn characters.
 800520c:	2300      	movs	r3, #0
 800520e:	f804 3b01 	strb.w	r3, [r4], #1
        if( strlen( pExt ) > 3 ) // make sure the extension is 3 bytes or fewer
 8005212:	4620      	mov	r0, r4
 8005214:	f7fb f864 	bl	80002e0 <strlen>
 8005218:	2803      	cmp	r0, #3
 800521a:	d8ef      	bhi.n	80051fc <FormatFileName+0x40>
    if( strlen(szName) > 8 )
 800521c:	4668      	mov	r0, sp
 800521e:	f7fb f85f 	bl	80002e0 <strlen>
 8005222:	2808      	cmp	r0, #8
 8005224:	d8ea      	bhi.n	80051fc <FormatFileName+0x40>
 8005226:	2700      	movs	r7, #0
 8005228:	b2fe      	uxtb	r6, r7
    for (count = 0; count < strlen(szName); count++)
 800522a:	4668      	mov	r0, sp
 800522c:	f7fb f858 	bl	80002e0 <strlen>
 8005230:	3701      	adds	r7, #1
 8005232:	42b0      	cmp	r0, r6
 8005234:	d803      	bhi.n	800523e <FormatFileName+0x82>
    if(pExt && *pExt )
 8005236:	b944      	cbnz	r4, 800524a <FormatFileName+0x8e>
    return TRUE;
 8005238:	2001      	movs	r0, #1
}
 800523a:	b005      	add	sp, #20
 800523c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *(fN2 + count) = * (szName + count); // Destination filename initially filled with SPACE. Now copy only available chars.
 800523e:	ab04      	add	r3, sp, #16
 8005240:	4433      	add	r3, r6
 8005242:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005246:	55ab      	strb	r3, [r5, r6]
 8005248:	e7ee      	b.n	8005228 <FormatFileName+0x6c>
    if(pExt && *pExt )
 800524a:	7823      	ldrb	r3, [r4, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f3      	beq.n	8005238 <FormatFileName+0x7c>
 8005250:	2700      	movs	r7, #0
 8005252:	b2fe      	uxtb	r6, r7
        for (count = 0; count < strlen (pExt); count++)
 8005254:	4620      	mov	r0, r4
 8005256:	f7fb f843 	bl	80002e0 <strlen>
 800525a:	3701      	adds	r7, #1
 800525c:	42b0      	cmp	r0, r6
 800525e:	d9eb      	bls.n	8005238 <FormatFileName+0x7c>
            *(fN2 + count + 8) = *(pExt + count); // Copy the extn to 8th position onwards. Ex: "FILE    .Tx "
 8005260:	19ab      	adds	r3, r5, r6
 8005262:	5da2      	ldrb	r2, [r4, r6]
 8005264:	721a      	strb	r2, [r3, #8]
 8005266:	e7f4      	b.n	8005252 <FormatFileName+0x96>

08005268 <WriteFAT>:
    None.
  ****************************************************************************/

#ifdef ALLOW_WRITES
DWORD WriteFAT (DISK *dsk, DWORD ccls, DWORD value, BYTE forceWrite)
{
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	4614      	mov	r4, r2
    BYTE i, q, c;
    DWORD p, li, l, ClusterFailValue;

#ifdef SUPPORT_FAT32 // If FAT32 supported.
    if (dsk->type != FAT32 && dsk->type != FAT16 && dsk->type != FAT12)
 800526e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
{
 8005272:	469a      	mov	sl, r3
 8005274:	b085      	sub	sp, #20
    if (dsk->type != FAT32 && dsk->type != FAT16 && dsk->type != FAT12)
 8005276:	1e53      	subs	r3, r2, #1
{
 8005278:	4606      	mov	r6, r0
    if (dsk->type != FAT32 && dsk->type != FAT16 && dsk->type != FAT12)
 800527a:	2b02      	cmp	r3, #2
 800527c:	f200 80c5 	bhi.w	800540a <WriteFAT+0x1a2>
            break;
#endif
        case FAT12:
        case FAT16:
        default:
            ClusterFailValue = CLUSTER_FAIL_FAT16;
 8005280:	2a03      	cmp	r2, #3
            break;
    }

    gBufferZeroed = FALSE;
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	4862      	ldr	r0, [pc, #392]	; (8005410 <WriteFAT+0x1a8>)
            ClusterFailValue = CLUSTER_FAIL_FAT16;
 8005288:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800528c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800541c <WriteFAT+0x1b4>
 8005290:	bf08      	it	eq
 8005292:	f06f 4770 	mvneq.w	r7, #4026531840	; 0xf0000000
    gBufferZeroed = FALSE;
 8005296:	7003      	strb	r3, [r0, #0]

    // The only purpose for calling this function with forceWrite
    // is to write the current FAT sector to the card
    if (forceWrite)
 8005298:	f1ba 0f00 	cmp.w	sl, #0
 800529c:	d01c      	beq.n	80052d8 <WriteFAT+0x70>
    {
        for (i = 0, li = gLastFATSectorRead; i < dsk->fatcopy; i++, li += dsk->fatsize)
 800529e:	f8d9 5000 	ldr.w	r5, [r9]
 80052a2:	461c      	mov	r4, r3
        {
            if (!MDD_SectorWrite (li, gFATBuffer, FALSE))
 80052a4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8005418 <WriteFAT+0x1b0>
        for (i = 0, li = gLastFATSectorRead; i < dsk->fatcopy; i++, li += dsk->fatsize)
 80052a8:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
 80052ac:	b2e3      	uxtb	r3, r4
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d806      	bhi.n	80052c0 <WriteFAT+0x58>
            {
                return ClusterFailValue;
            }
        }

        gNeedFATWrite = FALSE;
 80052b2:	2700      	movs	r7, #0
 80052b4:	4b57      	ldr	r3, [pc, #348]	; (8005414 <WriteFAT+0x1ac>)
 80052b6:	701f      	strb	r7, [r3, #0]
        }
    }
    gNeedFATWrite = TRUE;

    return 0;
}
 80052b8:	4638      	mov	r0, r7
 80052ba:	b005      	add	sp, #20
 80052bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (!MDD_SectorWrite (li, gFATBuffer, FALSE))
 80052c0:	2200      	movs	r2, #0
 80052c2:	4641      	mov	r1, r8
 80052c4:	4628      	mov	r0, r5
 80052c6:	3401      	adds	r4, #1
 80052c8:	f001 fed8 	bl	800707c <MDD_SDSPI_SectorWrite>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d0f3      	beq.n	80052b8 <WriteFAT+0x50>
        for (i = 0, li = gLastFATSectorRead; i < dsk->fatcopy; i++, li += dsk->fatsize)
 80052d0:	f8d6 301e 	ldr.w	r3, [r6, #30]
 80052d4:	441d      	add	r5, r3
 80052d6:	e7e7      	b.n	80052a8 <WriteFAT+0x40>
    switch (dsk->type)
 80052d8:	2a01      	cmp	r2, #1
 80052da:	d025      	beq.n	8005328 <WriteFAT+0xc0>
 80052dc:	2a03      	cmp	r2, #3
 80052de:	d129      	bne.n	8005334 <WriteFAT+0xcc>
            p = (DWORD)ccls *4;   // "p" is the position in "gFATBuffer" for corresponding cluster.
 80052e0:	008d      	lsls	r5, r1, #2
    l = dsk->fat + (p / dsk->sectorSize);     //
 80052e2:	f8d6 301a 	ldr.w	r3, [r6, #26]
    if (gLastFATSectorRead != l)
 80052e6:	f8d9 b000 	ldr.w	fp, [r9]
    l = dsk->fat + (p / dsk->sectorSize);     //
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80052f0:	fbb5 f3f3 	udiv	r3, r5, r3
 80052f4:	4498      	add	r8, r3
    if (gLastFATSectorRead != l)
 80052f6:	45d8      	cmp	r8, fp
 80052f8:	d02e      	beq.n	8005358 <WriteFAT+0xf0>
        if (gNeedFATWrite)
 80052fa:	4b46      	ldr	r3, [pc, #280]	; (8005414 <WriteFAT+0x1ac>)
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	9302      	str	r3, [sp, #8]
 8005300:	b142      	cbz	r2, 8005314 <WriteFAT+0xac>
 8005302:	2300      	movs	r3, #0
            for (i = 0, li = gLastFATSectorRead; i < dsk->fatcopy; i++, li += dsk->fatsize)
 8005304:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
 8005308:	b2da      	uxtb	r2, r3
 800530a:	4291      	cmp	r1, r2
 800530c:	d814      	bhi.n	8005338 <WriteFAT+0xd0>
            gNeedFATWrite = FALSE;
 800530e:	2300      	movs	r3, #0
 8005310:	9a02      	ldr	r2, [sp, #8]
 8005312:	7013      	strb	r3, [r2, #0]
        if (!MDD_SectorRead (l, gFATBuffer))
 8005314:	4940      	ldr	r1, [pc, #256]	; (8005418 <WriteFAT+0x1b0>)
 8005316:	4640      	mov	r0, r8
 8005318:	f001 fe44 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 800531c:	b9d0      	cbnz	r0, 8005354 <WriteFAT+0xec>
                    gLastFATSectorRead = 0xFFFF;
 800531e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005322:	f8c9 3000 	str.w	r3, [r9]
                    return ClusterFailValue;
 8005326:	e7c7      	b.n	80052b8 <WriteFAT+0x50>
            p = (DWORD) ccls * 3; // "p" is the position in "gFATBuffer" for corresponding cluster.
 8005328:	eb01 0541 	add.w	r5, r1, r1, lsl #1
            q = p & 1;   // Odd or even?
 800532c:	f005 0a01 	and.w	sl, r5, #1
            p >>= 1;
 8005330:	086d      	lsrs	r5, r5, #1
            break;
 8005332:	e7d6      	b.n	80052e2 <WriteFAT+0x7a>
            p = (DWORD) ccls *2;   // "p" is the position in "gFATBuffer" for corresponding cluster.
 8005334:	004d      	lsls	r5, r1, #1
            break;
 8005336:	e7d4      	b.n	80052e2 <WriteFAT+0x7a>
                if (!MDD_SectorWrite (li, gFATBuffer, FALSE))
 8005338:	2200      	movs	r2, #0
 800533a:	4937      	ldr	r1, [pc, #220]	; (8005418 <WriteFAT+0x1b0>)
 800533c:	4658      	mov	r0, fp
 800533e:	9303      	str	r3, [sp, #12]
 8005340:	f001 fe9c 	bl	800707c <MDD_SDSPI_SectorWrite>
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	2800      	cmp	r0, #0
 800534a:	d0b5      	beq.n	80052b8 <WriteFAT+0x50>
            for (i = 0, li = gLastFATSectorRead; i < dsk->fatcopy; i++, li += dsk->fatsize)
 800534c:	f8d6 201e 	ldr.w	r2, [r6, #30]
 8005350:	4493      	add	fp, r2
 8005352:	e7d7      	b.n	8005304 <WriteFAT+0x9c>
            gLastFATSectorRead = l;
 8005354:	f8c9 8000 	str.w	r8, [r9]
    p &= dsk->sectorSize - 1;                 // Restrict 'p' within the FATbuffer size
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	1e59      	subs	r1, r3, #1
    if (dsk->type == FAT32)  // Refer page 16 of FAT requirement.
 800535c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8005360:	2b03      	cmp	r3, #3
    p &= dsk->sectorSize - 1;                 // Restrict 'p' within the FATbuffer size
 8005362:	ea05 0501 	and.w	r5, r5, r1
    if (dsk->type == FAT32)  // Refer page 16 of FAT requirement.
 8005366:	d110      	bne.n	800538a <WriteFAT+0x122>
        RAMwrite (gFATBuffer, p,   ((value & 0x000000ff)));         // lsb,1st byte of cluster value
 8005368:	4b2b      	ldr	r3, [pc, #172]	; (8005418 <WriteFAT+0x1b0>)
        RAMwrite (gFATBuffer, p+1, ((value & 0x0000ff00) >> 8));
 800536a:	0a21      	lsrs	r1, r4, #8
 800536c:	1c5a      	adds	r2, r3, #1
        RAMwrite (gFATBuffer, p,   ((value & 0x000000ff)));         // lsb,1st byte of cluster value
 800536e:	54ec      	strb	r4, [r5, r3]
        RAMwrite (gFATBuffer, p+1, ((value & 0x0000ff00) >> 8));
 8005370:	54a9      	strb	r1, [r5, r2]
        RAMwrite (gFATBuffer, p+2, ((value & 0x00ff0000) >> 16));
 8005372:	1c9a      	adds	r2, r3, #2
 8005374:	0c21      	lsrs	r1, r4, #16
        RAMwrite (gFATBuffer, p+3, ((value & 0x0f000000) >> 24));   // the MSB nibble is supposed to be "0" in FAT32. So mask it.
 8005376:	3303      	adds	r3, #3
 8005378:	f3c4 6403 	ubfx	r4, r4, #24, #4
        RAMwrite (gFATBuffer, p+2, ((value & 0x00ff0000) >> 16));
 800537c:	54a9      	strb	r1, [r5, r2]
            RAMwrite (gFATBuffer, p+1, ((value&0x0000ff00) >> 8));    // msB
 800537e:	54ec      	strb	r4, [r5, r3]
    gNeedFATWrite = TRUE;
 8005380:	2201      	movs	r2, #1
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <WriteFAT+0x1ac>)
    return 0;
 8005384:	2700      	movs	r7, #0
    gNeedFATWrite = TRUE;
 8005386:	701a      	strb	r2, [r3, #0]
    return 0;
 8005388:	e796      	b.n	80052b8 <WriteFAT+0x50>
        if (dsk->type == FAT16)
 800538a:	2b02      	cmp	r3, #2
 800538c:	d104      	bne.n	8005398 <WriteFAT+0x130>
            RAMwrite (gFATBuffer, p, value);            //lsB
 800538e:	4b22      	ldr	r3, [pc, #136]	; (8005418 <WriteFAT+0x1b0>)
 8005390:	54ec      	strb	r4, [r5, r3]
            RAMwrite (gFATBuffer, p+1, ((value&0x0000ff00) >> 8));    // msB
 8005392:	3301      	adds	r3, #1
 8005394:	0a24      	lsrs	r4, r4, #8
 8005396:	e7f2      	b.n	800537e <WriteFAT+0x116>
        else if (dsk->type == FAT12)
 8005398:	2b01      	cmp	r3, #1
 800539a:	d1f1      	bne.n	8005380 <WriteFAT+0x118>
            c = RAMread (gFATBuffer, p);
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <WriteFAT+0x1b0>)
 800539e:	5cab      	ldrb	r3, [r5, r2]
 80053a0:	4693      	mov	fp, r2
            if (q)
 80053a2:	f1ba 0f00 	cmp.w	sl, #0
 80053a6:	d028      	beq.n	80053fa <WriteFAT+0x192>
                c = ((value & 0x0F) << 4) | ( c & 0x0F);
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80053b0:	b2db      	uxtb	r3, r3
            RAMwrite (gFATBuffer, p, c);
 80053b2:	54ab      	strb	r3, [r5, r2]
            p = (p +1) & (dsk->sectorSize-1);
 80053b4:	3501      	adds	r5, #1
 80053b6:	f8d6 301a 	ldr.w	r3, [r6, #26]
 80053ba:	3b01      	subs	r3, #1
            if (p == 0)
 80053bc:	401d      	ands	r5, r3
 80053be:	d112      	bne.n	80053e6 <WriteFAT+0x17e>
                if (WriteFAT (dsk, 0,0,TRUE))
 80053c0:	2301      	movs	r3, #1
 80053c2:	462a      	mov	r2, r5
 80053c4:	4629      	mov	r1, r5
 80053c6:	4630      	mov	r0, r6
 80053c8:	f7ff ff4e 	bl	8005268 <WriteFAT>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f47f af73 	bne.w	80052b8 <WriteFAT+0x50>
                if (!MDD_SectorRead (l +1, gFATBuffer))
 80053d2:	f108 0601 	add.w	r6, r8, #1
 80053d6:	4910      	ldr	r1, [pc, #64]	; (8005418 <WriteFAT+0x1b0>)
 80053d8:	4630      	mov	r0, r6
 80053da:	f001 fde3 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d09d      	beq.n	800531e <WriteFAT+0xb6>
                    gLastFATSectorRead = l + 1;
 80053e2:	f8c9 6000 	str.w	r6, [r9]
            c = RAMread (gFATBuffer, p);
 80053e6:	f81b 3005 	ldrb.w	r3, [fp, r5]
            if (q)
 80053ea:	f1ba 0f00 	cmp.w	sl, #0
 80053ee:	d006      	beq.n	80053fe <WriteFAT+0x196>
                c = (value >> 4);
 80053f0:	f3c4 1407 	ubfx	r4, r4, #4, #8
            RAMwrite (gFATBuffer, p, c);
 80053f4:	f80b 4005 	strb.w	r4, [fp, r5]
 80053f8:	e7c2      	b.n	8005380 <WriteFAT+0x118>
                c = (value & 0xFF);
 80053fa:	b2e3      	uxtb	r3, r4
 80053fc:	e7d9      	b.n	80053b2 <WriteFAT+0x14a>
                c = ((value >> 8) & 0x0F) | (c & 0xF0);
 80053fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005402:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8005406:	431c      	orrs	r4, r3
 8005408:	e7f4      	b.n	80053f4 <WriteFAT+0x18c>
        return CLUSTER_FAIL_FAT32;
 800540a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
 800540e:	e753      	b.n	80052b8 <WriteFAT+0x50>
 8005410:	2000020c 	.word	0x2000020c
 8005414:	2000020e 	.word	0x2000020e
 8005418:	200004bc 	.word	0x200004bc
 800541c:	20000010 	.word	0x20000010

08005420 <ReadFAT>:
{
 8005420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    switch (dsk->type)
 8005424:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    gBufferZeroed = FALSE;
 8005428:	2600      	movs	r6, #0
 800542a:	4b4d      	ldr	r3, [pc, #308]	; (8005560 <ReadFAT+0x140>)
{
 800542c:	4680      	mov	r8, r0
    switch (dsk->type)
 800542e:	2a01      	cmp	r2, #1
    gBufferZeroed = FALSE;
 8005430:	701e      	strb	r6, [r3, #0]
    switch (dsk->type)
 8005432:	d01e      	beq.n	8005472 <ReadFAT+0x52>
 8005434:	2a03      	cmp	r2, #3
 8005436:	d126      	bne.n	8005486 <ReadFAT+0x66>
            p = (DWORD)ccls * 4;
 8005438:	0089      	lsls	r1, r1, #2
            LastClusterLimit = LAST_CLUSTER_FAT32;
 800543a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8005570 <ReadFAT+0x150>
            ClusterFailValue = CLUSTER_FAIL_FAT32;
 800543e:	f06f 4a70 	mvn.w	sl, #4026531840	; 0xf0000000
    l = dsk->fat + (p / dsk->sectorSize);     //
 8005442:	f8d8 401a 	ldr.w	r4, [r8, #26]
 8005446:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800544a:	fbb1 f3f4 	udiv	r3, r1, r4
 800544e:	441f      	add	r7, r3
    p &= dsk->sectorSize - 1;                 // Restrict 'p' within the FATbuffer size
 8005450:	1e63      	subs	r3, r4, #1
 8005452:	ea01 0403 	and.w	r4, r1, r3
    if (gLastFATSectorRead == l)
 8005456:	4943      	ldr	r1, [pc, #268]	; (8005564 <ReadFAT+0x144>)
 8005458:	6808      	ldr	r0, [r1, #0]
 800545a:	4689      	mov	r9, r1
 800545c:	4287      	cmp	r7, r0
 800545e:	d14b      	bne.n	80054f8 <ReadFAT+0xd8>
        if (dsk->type == FAT32)
 8005460:	2a03      	cmp	r2, #3
 8005462:	d114      	bne.n	800548e <ReadFAT+0x6e>
            c = RAMreadD (gFATBuffer, p);
 8005464:	4b40      	ldr	r3, [pc, #256]	; (8005568 <ReadFAT+0x148>)
 8005466:	58e5      	ldr	r5, [r4, r3]
 8005468:	455d      	cmp	r5, fp
 800546a:	bf28      	it	cs
 800546c:	465d      	movcs	r5, fp
 800546e:	46aa      	mov	sl, r5
 8005470:	e016      	b.n	80054a0 <ReadFAT+0x80>
            p = (DWORD) ccls *3;  // Mulby1.5 to find cluster pos in FAT
 8005472:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            LastClusterLimit = LAST_CLUSTER_FAT12;
 8005476:	f640 7bf8 	movw	fp, #4088	; 0xff8
            q = p&1;
 800547a:	f001 0601 	and.w	r6, r1, #1
            p >>= 1;
 800547e:	0849      	lsrs	r1, r1, #1
            ClusterFailValue = CLUSTER_FAIL_FAT16;
 8005480:	f64f 7aff 	movw	sl, #65535	; 0xffff
            break;
 8005484:	e7dd      	b.n	8005442 <ReadFAT+0x22>
            p = (DWORD)ccls *2;     // Mulby 2 to find cluster pos in FAT
 8005486:	0049      	lsls	r1, r1, #1
            LastClusterLimit = LAST_CLUSTER_FAT16;
 8005488:	f64f 7bf8 	movw	fp, #65528	; 0xfff8
 800548c:	e7f8      	b.n	8005480 <ReadFAT+0x60>
            if(dsk->type == FAT16)
 800548e:	2a02      	cmp	r2, #2
 8005490:	d102      	bne.n	8005498 <ReadFAT+0x78>
                c = RAMreadW (gFATBuffer, p);
 8005492:	4b35      	ldr	r3, [pc, #212]	; (8005568 <ReadFAT+0x148>)
 8005494:	5ae5      	ldrh	r5, [r4, r3]
 8005496:	e7e7      	b.n	8005468 <ReadFAT+0x48>
            else if(dsk->type == FAT12)
 8005498:	2a01      	cmp	r2, #1
 800549a:	d005      	beq.n	80054a8 <ReadFAT+0x88>
            q = 0; // "q" not used for FAT16, only initialized to remove a warning
 800549c:	f04f 0a00 	mov.w	sl, #0
}   // ReadFAT
 80054a0:	4650      	mov	r0, sl
 80054a2:	b003      	add	sp, #12
 80054a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                c = RAMread (gFATBuffer, p);
 80054a8:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <ReadFAT+0x148>)
 80054aa:	5ca5      	ldrb	r5, [r4, r2]
 80054ac:	9201      	str	r2, [sp, #4]
                if (q)
 80054ae:	b106      	cbz	r6, 80054b2 <ReadFAT+0x92>
                    c >>= 4;
 80054b0:	092d      	lsrs	r5, r5, #4
                p = (p +1) & (dsk->sectorSize-1);
 80054b2:	3401      	adds	r4, #1
                if (p == 0)
 80054b4:	401c      	ands	r4, r3
 80054b6:	d118      	bne.n	80054ea <ReadFAT+0xca>
                    if (gNeedFATWrite)
 80054b8:	4b2c      	ldr	r3, [pc, #176]	; (800556c <ReadFAT+0x14c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	b953      	cbnz	r3, 80054d4 <ReadFAT+0xb4>
                    if (!MDD_SectorRead (l+1, gFATBuffer))
 80054be:	3701      	adds	r7, #1
 80054c0:	4929      	ldr	r1, [pc, #164]	; (8005568 <ReadFAT+0x148>)
 80054c2:	4638      	mov	r0, r7
 80054c4:	f001 fd6e 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 80054c8:	b968      	cbnz	r0, 80054e6 <ReadFAT+0xc6>
                gLastFATSectorRead = 0xFFFF;  // Note: It is Sector not Cluster.
 80054ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ce:	f8c9 3000 	str.w	r3, [r9]
                return ClusterFailValue;
 80054d2:	e7e5      	b.n	80054a0 <ReadFAT+0x80>
                        if(WriteFAT (dsk, 0, 0, TRUE))
 80054d4:	2301      	movs	r3, #1
 80054d6:	4622      	mov	r2, r4
 80054d8:	4621      	mov	r1, r4
 80054da:	4640      	mov	r0, r8
 80054dc:	f7ff fec4 	bl	8005268 <WriteFAT>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d0ec      	beq.n	80054be <ReadFAT+0x9e>
 80054e4:	e7dc      	b.n	80054a0 <ReadFAT+0x80>
                        gLastFATSectorRead = l +1;
 80054e6:	f8c9 7000 	str.w	r7, [r9]
                d = RAMread (gFATBuffer, p);
 80054ea:	9b01      	ldr	r3, [sp, #4]
 80054ec:	f813 a004 	ldrb.w	sl, [r3, r4]
                        if (q)
 80054f0:	b37e      	cbz	r6, 8005552 <ReadFAT+0x132>
                            c += (d <<4);
 80054f2:	eb05 150a 	add.w	r5, r5, sl, lsl #4
 80054f6:	e7b7      	b.n	8005468 <ReadFAT+0x48>
            if (gNeedFATWrite)
 80054f8:	4b1c      	ldr	r3, [pc, #112]	; (800556c <ReadFAT+0x14c>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b97b      	cbnz	r3, 800551e <ReadFAT+0xfe>
            if (!MDD_SectorRead (l, gFATBuffer))
 80054fe:	4d1a      	ldr	r5, [pc, #104]	; (8005568 <ReadFAT+0x148>)
 8005500:	4638      	mov	r0, r7
 8005502:	4629      	mov	r1, r5
 8005504:	f001 fd4e 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 8005508:	462a      	mov	r2, r5
 800550a:	2800      	cmp	r0, #0
 800550c:	d0dd      	beq.n	80054ca <ReadFAT+0xaa>
                if (dsk->type == FAT32)
 800550e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
                gLastFATSectorRead = l;
 8005512:	f8c9 7000 	str.w	r7, [r9]
                if (dsk->type == FAT32)
 8005516:	2b03      	cmp	r3, #3
 8005518:	d10a      	bne.n	8005530 <ReadFAT+0x110>
                    c = RAMreadD (gFATBuffer, p);
 800551a:	5965      	ldr	r5, [r4, r5]
 800551c:	e7a4      	b.n	8005468 <ReadFAT+0x48>
                if(WriteFAT (dsk, 0, 0, TRUE))
 800551e:	2200      	movs	r2, #0
 8005520:	2301      	movs	r3, #1
 8005522:	4640      	mov	r0, r8
 8005524:	4611      	mov	r1, r2
 8005526:	f7ff fe9f 	bl	8005268 <WriteFAT>
 800552a:	2800      	cmp	r0, #0
 800552c:	d0e7      	beq.n	80054fe <ReadFAT+0xde>
 800552e:	e7b7      	b.n	80054a0 <ReadFAT+0x80>
                    if(dsk->type == FAT16)
 8005530:	2b02      	cmp	r3, #2
 8005532:	d101      	bne.n	8005538 <ReadFAT+0x118>
                        c = RAMreadW (gFATBuffer, p);
 8005534:	5b65      	ldrh	r5, [r4, r5]
 8005536:	e797      	b.n	8005468 <ReadFAT+0x48>
                    else if (dsk->type == FAT12)
 8005538:	2b01      	cmp	r3, #1
 800553a:	d1af      	bne.n	800549c <ReadFAT+0x7c>
                        c = RAMread (gFATBuffer, p);
 800553c:	5d65      	ldrb	r5, [r4, r5]
                        if (q)
 800553e:	b106      	cbz	r6, 8005542 <ReadFAT+0x122>
                            c >>= 4;
 8005540:	092d      	lsrs	r5, r5, #4
                        p = (p +1) & (dsk->sectorSize-1);
 8005542:	f8d8 301a 	ldr.w	r3, [r8, #26]
 8005546:	3401      	adds	r4, #1
 8005548:	3b01      	subs	r3, #1
 800554a:	401c      	ands	r4, r3
                        d = RAMread (gFATBuffer, p);
 800554c:	f812 a004 	ldrb.w	sl, [r2, r4]
 8005550:	e7ce      	b.n	80054f0 <ReadFAT+0xd0>
                            c += ((d & 0x0F)<<8);
 8005552:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8005556:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
 800555a:	4455      	add	r5, sl
 800555c:	e784      	b.n	8005468 <ReadFAT+0x48>
 800555e:	bf00      	nop
 8005560:	2000020c 	.word	0x2000020c
 8005564:	20000010 	.word	0x20000010
 8005568:	200004bc 	.word	0x200004bc
 800556c:	2000020e 	.word	0x2000020e
 8005570:	0ffffff8 	.word	0x0ffffff8

08005574 <FILEget_next_cluster>:
{
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    disk = fo->dsk;
 8005578:	6806      	ldr	r6, [r0, #0]
{
 800557a:	4607      	mov	r7, r0
 800557c:	4688      	mov	r8, r1
    switch (disk->type)
 800557e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8005582:	2b01      	cmp	r3, #1
 8005584:	d021      	beq.n	80055ca <FILEget_next_cluster+0x56>
            LastClustervalue = LAST_CLUSTER_FAT16;
 8005586:	2b03      	cmp	r3, #3
 8005588:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800558c:	4d12      	ldr	r5, [pc, #72]	; (80055d8 <FILEget_next_cluster+0x64>)
 800558e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005592:	bf14      	ite	ne
 8005594:	461d      	movne	r5, r3
 8005596:	f06f 4470 	mvneq.w	r4, #4026531840	; 0xf0000000
        if((c = ReadFAT( disk, c2)) == ClusterFailValue)
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	4630      	mov	r0, r6
 800559e:	f7ff ff3f 	bl	8005420 <ReadFAT>
 80055a2:	4284      	cmp	r4, r0
 80055a4:	d016      	beq.n	80055d4 <FILEget_next_cluster+0x60>
            if ( c >= disk->maxcls)
 80055a6:	f8d6 3016 	ldr.w	r3, [r6, #22]
                error = CE_INVALID_CLUSTER;
 80055aa:	4298      	cmp	r0, r3
 80055ac:	bf2c      	ite	cs
 80055ae:	230a      	movcs	r3, #10
 80055b0:	2300      	movcc	r3, #0
                error = CE_FAT_EOF;
 80055b2:	4285      	cmp	r5, r0
 80055b4:	bf98      	it	ls
 80055b6:	233c      	movls	r3, #60	; 0x3c
    }while (--n > 0 && error == CE_GOOD);// loop end
 80055b8:	f1b8 0801 	subs.w	r8, r8, #1
        fo->ccls = c;
 80055bc:	60b8      	str	r0, [r7, #8]
    }while (--n > 0 && error == CE_GOOD);// loop end
 80055be:	d001      	beq.n	80055c4 <FILEget_next_cluster+0x50>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ea      	beq.n	800559a <FILEget_next_cluster+0x26>
} // get next cluster
 80055c4:	4618      	mov	r0, r3
 80055c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            LastClustervalue = LAST_CLUSTER_FAT12;
 80055ca:	f640 75f8 	movw	r5, #4088	; 0xff8
            ClusterFailValue  = CLUSTER_FAIL_FAT16;
 80055ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80055d2:	e7e2      	b.n	800559a <FILEget_next_cluster+0x26>
            error = CE_BAD_SECTOR_READ;
 80055d4:	2308      	movs	r3, #8
 80055d6:	e7ef      	b.n	80055b8 <FILEget_next_cluster+0x44>
 80055d8:	0ffffff8 	.word	0x0ffffff8

080055dc <Cache_File_Entry>:
{
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsk = fo->dsk;
 80055e0:	6806      	ldr	r6, [r0, #0]
{
 80055e2:	4688      	mov	r8, r1
 80055e4:	4681      	mov	r9, r0
 80055e6:	4617      	mov	r7, r2
    offset2  = (*curEntry / (dsk->sectorSize/32));
 80055e8:	f8d6 401a 	ldr.w	r4, [r6, #26]
 80055ec:	f8b8 3000 	ldrh.w	r3, [r8]
 80055f0:	0964      	lsrs	r4, r4, #5
    cluster = fo->dirclus;
 80055f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    ccls = fo->dirccls;
 80055f4:	6b81      	ldr	r1, [r0, #56]	; 0x38
    switch (dsk->type)
 80055f6:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    offset2  = (*curEntry / (dsk->sectorSize/32));
 80055fa:	fbb3 f4f4 	udiv	r4, r3, r4
    switch (dsk->type)
 80055fe:	2803      	cmp	r0, #3
    offset2  = (*curEntry / (dsk->sectorSize/32));
 8005600:	b2e4      	uxtb	r4, r4
    switch (dsk->type)
 8005602:	d111      	bne.n	8005628 <Cache_File_Entry+0x4c>
            offset2  = offset2 % (dsk->SecPerClus);   // figure out the offset
 8005604:	f896 5023 	ldrb.w	r5, [r6, #35]	; 0x23
            LastClusterLimit = LAST_CLUSTER_FAT32;
 8005608:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8005718 <Cache_File_Entry+0x13c>
            offset2  = offset2 % (dsk->SecPerClus);   // figure out the offset
 800560c:	fbb4 f0f5 	udiv	r0, r4, r5
 8005610:	fb05 4410 	mls	r4, r5, r0, r4
 8005614:	b2e4      	uxtb	r4, r4
    if(ForceRead || (*curEntry & MASK_MAX_FILE_ENTRY_LIMIT_BITS) == 0)     // only 16 entries per sector
 8005616:	b997      	cbnz	r7, 800563e <Cache_File_Entry+0x62>
 8005618:	f013 050f 	ands.w	r5, r3, #15
 800561c:	d05e      	beq.n	80056dc <Cache_File_Entry+0x100>
        dir = (DIRENTRY)((DIRENTRY)dsk->buffer) + ((*curEntry)%DIRENTRIES_PER_SECTOR);
 800561e:	6830      	ldr	r0, [r6, #0]
 8005620:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(cluster != 0)
 8005628:	b132      	cbz	r2, 8005638 <Cache_File_Entry+0x5c>
                offset2  = offset2 % (dsk->SecPerClus);   // figure out the offset
 800562a:	f896 5023 	ldrb.w	r5, [r6, #35]	; 0x23
 800562e:	fbb4 f0f5 	udiv	r0, r4, r5
 8005632:	fb05 4410 	mls	r4, r5, r0, r4
 8005636:	b2e4      	uxtb	r4, r4
            LastClusterLimit = LAST_CLUSTER_FAT16;
 8005638:	f64f 7af8 	movw	sl, #65528	; 0xfff8
 800563c:	e7eb      	b.n	8005616 <Cache_File_Entry+0x3a>
        if((offset2 == 0 && (*curEntry) >= DIRENTRIES_PER_SECTOR) || ForceRead)
 800563e:	2c00      	cmp	r4, #0
 8005640:	d051      	beq.n	80056e6 <Cache_File_Entry+0x10a>
            if(cluster == 0)
 8005642:	b12a      	cbz	r2, 8005650 <Cache_File_Entry+0x74>
 8005644:	e055      	b.n	80056f2 <Cache_File_Entry+0x116>
                    numofclus = 1;
 8005646:	2501      	movs	r5, #1
                while(numofclus)
 8005648:	b9c5      	cbnz	r5, 800567c <Cache_File_Entry+0xa0>
        if(ccls < LastClusterLimit)
 800564a:	458a      	cmp	sl, r1
 800564c:	d942      	bls.n	80056d4 <Cache_File_Entry+0xf8>
 800564e:	460a      	mov	r2, r1
            fo->dirccls = ccls; // write it back
 8005650:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
            sector = Cluster2Sector(dsk,ccls);
 8005654:	4611      	mov	r1, r2
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff fce4 	bl	8005024 <Cluster2Sector>
            if((ccls == FatRootDirClusterValue) && ((sector + offset2) >= dsk->data) && (FAT32 != dsk->type))
 800565c:	4b28      	ldr	r3, [pc, #160]	; (8005700 <Cache_File_Entry+0x124>)
            sector = Cluster2Sector(dsk,ccls);
 800565e:	4681      	mov	r9, r0
            if((ccls == FatRootDirClusterValue) && ((sector + offset2) >= dsk->data) && (FAT32 != dsk->type))
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4293      	cmp	r3, r2
 8005664:	d112      	bne.n	800568c <Cache_File_Entry+0xb0>
 8005666:	1823      	adds	r3, r4, r0
 8005668:	6932      	ldr	r2, [r6, #16]
 800566a:	4293      	cmp	r3, r2
 800566c:	d30e      	bcc.n	800568c <Cache_File_Entry+0xb0>
 800566e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8005672:	2b03      	cmp	r3, #3
 8005674:	d00a      	beq.n	800568c <Cache_File_Entry+0xb0>
            dir = ((DIRENTRY)NULL);
 8005676:	2000      	movs	r0, #0
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    ccls = ReadFAT(dsk, ccls);
 800567c:	4630      	mov	r0, r6
 800567e:	f7ff fecf 	bl	8005420 <ReadFAT>
                    if(ccls >= LastClusterLimit)
 8005682:	4582      	cmp	sl, r0
                    ccls = ReadFAT(dsk, ccls);
 8005684:	4601      	mov	r1, r0
                    if(ccls >= LastClusterLimit)
 8005686:	d925      	bls.n	80056d4 <Cache_File_Entry+0xf8>
                        numofclus--;
 8005688:	3d01      	subs	r5, #1
 800568a:	e037      	b.n	80056fc <Cache_File_Entry+0x120>
                if (gNeedDataWrite)
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <Cache_File_Entry+0x128>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	b9cb      	cbnz	r3, 80056c6 <Cache_File_Entry+0xea>
                gBufferOwner = NULL;
 8005692:	2500      	movs	r5, #0
 8005694:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <Cache_File_Entry+0x12c>)
                if ( MDD_SectorRead( sector + offset2, dsk->buffer) != TRUE) // if FALSE: sector could not be read.
 8005696:	eb04 0009 	add.w	r0, r4, r9
                gBufferOwner = NULL;
 800569a:	601d      	str	r5, [r3, #0]
                gBufferZeroed = FALSE;
 800569c:	4b1b      	ldr	r3, [pc, #108]	; (800570c <Cache_File_Entry+0x130>)
 800569e:	701d      	strb	r5, [r3, #0]
                if ( MDD_SectorRead( sector + offset2, dsk->buffer) != TRUE) // if FALSE: sector could not be read.
 80056a0:	6831      	ldr	r1, [r6, #0]
 80056a2:	f001 fc7f 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 80056a6:	2801      	cmp	r0, #1
 80056a8:	d112      	bne.n	80056d0 <Cache_File_Entry+0xf4>
 80056aa:	6830      	ldr	r0, [r6, #0]
                    if(ForceRead)    // Buffer holds all 16 root entry info. Point to the one required.
 80056ac:	b12f      	cbz	r7, 80056ba <Cache_File_Entry+0xde>
                        dir = (DIRENTRY)((DIRENTRY)dsk->buffer) + ((*curEntry)%DIRENTRIES_PER_SECTOR);
 80056ae:	f8b8 3000 	ldrh.w	r3, [r8]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
                gLastDataSectorRead = 0xFFFFFFFF;
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <Cache_File_Entry+0x134>)
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (flushData())
 80056c6:	f7ff fce9 	bl	800509c <flushData>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d0e1      	beq.n	8005692 <Cache_File_Entry+0xb6>
 80056ce:	e7d2      	b.n	8005676 <Cache_File_Entry+0x9a>
                    dir = ((DIRENTRY)NULL);
 80056d0:	4628      	mov	r0, r5
 80056d2:	e7f2      	b.n	80056ba <Cache_File_Entry+0xde>
            nextClusterIsLast = TRUE;
 80056d4:	2201      	movs	r2, #1
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <Cache_File_Entry+0x138>)
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e7cc      	b.n	8005676 <Cache_File_Entry+0x9a>
        if((offset2 == 0 && (*curEntry) >= DIRENTRIES_PER_SECTOR) || ForceRead)
 80056dc:	2c00      	cmp	r4, #0
 80056de:	d1b4      	bne.n	800564a <Cache_File_Entry+0x6e>
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d9b2      	bls.n	800564a <Cache_File_Entry+0x6e>
 80056e4:	e001      	b.n	80056ea <Cache_File_Entry+0x10e>
 80056e6:	2b0f      	cmp	r3, #15
 80056e8:	d9ab      	bls.n	8005642 <Cache_File_Entry+0x66>
            if(cluster == 0)
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d0b0      	beq.n	8005650 <Cache_File_Entry+0x74>
                if(ForceRead)
 80056ee:	2f00      	cmp	r7, #0
 80056f0:	d0a9      	beq.n	8005646 <Cache_File_Entry+0x6a>
                    numofclus = ((WORD)(*curEntry) / (WORD)(((WORD)DIRENTRIES_PER_SECTOR) * (WORD)dsk->SecPerClus));
 80056f2:	f896 5023 	ldrb.w	r5, [r6, #35]	; 0x23
 80056f6:	012d      	lsls	r5, r5, #4
 80056f8:	fbb3 f5f5 	udiv	r5, r3, r5
                        numofclus--;
 80056fc:	b2ed      	uxtb	r5, r5
 80056fe:	e7a3      	b.n	8005648 <Cache_File_Entry+0x6c>
 8005700:	20000770 	.word	0x20000770
 8005704:	2000020d 	.word	0x2000020d
 8005708:	20000208 	.word	0x20000208
 800570c:	2000020c 	.word	0x2000020c
 8005710:	2000000c 	.word	0x2000000c
 8005714:	2000020f 	.word	0x2000020f
 8005718:	0ffffff8 	.word	0x0ffffff8

0800571c <PopulateEntries>:
{
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	4616      	mov	r6, r2
 8005722:	461f      	mov	r7, r3
    fo->dirccls = fo->dirclus;
 8005724:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8005726:	4688      	mov	r8, r1
    dir = Cache_File_Entry( fo, fHandle, TRUE);
 8005728:	2201      	movs	r2, #1
 800572a:	4631      	mov	r1, r6
    fo->dirccls = fo->dirclus;
 800572c:	6383      	str	r3, [r0, #56]	; 0x38
{
 800572e:	4605      	mov	r5, r0
    dir = Cache_File_Entry( fo, fHandle, TRUE);
 8005730:	f7ff ff54 	bl	80055dc <Cache_File_Entry>
    if (dir == NULL)
 8005734:	4604      	mov	r4, r0
 8005736:	b300      	cbz	r0, 800577a <PopulateEntries+0x5e>
    strncpy(dir->DIR_Name,name,DIR_NAMECOMP);
 8005738:	220b      	movs	r2, #11
 800573a:	4641      	mov	r1, r8
 800573c:	f001 fdf4 	bl	8007328 <strncpy>
    if (mode == DIRECTORY)
 8005740:	2f12      	cmp	r7, #18
    if (Write_File_Entry(fo,fHandle) != TRUE)
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
        dir->DIR_Attr = ATTR_DIRECTORY;
 8005746:	bf0c      	ite	eq
 8005748:	2310      	moveq	r3, #16
        dir->DIR_Attr   = ATTR_ARCHIVE;
 800574a:	2320      	movne	r3, #32
 800574c:	72e3      	strb	r3, [r4, #11]
    dir->DIR_NTRes  = 0x00;              // nt reserved
 800574e:	2300      	movs	r3, #0
 8005750:	7323      	strb	r3, [r4, #12]
    dir->DIR_FstClusHI =    0x0000;      // high word of this enty's first cluster number
 8005752:	82a3      	strh	r3, [r4, #20]
    dir->DIR_FstClusLO =    0x0000;      // low word of this entry's first cluster number
 8005754:	8363      	strh	r3, [r4, #26]
    dir->DIR_FileSize =     0x0;         // file size in DWORD
 8005756:	61e3      	str	r3, [r4, #28]
    fo->size        = dir->DIR_FileSize;
 8005758:	616b      	str	r3, [r5, #20]
    fo->time        = dir->DIR_CrtTime;
 800575a:	89e3      	ldrh	r3, [r4, #14]
 800575c:	83ab      	strh	r3, [r5, #28]
    fo->date        = dir->DIR_CrtDate;
 800575e:	8a23      	ldrh	r3, [r4, #16]
 8005760:	83eb      	strh	r3, [r5, #30]
    fo->attributes  = dir->DIR_Attr;
 8005762:	7ae3      	ldrb	r3, [r4, #11]
 8005764:	862b      	strh	r3, [r5, #48]	; 0x30
    fo->entry       = *fHandle;
 8005766:	8833      	ldrh	r3, [r6, #0]
 8005768:	85ab      	strh	r3, [r5, #44]	; 0x2c
    if (Write_File_Entry(fo,fHandle) != TRUE)
 800576a:	f7ff fc6b 	bl	8005044 <Write_File_Entry>
 800576e:	2801      	cmp	r0, #1
        error = CE_WRITE_ERROR;
 8005770:	bf0c      	ite	eq
 8005772:	2000      	moveq	r0, #0
 8005774:	2009      	movne	r0, #9
 8005776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return CE_BADCACHEREAD;
 800577a:	201b      	movs	r0, #27
}
 800577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005780 <Fill_File_Object>:
    if(((*fHandle & MASK_MAX_FILE_ENTRY_LIMIT_BITS) == 0) && (*fHandle != 0)) // 4-bit mask because 16-root entries max per sector
 8005780:	880b      	ldrh	r3, [r1, #0]
{
 8005782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(((*fHandle & MASK_MAX_FILE_ENTRY_LIMIT_BITS) == 0) && (*fHandle != 0)) // 4-bit mask because 16-root entries max per sector
 8005786:	071c      	lsls	r4, r3, #28
{
 8005788:	4605      	mov	r5, r0
 800578a:	460f      	mov	r7, r1
    if(((*fHandle & MASK_MAX_FILE_ENTRY_LIMIT_BITS) == 0) && (*fHandle != 0)) // 4-bit mask because 16-root entries max per sector
 800578c:	d154      	bne.n	8005838 <Fill_File_Object+0xb8>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d052      	beq.n	8005838 <Fill_File_Object+0xb8>
        fo->dirccls = fo->dirclus;
 8005792:	6b43      	ldr	r3, [r0, #52]	; 0x34
        dir = Cache_File_Entry(fo, fHandle, TRUE);
 8005794:	2201      	movs	r2, #1
        fo->dirccls = fo->dirclus;
 8005796:	6383      	str	r3, [r0, #56]	; 0x38
        dir = Cache_File_Entry(fo, fHandle, FALSE);
 8005798:	f7ff ff20 	bl	80055dc <Cache_File_Entry>
 800579c:	4604      	mov	r4, r0
    if(dir == (DIRENTRY)NULL)
 800579e:	2800      	cmp	r0, #0
 80057a0:	d051      	beq.n	8005846 <Fill_File_Object+0xc6>
        a = dir->DIR_Name[0];
 80057a2:	7803      	ldrb	r3, [r0, #0]
        if ( a == DIR_DEL)
 80057a4:	2be5      	cmp	r3, #229	; 0xe5
 80057a6:	d04b      	beq.n	8005840 <Fill_File_Object+0xc0>
		else if ( a == DIR_EMPTY)
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d04c      	beq.n	8005846 <Fill_File_Object+0xc6>
 80057ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80057b0:	f105 0920 	add.w	r9, r5, #32
 80057b4:	f100 0a07 	add.w	sl, r0, #7
                character = dir->DIR_Name[index];
 80057b8:	f818 6f01 	ldrb.w	r6, [r8, #1]!
                character = (BYTE)toupper(character);
 80057bc:	f001 fcfa 	bl	80071b4 <__locale_ctype_ptr>
 80057c0:	4430      	add	r0, r6
 80057c2:	7843      	ldrb	r3, [r0, #1]
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	bf08      	it	eq
 80057cc:	3e20      	subeq	r6, #32
            for (index=0; index < DIR_NAMESIZE; index++)
 80057ce:	45d0      	cmp	r8, sl
                character = (BYTE)toupper(character);
 80057d0:	f809 6b01 	strb.w	r6, [r9], #1
            for (index=0; index < DIR_NAMESIZE; index++)
 80057d4:	d1f0      	bne.n	80057b8 <Fill_File_Object+0x38>
 80057d6:	f104 0808 	add.w	r8, r4, #8
 80057da:	f105 0928 	add.w	r9, r5, #40	; 0x28
 80057de:	f104 0a0b 	add.w	sl, r4, #11
                character = dir->DIR_Extension[index];
 80057e2:	f818 6b01 	ldrb.w	r6, [r8], #1
                character = (BYTE)toupper(character);
 80057e6:	f001 fce5 	bl	80071b4 <__locale_ctype_ptr>
 80057ea:	4430      	add	r0, r6
 80057ec:	7843      	ldrb	r3, [r0, #1]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	bf08      	it	eq
 80057f6:	3e20      	subeq	r6, #32
            for (index=0; index < DIR_EXTENSION; index++)
 80057f8:	45d0      	cmp	r8, sl
                character = (BYTE)toupper(character);
 80057fa:	f809 6b01 	strb.w	r6, [r9], #1
            for (index=0; index < DIR_EXTENSION; index++)
 80057fe:	d1f0      	bne.n	80057e2 <Fill_File_Object+0x62>
            fo->entry = *fHandle;
 8005800:	883b      	ldrh	r3, [r7, #0]
    TempFullClusterCalc = (entry->DIR_FstClusHI);
 8005802:	8aa2      	ldrh	r2, [r4, #20]
            fo->entry = *fHandle;
 8005804:	85ab      	strh	r3, [r5, #44]	; 0x2c
            if(a == DIR_DEL)
 8005806:	7820      	ldrb	r0, [r4, #0]
                status = NOT_FOUND;
 8005808:	f1a0 03e5 	sub.w	r3, r0, #229	; 0xe5
 800580c:	4258      	negs	r0, r3
 800580e:	4158      	adcs	r0, r3
            fo->size = (dir->DIR_FileSize);
 8005810:	69e3      	ldr	r3, [r4, #28]
 8005812:	616b      	str	r3, [r5, #20]
    TempFullClusterCalc |= entry->DIR_FstClusLO;
 8005814:	8b63      	ldrh	r3, [r4, #26]
 8005816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            fo->cluster = GetFullClusterNumber(dir); // Get Complete Cluster number.
 800581a:	606b      	str	r3, [r5, #4]
            a = dir->DIR_Attr;
 800581c:	7ae3      	ldrb	r3, [r4, #11]
            if ((a & ATTR_DIRECTORY) != 0)
 800581e:	06da      	lsls	r2, r3, #27
            fo->attributes = a;
 8005820:	862b      	strh	r3, [r5, #48]	; 0x30
                fo->time = dir->DIR_CrtTime;
 8005822:	bf4b      	itete	mi
 8005824:	89e3      	ldrhmi	r3, [r4, #14]
                fo->time = dir->DIR_WrtTime;
 8005826:	8ae3      	ldrhpl	r3, [r4, #22]
                fo->time = dir->DIR_CrtTime;
 8005828:	83ab      	strhmi	r3, [r5, #28]
                fo->time = dir->DIR_WrtTime;
 800582a:	83ab      	strhpl	r3, [r5, #28]
                fo->date = dir->DIR_CrtDate;
 800582c:	bf4c      	ite	mi
 800582e:	8a23      	ldrhmi	r3, [r4, #16]
                fo->date = dir->DIR_WrtDate;
 8005830:	8b23      	ldrhpl	r3, [r4, #24]
 8005832:	83eb      	strh	r3, [r5, #30]
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dir = Cache_File_Entry(fo, fHandle, FALSE);
 8005838:	2200      	movs	r2, #0
 800583a:	4639      	mov	r1, r7
 800583c:	4628      	mov	r0, r5
 800583e:	e7ab      	b.n	8005798 <Fill_File_Object+0x18>
            status = NOT_FOUND;
 8005840:	2001      	movs	r0, #1
 8005842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        status = NO_MORE;
 8005846:	2002      	movs	r0, #2
} // Fill_File_Object
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800584c <FILEfind>:
{
 800584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    compareAttrib = 0xFFFF ^ foCompareTo->attributes;                // Attribute to be compared as per application layer request
 8005850:	8e0f      	ldrh	r7, [r1, #48]	; 0x30
{
 8005852:	b087      	sub	sp, #28
 8005854:	4699      	mov	r9, r3
    WORD   fHandle = foDest->entry;                  // current entry counter
 8005856:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
{
 8005858:	9201      	str	r2, [sp, #4]
    compareAttrib = 0xFFFF ^ foCompareTo->attributes;                // Attribute to be compared as per application layer request
 800585a:	43ff      	mvns	r7, r7
    foDest->dirccls = foDest->dirclus;
 800585c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    WORD   fHandle = foDest->entry;                  // current entry counter
 800585e:	f10d 0818 	add.w	r8, sp, #24
{
 8005862:	4604      	mov	r4, r0
 8005864:	460e      	mov	r6, r1
    foDest->dirccls = foDest->dirclus;
 8005866:	6382      	str	r2, [r0, #56]	; 0x38
    compareAttrib = 0xFFFF ^ foCompareTo->attributes;                // Attribute to be compared as per application layer request
 8005868:	b2ba      	uxth	r2, r7
    WORD   fHandle = foDest->entry;                  // current entry counter
 800586a:	f828 3d02 	strh.w	r3, [r8, #-2]!
    compareAttrib = 0xFFFF ^ foCompareTo->attributes;                // Attribute to be compared as per application layer request
 800586e:	9200      	str	r2, [sp, #0]
    if(fHandle == 0)
 8005870:	bb43      	cbnz	r3, 80058c4 <FILEfind+0x78>
        if(Cache_File_Entry(foDest, &fHandle, TRUE) == NULL)
 8005872:	2201      	movs	r2, #1
 8005874:	4641      	mov	r1, r8
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff feb0 	bl	80055dc <Cache_File_Entry>
 800587c:	2800      	cmp	r0, #0
 800587e:	f000 80b1 	beq.w	80059e4 <FILEfind+0x198>
 8005882:	f104 032b 	add.w	r3, r4, #43	; 0x2b
{
 8005886:	250b      	movs	r5, #11
 8005888:	9302      	str	r3, [sp, #8]
                state = Fill_File_Object(foDest, &fHandle);
 800588a:	4641      	mov	r1, r8
 800588c:	4620      	mov	r0, r4
 800588e:	f7ff ff77 	bl	8005780 <Fill_File_Object>
                if(state == NO_MORE) // Reached the end of available files. Comparision over and file not found so quit.
 8005892:	2802      	cmp	r0, #2
 8005894:	d012      	beq.n	80058bc <FILEfind+0x70>
            if(state == FOUND) // Validate the correct matching of filled file data with the required(to be found) one.
 8005896:	2800      	cmp	r0, #0
 8005898:	f040 809f 	bne.w	80059da <FILEfind+0x18e>
                attrib = foDest->attributes;
 800589c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
                attrib &= ATTR_MASK;
 800589e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                switch (mode)
 80058a2:	f1b9 0f00 	cmp.w	r9, #0
 80058a6:	d010      	beq.n	80058ca <FILEfind+0x7e>
 80058a8:	f1b9 0f01 	cmp.w	r9, #1
 80058ac:	d035      	beq.n	800591a <FILEfind+0xce>
            fHandle++;
 80058ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80058b2:	3301      	adds	r3, #1
 80058b4:	f8ad 3016 	strh.w	r3, [sp, #22]
            if(statusB!=CE_GOOD) //First time entry always here
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	d1e6      	bne.n	800588a <FILEfind+0x3e>
} // FILEFind
 80058bc:	4628      	mov	r0, r5
 80058be:	b007      	add	sp, #28
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((fHandle & MASK_MAX_FILE_ENTRY_LIMIT_BITS) != 0)          // Maximum 16 entries possible
 80058c4:	071b      	lsls	r3, r3, #28
 80058c6:	d0dc      	beq.n	8005882 <FILEfind+0x36>
 80058c8:	e7d3      	b.n	8005872 <FILEfind+0x26>
                        if(attrib != ATTR_VOLUME)
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d0ef      	beq.n	80058ae <FILEfind+0x62>
 80058ce:	f104 0a20 	add.w	sl, r4, #32
 80058d2:	f106 0520 	add.w	r5, r6, #32
                                character = foDest->name[index];
 80058d6:	f81a bb01 	ldrb.w	fp, [sl], #1
                                test = foCompareTo->name[index];
 80058da:	f815 7b01 	ldrb.w	r7, [r5], #1
                                if(tolower(character) != tolower(test))
 80058de:	f001 fc69 	bl	80071b4 <__locale_ctype_ptr>
 80058e2:	4458      	add	r0, fp
 80058e4:	7840      	ldrb	r0, [r0, #1]
 80058e6:	f000 0003 	and.w	r0, r0, #3
 80058ea:	2801      	cmp	r0, #1
 80058ec:	bf08      	it	eq
 80058ee:	f10b 0b20 	addeq.w	fp, fp, #32
 80058f2:	f001 fc5f 	bl	80071b4 <__locale_ctype_ptr>
 80058f6:	4438      	add	r0, r7
 80058f8:	7840      	ldrb	r0, [r0, #1]
 80058fa:	f000 0003 	and.w	r0, r0, #3
 80058fe:	2801      	cmp	r0, #1
 8005900:	bf0c      	ite	eq
 8005902:	f107 0320 	addeq.w	r3, r7, #32
 8005906:	463b      	movne	r3, r7
 8005908:	459b      	cmp	fp, r3
 800590a:	d001      	beq.n	8005910 <FILEfind+0xc4>
                                    statusB = CE_FILE_NOT_FOUND; // Nope its not a match
 800590c:	250b      	movs	r5, #11
 800590e:	e7ce      	b.n	80058ae <FILEfind+0x62>
                            for(index = 0; index < DIR_NAMECOMP; index++)
 8005910:	9b02      	ldr	r3, [sp, #8]
 8005912:	4553      	cmp	r3, sl
 8005914:	d1df      	bne.n	80058d6 <FILEfind+0x8a>
                    statusB = CE_GOOD;
 8005916:	2500      	movs	r5, #0
 8005918:	e7c9      	b.n	80058ae <FILEfind+0x62>
                        if(((attrib & compareAttrib) == 0) && (attrib != ATTR_LONG_NAME))
 800591a:	9a00      	ldr	r2, [sp, #0]
 800591c:	421a      	tst	r2, r3
 800591e:	d1c6      	bne.n	80058ae <FILEfind+0x62>
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d0c4      	beq.n	80058ae <FILEfind+0x62>
                            if (foCompareTo->name[0] != '*')   //If "*" is passed for comparion as 1st char then don't proceed. Go back, file alreay found.
 8005924:	f896 3020 	ldrb.w	r3, [r6, #32]
 8005928:	2b2a      	cmp	r3, #42	; 0x2a
 800592a:	d114      	bne.n	8005956 <FILEfind+0x10a>
                            statusB = CE_GOOD;                 // Indicate the already filled file data is correct and go back
 800592c:	2500      	movs	r5, #0
                            if((foCompareTo->name[8] != '*') && (statusB == CE_GOOD))
 800592e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8005932:	2b2a      	cmp	r3, #42	; 0x2a
 8005934:	d0bb      	beq.n	80058ae <FILEfind+0x62>
 8005936:	2d00      	cmp	r5, #0
 8005938:	d1b9      	bne.n	80058ae <FILEfind+0x62>
 800593a:	f04f 0a28 	mov.w	sl, #40	; 0x28
                                    test = foCompareTo->name[index];
 800593e:	f816 500a 	ldrb.w	r5, [r6, sl]
                                    if (test == '*')
 8005942:	2d2a      	cmp	r5, #42	; 0x2a
 8005944:	d0e7      	beq.n	8005916 <FILEfind+0xca>
                                    if (test != '?')
 8005946:	2d3f      	cmp	r5, #63	; 0x3f
 8005948:	d12c      	bne.n	80059a4 <FILEfind+0x158>
 800594a:	f10a 0a01 	add.w	sl, sl, #1
                                for (index = 8; index < DIR_NAMECOMP; index++)
 800594e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8005952:	d1f4      	bne.n	800593e <FILEfind+0xf2>
 8005954:	e7df      	b.n	8005916 <FILEfind+0xca>
 8005956:	f04f 0b20 	mov.w	fp, #32
                                    test = foCompareTo->name[index];
 800595a:	f816 500b 	ldrb.w	r5, [r6, fp]
                                    if (test == '*')
 800595e:	2d2a      	cmp	r5, #42	; 0x2a
 8005960:	d0e4      	beq.n	800592c <FILEfind+0xe0>
                                    if (test != '?')
 8005962:	2d3f      	cmp	r5, #63	; 0x3f
 8005964:	d105      	bne.n	8005972 <FILEfind+0x126>
 8005966:	f10b 0b01 	add.w	fp, fp, #1
                                for (index = 0; index < DIR_NAMESIZE; index++)
 800596a:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800596e:	d1f4      	bne.n	800595a <FILEfind+0x10e>
 8005970:	e7dc      	b.n	800592c <FILEfind+0xe0>
                                    character = foDest->name[index];
 8005972:	f814 a00b 	ldrb.w	sl, [r4, fp]
                                        if(tolower(character) != tolower(test))
 8005976:	f001 fc1d 	bl	80071b4 <__locale_ctype_ptr>
 800597a:	4450      	add	r0, sl
 800597c:	7841      	ldrb	r1, [r0, #1]
 800597e:	f001 0103 	and.w	r1, r1, #3
 8005982:	2901      	cmp	r1, #1
 8005984:	bf08      	it	eq
 8005986:	f10a 0a20 	addeq.w	sl, sl, #32
 800598a:	f001 fc13 	bl	80071b4 <__locale_ctype_ptr>
 800598e:	4428      	add	r0, r5
 8005990:	7841      	ldrb	r1, [r0, #1]
 8005992:	f001 0103 	and.w	r1, r1, #3
 8005996:	2901      	cmp	r1, #1
 8005998:	bf08      	it	eq
 800599a:	3520      	addeq	r5, #32
 800599c:	45aa      	cmp	sl, r5
 800599e:	d0e2      	beq.n	8005966 <FILEfind+0x11a>
                                            statusB = CE_FILE_NOT_FOUND; // it's not a match
 80059a0:	250b      	movs	r5, #11
 80059a2:	e7c4      	b.n	800592e <FILEfind+0xe2>
                                    character = foDest->name[index];
 80059a4:	f814 300a 	ldrb.w	r3, [r4, sl]
 80059a8:	9303      	str	r3, [sp, #12]
                                        if(tolower(character) != tolower(test))
 80059aa:	f001 fc03 	bl	80071b4 <__locale_ctype_ptr>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	4418      	add	r0, r3
 80059b2:	7841      	ldrb	r1, [r0, #1]
 80059b4:	f001 0103 	and.w	r1, r1, #3
 80059b8:	2901      	cmp	r1, #1
 80059ba:	bf08      	it	eq
 80059bc:	3320      	addeq	r3, #32
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	f001 fbf8 	bl	80071b4 <__locale_ctype_ptr>
 80059c4:	4428      	add	r0, r5
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	7841      	ldrb	r1, [r0, #1]
 80059ca:	f001 0103 	and.w	r1, r1, #3
 80059ce:	2901      	cmp	r1, #1
 80059d0:	bf08      	it	eq
 80059d2:	3520      	addeq	r5, #32
 80059d4:	42ab      	cmp	r3, r5
 80059d6:	d0b8      	beq.n	800594a <FILEfind+0xfe>
 80059d8:	e798      	b.n	800590c <FILEfind+0xc0>
                if(cmd == LOOK_FOR_EMPTY_ENTRY)
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f47f af66 	bne.w	80058ae <FILEfind+0x62>
 80059e2:	e798      	b.n	8005916 <FILEfind+0xca>
 80059e4:	251b      	movs	r5, #27
 80059e6:	e769      	b.n	80058bc <FILEfind+0x70>

080059e8 <FILEopen>:
{
 80059e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dsk = (DISK *)(fo->dsk);
 80059ec:	6807      	ldr	r7, [r0, #0]
{
 80059ee:	4604      	mov	r4, r0
 80059f0:	460e      	mov	r6, r1
 80059f2:	4690      	mov	r8, r2
    if (dsk->mount == FALSE)
 80059f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d055      	beq.n	8005aa8 <FILEopen+0xc0>
        fo->dirccls = fo->dirclus;
 80059fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059fe:	6383      	str	r3, [r0, #56]	; 0x38
        if (*fHandle == 0)
 8005a00:	880b      	ldrh	r3, [r1, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d133      	bne.n	8005a6e <FILEopen+0x86>
            if (Cache_File_Entry(fo, fHandle, TRUE) == NULL)
 8005a06:	2201      	movs	r2, #1
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f7ff fde6 	bl	80055dc <Cache_File_Entry>
 8005a10:	b380      	cbz	r0, 8005a74 <FILEopen+0x8c>
    CETYPE    error = CE_GOOD;
 8005a12:	2500      	movs	r5, #0
        r = Fill_File_Object(fo, fHandle);
 8005a14:	4631      	mov	r1, r6
 8005a16:	4620      	mov	r0, r4
 8005a18:	f7ff feb2 	bl	8005780 <Fill_File_Object>
        if (r != FOUND)
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d145      	bne.n	8005aac <FILEopen+0xc4>
            fo->ccls = fo->cluster;     // first cluster
 8005a20:	6861      	ldr	r1, [r4, #4]
            fo->seek = 0;               // first byte in file
 8005a22:	6120      	str	r0, [r4, #16]
            fo->sec = 0;                // first sector in the cluster
 8005a24:	81a0      	strh	r0, [r4, #12]
            fo->pos = 0;                // first byte in sector/cluster
 8005a26:	81e0      	strh	r0, [r4, #14]
                l = Cluster2Sector(dsk,fo->ccls);
 8005a28:	4638      	mov	r0, r7
            fo->ccls = fo->cluster;     // first cluster
 8005a2a:	60a1      	str	r1, [r4, #8]
                l = Cluster2Sector(dsk,fo->ccls);
 8005a2c:	f7ff fafa 	bl	8005024 <Cluster2Sector>
                if (gNeedDataWrite)
 8005a30:	4b1f      	ldr	r3, [pc, #124]	; (8005ab0 <FILEopen+0xc8>)
                l = Cluster2Sector(dsk,fo->ccls);
 8005a32:	4606      	mov	r6, r0
                if (gNeedDataWrite)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b9fb      	cbnz	r3, 8005a78 <FILEopen+0x90>
                gBufferOwner = fo;
 8005a38:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <FILEopen+0xcc>)
                if (gLastDataSectorRead != l)
 8005a3a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005abc <FILEopen+0xd4>
                gBufferOwner = fo;
 8005a3e:	601c      	str	r4, [r3, #0]
                if (gLastDataSectorRead != l)
 8005a40:	f8d9 3000 	ldr.w	r3, [r9]
 8005a44:	429e      	cmp	r6, r3
 8005a46:	d11d      	bne.n	8005a84 <FILEopen+0x9c>
            fo->flags.FileWriteEOF = FALSE;
 8005a48:	7e23      	ldrb	r3, [r4, #24]
            if (type == 'w' || type == 'a')
 8005a4a:	f1b8 0f77 	cmp.w	r8, #119	; 0x77
            fo->flags.FileWriteEOF = FALSE;
 8005a4e:	f36f 0382 	bfc	r3, #2, #1
 8005a52:	7623      	strb	r3, [r4, #24]
 8005a54:	b2db      	uxtb	r3, r3
            if (type == 'w' || type == 'a')
 8005a56:	d002      	beq.n	8005a5e <FILEopen+0x76>
 8005a58:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
 8005a5c:	d11f      	bne.n	8005a9e <FILEopen+0xb6>
                fo->flags.read = 0;
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	f36f 0341 	bfc	r3, #1, #1
                fo->flags.read = 1;
 8005a66:	7623      	strb	r3, [r4, #24]
} // -- FILEopen
 8005a68:	4628      	mov	r0, r5
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ((*fHandle & 0xf) != 0)
 8005a6e:	071b      	lsls	r3, r3, #28
 8005a70:	d0cf      	beq.n	8005a12 <FILEopen+0x2a>
 8005a72:	e7c8      	b.n	8005a06 <FILEopen+0x1e>
                error = CE_BADCACHEREAD;
 8005a74:	251b      	movs	r5, #27
 8005a76:	e7cd      	b.n	8005a14 <FILEopen+0x2c>
                    if (flushData())
 8005a78:	f7ff fb10 	bl	800509c <flushData>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d0db      	beq.n	8005a38 <FILEopen+0x50>
                        return CE_WRITE_ERROR;
 8005a80:	2509      	movs	r5, #9
 8005a82:	e7f1      	b.n	8005a68 <FILEopen+0x80>
                    gBufferZeroed = FALSE;
 8005a84:	2200      	movs	r2, #0
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <FILEopen+0xd0>)
                    if ( !MDD_SectorRead( l, dsk->buffer))
 8005a88:	4630      	mov	r0, r6
                    gBufferZeroed = FALSE;
 8005a8a:	701a      	strb	r2, [r3, #0]
                    if ( !MDD_SectorRead( l, dsk->buffer))
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	f001 fa89 	bl	8006fa4 <MDD_SDSPI_SectorRead>
                        error = CE_BAD_SECTOR_READ;
 8005a92:	2800      	cmp	r0, #0
                    gLastDataSectorRead = l;
 8005a94:	f8c9 6000 	str.w	r6, [r9]
                        error = CE_BAD_SECTOR_READ;
 8005a98:	bf08      	it	eq
 8005a9a:	2508      	moveq	r5, #8
 8005a9c:	e7d4      	b.n	8005a48 <FILEopen+0x60>
                fo->flags.read = 1;
 8005a9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	e7de      	b.n	8005a66 <FILEopen+0x7e>
        error = CE_NOT_INIT;
 8005aa8:	2507      	movs	r5, #7
 8005aaa:	e7dd      	b.n	8005a68 <FILEopen+0x80>
            error = CE_FILE_NOT_FOUND;
 8005aac:	250b      	movs	r5, #11
 8005aae:	e7db      	b.n	8005a68 <FILEopen+0x80>
 8005ab0:	2000020d 	.word	0x2000020d
 8005ab4:	20000208 	.word	0x20000208
 8005ab8:	2000020c 	.word	0x2000020c
 8005abc:	2000000c 	.word	0x2000000c

08005ac0 <LoadDirAttrib>:
{
 8005ac0:	b538      	push	{r3, r4, r5, lr}
    fo->dirccls = fo->dirclus;
 8005ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dir = Cache_File_Entry( fo, fHandle, TRUE);
 8005ac4:	2201      	movs	r2, #1
{
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460d      	mov	r5, r1
    fo->dirccls = fo->dirclus;
 8005aca:	6383      	str	r3, [r0, #56]	; 0x38
    dir = Cache_File_Entry( fo, fHandle, TRUE);
 8005acc:	f7ff fd86 	bl	80055dc <Cache_File_Entry>
    if (dir == NULL)
 8005ad0:	b908      	cbnz	r0, 8005ad6 <LoadDirAttrib+0x16>
        return NULL;
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	bd38      	pop	{r3, r4, r5, pc}
    a = dir->DIR_Name[0];
 8005ad6:	7803      	ldrb	r3, [r0, #0]
    if(a == DIR_EMPTY)
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0fa      	beq.n	8005ad2 <LoadDirAttrib+0x12>
        if ( a == DIR_DEL)
 8005adc:	2be5      	cmp	r3, #229	; 0xe5
 8005ade:	d10a      	bne.n	8005af6 <LoadDirAttrib+0x36>
 8005ae0:	e7f7      	b.n	8005ad2 <LoadDirAttrib+0x12>
                (*fHandle)++;
 8005ae2:	882b      	ldrh	r3, [r5, #0]
                dir = Cache_File_Entry( fo, fHandle, FALSE);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4620      	mov	r0, r4
                (*fHandle)++;
 8005aea:	3301      	adds	r3, #1
 8005aec:	802b      	strh	r3, [r5, #0]
                dir = Cache_File_Entry( fo, fHandle, FALSE);
 8005aee:	f7ff fd75 	bl	80055dc <Cache_File_Entry>
                if (dir == NULL)
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d0ed      	beq.n	8005ad2 <LoadDirAttrib+0x12>
                a = dir->DIR_Attr;
 8005af6:	7ac3      	ldrb	r3, [r0, #11]
            while(a == ATTR_LONG_NAME)
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d0f2      	beq.n	8005ae2 <LoadDirAttrib+0x22>
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
	...

08005b00 <FATfindEmptyCluster>:
{
 8005b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    disk = fo->dsk;
 8005b04:	f8d0 8000 	ldr.w	r8, [r0]
    c = fo->ccls;
 8005b08:	6885      	ldr	r5, [r0, #8]
    switch (disk->type)
 8005b0a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d027      	beq.n	8005b62 <FATfindEmptyCluster+0x62>
            ClusterFailValue = CLUSTER_FAIL_FAT16;
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8005b18:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005b1c:	4e16      	ldr	r6, [pc, #88]	; (8005b78 <FATfindEmptyCluster+0x78>)
 8005b1e:	bf0c      	ite	eq
 8005b20:	f06f 4770 	mvneq.w	r7, #4026531840	; 0xf0000000
 8005b24:	461e      	movne	r6, r3
 8005b26:	2d02      	cmp	r5, #2
    ReadFAT(disk, c);
 8005b28:	4640      	mov	r0, r8
 8005b2a:	bf38      	it	cc
 8005b2c:	2502      	movcc	r5, #2
 8005b2e:	462c      	mov	r4, r5
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7ff fc75 	bl	8005420 <ReadFAT>
        if ( (value = ReadFAT(disk, c)) == ClusterFailValue)
 8005b36:	4621      	mov	r1, r4
 8005b38:	4640      	mov	r0, r8
 8005b3a:	f7ff fc71 	bl	8005420 <ReadFAT>
 8005b3e:	4287      	cmp	r7, r0
 8005b40:	d014      	beq.n	8005b6c <FATfindEmptyCluster+0x6c>
        if (value == CLUSTER_EMPTY)
 8005b42:	b158      	cbz	r0, 8005b5c <FATfindEmptyCluster+0x5c>
        if (value == EndClusterLimit || c >= (disk->maxcls+2))
 8005b44:	4286      	cmp	r6, r0
 8005b46:	d013      	beq.n	8005b70 <FATfindEmptyCluster+0x70>
 8005b48:	f8d8 3016 	ldr.w	r3, [r8, #22]
        c++;    // check next cluster in FAT
 8005b4c:	3401      	adds	r4, #1
        if (value == EndClusterLimit || c >= (disk->maxcls+2))
 8005b4e:	3302      	adds	r3, #2
 8005b50:	429c      	cmp	r4, r3
 8005b52:	d20d      	bcs.n	8005b70 <FATfindEmptyCluster+0x70>
        if ( c == curcls)
 8005b54:	42a5      	cmp	r5, r4
 8005b56:	d009      	beq.n	8005b6c <FATfindEmptyCluster+0x6c>
    while(c)
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	d1ec      	bne.n	8005b36 <FATfindEmptyCluster+0x36>
}
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ClusterFailValue = CLUSTER_FAIL_FAT16;
 8005b62:	f64f 77ff 	movw	r7, #65535	; 0xffff
            EndClusterLimit = END_CLUSTER_FAT12;
 8005b66:	f640 76f7 	movw	r6, #4087	; 0xff7
 8005b6a:	e7dc      	b.n	8005b26 <FATfindEmptyCluster+0x26>
            c = 0;
 8005b6c:	2400      	movs	r4, #0
    return(c);
 8005b6e:	e7f5      	b.n	8005b5c <FATfindEmptyCluster+0x5c>
        if ( c == curcls)
 8005b70:	2d02      	cmp	r5, #2
 8005b72:	d0fb      	beq.n	8005b6c <FATfindEmptyCluster+0x6c>
 8005b74:	2402      	movs	r4, #2
 8005b76:	e7de      	b.n	8005b36 <FATfindEmptyCluster+0x36>
 8005b78:	0ffffff7 	.word	0x0ffffff7

08005b7c <FAT_erase_cluster_chain>:
{
 8005b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    switch (dsk->type)
 8005b80:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
{
 8005b84:	4607      	mov	r7, r0
 8005b86:	460e      	mov	r6, r1
    switch (dsk->type)
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d02e      	beq.n	8005bea <FAT_erase_cluster_chain+0x6e>
            ClusterFailValue = CLUSTER_FAIL_FAT16;
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <FAT_erase_cluster_chain+0x80>)
 8005b90:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005b94:	f64f 79f8 	movw	r9, #65528	; 0xfff8
 8005b98:	bf04      	itt	eq
 8005b9a:	f06f 4570 	mvneq.w	r5, #4026531840	; 0xf0000000
 8005b9e:	4699      	moveq	r9, r3
    if(cluster == 0 || cluster == 1)  // Cluster assigned can't be "0" and "1"
 8005ba0:	2f01      	cmp	r7, #1
 8005ba2:	d929      	bls.n	8005bf8 <FAT_erase_cluster_chain+0x7c>
            if((c = ReadFAT( dsk, cluster)) == ClusterFailValue)
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff fc3a 	bl	8005420 <ReadFAT>
 8005bac:	4285      	cmp	r5, r0
 8005bae:	4680      	mov	r8, r0
 8005bb0:	d020      	beq.n	8005bf4 <FAT_erase_cluster_chain+0x78>
                if(c == 0 || c == 1)  // Cluster assigned can't be "0" and "1"
 8005bb2:	2801      	cmp	r0, #1
 8005bb4:	d920      	bls.n	8005bf8 <FAT_erase_cluster_chain+0x7c>
                    if(WriteFAT(dsk, cluster, CLUSTER_EMPTY, FALSE) == ClusterFailValue)
 8005bb6:	2300      	movs	r3, #0
                        status = Exit;
 8005bb8:	4581      	cmp	r9, r0
 8005bba:	bf94      	ite	ls
 8005bbc:	2402      	movls	r4, #2
 8005bbe:	2400      	movhi	r4, #0
                    if(WriteFAT(dsk, cluster, CLUSTER_EMPTY, FALSE) == ClusterFailValue)
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f7ff fb4f 	bl	8005268 <WriteFAT>
 8005bca:	4285      	cmp	r5, r0
 8005bcc:	d012      	beq.n	8005bf4 <FAT_erase_cluster_chain+0x78>
 8005bce:	4647      	mov	r7, r8
        while(status == Good)
 8005bd0:	2c00      	cmp	r4, #0
 8005bd2:	d0e7      	beq.n	8005ba4 <FAT_erase_cluster_chain+0x28>
    WriteFAT (dsk, 0, 0, TRUE);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4630      	mov	r0, r6
 8005bda:	4611      	mov	r1, r2
 8005bdc:	f7ff fb44 	bl	8005268 <WriteFAT>
 8005be0:	1ea3      	subs	r3, r4, #2
 8005be2:	4258      	negs	r0, r3
 8005be4:	4158      	adcs	r0, r3
} // Erase cluster
 8005be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            ClusterFailValue = CLUSTER_FAIL_FAT16; // FAT16 value itself
 8005bea:	f64f 75ff 	movw	r5, #65535	; 0xffff
            c2 =  LAST_CLUSTER_FAT12;
 8005bee:	f640 79f8 	movw	r9, #4088	; 0xff8
 8005bf2:	e7d5      	b.n	8005ba0 <FAT_erase_cluster_chain+0x24>
                status = Fail;
 8005bf4:	2401      	movs	r4, #1
 8005bf6:	e7ed      	b.n	8005bd4 <FAT_erase_cluster_chain+0x58>
                    status = Exit;
 8005bf8:	2402      	movs	r4, #2
 8005bfa:	e7eb      	b.n	8005bd4 <FAT_erase_cluster_chain+0x58>
 8005bfc:	0ffffff8 	.word	0x0ffffff8

08005c00 <FILEerase>:
    fo->dirccls = clus;
 8005c00:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8005c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c06:	4690      	mov	r8, r2
    fo->dirccls = clus;
 8005c08:	6383      	str	r3, [r0, #56]	; 0x38
    dir = Cache_File_Entry(fo, fHandle, TRUE);
 8005c0a:	2201      	movs	r2, #1
{
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	468a      	mov	sl, r1
    disk = fo->dsk;
 8005c10:	6807      	ldr	r7, [r0, #0]
 8005c12:	4e18      	ldr	r6, [pc, #96]	; (8005c74 <FILEerase+0x74>)
    dir = Cache_File_Entry(fo, fHandle, TRUE);
 8005c14:	f7ff fce2 	bl	80055dc <Cache_File_Entry>
    if (dir == NULL)
 8005c18:	b920      	cbnz	r0, 8005c24 <FILEerase+0x24>
        FSerrno = CE_ERASE_FAIL;
 8005c1a:	2301      	movs	r3, #1
        return CE_BADCACHEREAD;
 8005c1c:	201b      	movs	r0, #27
        FSerrno = CE_ERASE_FAIL;
 8005c1e:	7033      	strb	r3, [r6, #0]
        return CE_BADCACHEREAD;
 8005c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a = dir->DIR_Name[0];
 8005c24:	7803      	ldrb	r3, [r0, #0]
    if(dir == (DIRENTRY)NULL || a == DIR_EMPTY)
 8005c26:	b31b      	cbz	r3, 8005c70 <FILEerase+0x70>
        if ( a == DIR_DEL)
 8005c28:	2be5      	cmp	r3, #229	; 0xe5
 8005c2a:	d021      	beq.n	8005c70 <FILEerase+0x70>
            dir->DIR_Name[0] = DIR_DEL; // mark as deleted
 8005c2c:	23e5      	movs	r3, #229	; 0xe5
    TempFullClusterCalc = (entry->DIR_FstClusHI);
 8005c2e:	f8b0 9014 	ldrh.w	r9, [r0, #20]
    TempFullClusterCalc |= entry->DIR_FstClusLO;
 8005c32:	8b44      	ldrh	r4, [r0, #26]
            if(status != CE_GOOD || !(Write_File_Entry( fo, fHandle)))
 8005c34:	4651      	mov	r1, sl
            dir->DIR_Name[0] = DIR_DEL; // mark as deleted
 8005c36:	7003      	strb	r3, [r0, #0]
            if(status != CE_GOOD || !(Write_File_Entry( fo, fHandle)))
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f7ff fa03 	bl	8005044 <Write_File_Entry>
 8005c3e:	b920      	cbnz	r0, 8005c4a <FILEerase+0x4a>
                status = CE_ERASE_FAIL;
 8005c40:	2001      	movs	r0, #1
        FSerrno = CE_ERASE_FAIL;
 8005c42:	2301      	movs	r3, #1
 8005c44:	7033      	strb	r3, [r6, #0]
}
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (clus != FatRootDirClusterValue) //
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <FILEerase+0x78>)
    TempFullClusterCalc |= entry->DIR_FstClusLO;
 8005c4c:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
                if (clus != FatRootDirClusterValue) //
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4283      	cmp	r3, r0
 8005c54:	d103      	bne.n	8005c5e <FILEerase+0x5e>
        FSerrno = CE_GOOD;
 8005c56:	2000      	movs	r0, #0
 8005c58:	7030      	strb	r0, [r6, #0]
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if(EraseClusters)
 8005c5e:	f1b8 0f00 	cmp.w	r8, #0
 8005c62:	d0f8      	beq.n	8005c56 <FILEerase+0x56>
                        status = ((FAT_erase_cluster_chain(clus, disk)) ? CE_GOOD : CE_ERASE_FAIL);
 8005c64:	4639      	mov	r1, r7
 8005c66:	f7ff ff89 	bl	8005b7c <FAT_erase_cluster_chain>
    if (status == CE_GOOD)
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d1f3      	bne.n	8005c56 <FILEerase+0x56>
 8005c6e:	e7e7      	b.n	8005c40 <FILEerase+0x40>
        status = CE_FILE_NOT_FOUND;
 8005c70:	200b      	movs	r0, #11
 8005c72:	e7e6      	b.n	8005c42 <FILEerase+0x42>
 8005c74:	200007ea 	.word	0x200007ea
 8005c78:	20000770 	.word	0x20000770

08005c7c <FSfclose>:
{
 8005c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    FSerrno = CE_GOOD;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4d28      	ldr	r5, [pc, #160]	; (8005d24 <FSfclose+0xa8>)
{
 8005c82:	4604      	mov	r4, r0
    FSerrno = CE_GOOD;
 8005c84:	702b      	strb	r3, [r5, #0]
 8005c86:	462e      	mov	r6, r5
    fHandle = fo->entry;
 8005c88:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8005c8a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(fo->flags.write)
 8005c8e:	7e03      	ldrb	r3, [r0, #24]
 8005c90:	f013 0f01 	tst.w	r3, #1
 8005c94:	d040      	beq.n	8005d18 <FSfclose+0x9c>
        if (gNeedDataWrite)
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <FSfclose+0xac>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b143      	cbz	r3, 8005cae <FSfclose+0x32>
            if (flushData())
 8005c9c:	f7ff f9fe 	bl	800509c <flushData>
 8005ca0:	b128      	cbz	r0, 8005cae <FSfclose+0x32>
                FSerrno = CE_WRITE_ERROR;
 8005ca2:	2309      	movs	r3, #9
 8005ca4:	702b      	strb	r3, [r5, #0]
            return error;
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
} // FSfclose
 8005caa:	b002      	add	sp, #8
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
        WriteFAT (fo->dsk, 0, 0, TRUE);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	6820      	ldr	r0, [r4, #0]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	f7ff fad7 	bl	8005268 <WriteFAT>
        dir = LoadDirAttrib(fo, &fHandle);
 8005cba:	f10d 0106 	add.w	r1, sp, #6
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f7ff fefe 	bl	8005ac0 <LoadDirAttrib>
        if (dir == NULL)
 8005cc4:	b910      	cbnz	r0, 8005ccc <FSfclose+0x50>
            FSerrno = CE_BADCACHEREAD;
 8005cc6:	231b      	movs	r3, #27
 8005cc8:	7033      	strb	r3, [r6, #0]
 8005cca:	e7ec      	b.n	8005ca6 <FSfclose+0x2a>
        dir->DIR_FileSize = fo->size;
 8005ccc:	6963      	ldr	r3, [r4, #20]
        if(Write_File_Entry(fo,&fHandle))
 8005cce:	f10d 0106 	add.w	r1, sp, #6
        dir->DIR_FileSize = fo->size;
 8005cd2:	61c3      	str	r3, [r0, #28]
        dir->DIR_Attr = fo->attributes;
 8005cd4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8005cd6:	72c3      	strb	r3, [r0, #11]
        if(Write_File_Entry(fo,&fHandle))
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f7ff f9b3 	bl	8005044 <Write_File_Entry>
 8005cde:	b9c8      	cbnz	r0, 8005d14 <FSfclose+0x98>
            FSerrno = CE_WRITE_ERROR;
 8005ce0:	2309      	movs	r3, #9
            error = EOF;
 8005ce2:	f04f 30ff 	mov.w	r0, #4294967295
            FSerrno = CE_WRITE_ERROR;
 8005ce6:	7033      	strb	r3, [r6, #0]
        fo->flags.write = FALSE;
 8005ce8:	7e23      	ldrb	r3, [r4, #24]
 8005cea:	f36f 0300 	bfc	r3, #0, #1
 8005cee:	7623      	strb	r3, [r4, #24]
        if( fo == &gFileArray[fIndex] )
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <FSfclose+0xb0>)
 8005cf2:	429c      	cmp	r4, r3
 8005cf4:	d012      	beq.n	8005d1c <FSfclose+0xa0>
 8005cf6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005cfa:	4294      	cmp	r4, r2
 8005cfc:	d010      	beq.n	8005d20 <FSfclose+0xa4>
 8005cfe:	3378      	adds	r3, #120	; 0x78
 8005d00:	429c      	cmp	r4, r3
 8005d02:	d103      	bne.n	8005d0c <FSfclose+0x90>
 8005d04:	2302      	movs	r3, #2
            gFileSlotOpen[fIndex] = TRUE;
 8005d06:	2101      	movs	r1, #1
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <FSfclose+0xb4>)
 8005d0a:	54d1      	strb	r1, [r2, r3]
        error = 0;
 8005d0c:	2848      	cmp	r0, #72	; 0x48
 8005d0e:	bf08      	it	eq
 8005d10:	2000      	moveq	r0, #0
 8005d12:	e7ca      	b.n	8005caa <FSfclose+0x2e>
            error = 0;
 8005d14:	2000      	movs	r0, #0
 8005d16:	e7e7      	b.n	8005ce8 <FSfclose+0x6c>
    int        error = 72;
 8005d18:	2048      	movs	r0, #72	; 0x48
 8005d1a:	e7e9      	b.n	8005cf0 <FSfclose+0x74>
        if( fo == &gFileArray[fIndex] )
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e7f2      	b.n	8005d06 <FSfclose+0x8a>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e7f0      	b.n	8005d06 <FSfclose+0x8a>
 8005d24:	200007ea 	.word	0x200007ea
 8005d28:	2000020d 	.word	0x2000020d
 8005d2c:	200006bc 	.word	0x200006bc
 8005d30:	20000430 	.word	0x20000430

08005d34 <FILEallocate_new_cluster>:
{
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
    dsk = fo->dsk;
 8005d3a:	6805      	ldr	r5, [r0, #0]
    c = FATfindEmptyCluster(fo);
 8005d3c:	f7ff fee0 	bl	8005b00 <FATfindEmptyCluster>
    if (c == 0)      // "0" is just an indication as Disk full in the fn "FATfindEmptyCluster()"
 8005d40:	4604      	mov	r4, r0
 8005d42:	b308      	cbz	r0, 8005d88 <FILEallocate_new_cluster+0x54>
    if(dsk->type == FAT12)
 8005d44:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d115      	bne.n	8005d78 <FILEallocate_new_cluster+0x44>
        WriteFAT( dsk, c, LAST_CLUSTER_FAT12, FALSE);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f640 72f8 	movw	r2, #4088	; 0xff8
        WriteFAT( dsk, c, LAST_CLUSTER_FAT32, FALSE);
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff fa87 	bl	8005268 <WriteFAT>
    WriteFAT( dsk, curcls, c, FALSE);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	68b1      	ldr	r1, [r6, #8]
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7ff fa81 	bl	8005268 <WriteFAT>
    if (mode == 1)
 8005d66:	2f01      	cmp	r7, #1
    fo->ccls = c;
 8005d68:	60b4      	str	r4, [r6, #8]
    if (mode == 1)
 8005d6a:	d10f      	bne.n	8005d8c <FILEallocate_new_cluster+0x58>
        return (EraseCluster(dsk, c));
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4628      	mov	r0, r5
} // allocate new cluster
 8005d70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return (EraseCluster(dsk, c));
 8005d74:	f7ff b9ac 	b.w	80050d0 <EraseCluster>
    else if (dsk->type == FAT16)
 8005d78:	2b02      	cmp	r3, #2
        WriteFAT( dsk, c, LAST_CLUSTER_FAT16, FALSE);
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	bf0c      	ite	eq
 8005d80:	f64f 72f8 	movweq	r2, #65528	; 0xfff8
        WriteFAT( dsk, c, LAST_CLUSTER_FAT32, FALSE);
 8005d84:	4a02      	ldrne	r2, [pc, #8]	; (8005d90 <FILEallocate_new_cluster+0x5c>)
 8005d86:	e7e4      	b.n	8005d52 <FILEallocate_new_cluster+0x1e>
        return CE_DISK_FULL;
 8005d88:	2015      	movs	r0, #21
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return CE_GOOD;
 8005d8c:	2000      	movs	r0, #0
} // allocate new cluster
 8005d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d90:	0ffffff8 	.word	0x0ffffff8

08005d94 <FindEmptyEntries>:
{
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fo->dirccls = fo->dirclus;
 8005d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if((dir = Cache_File_Entry( fo, fHandle, TRUE)) == NULL)
 8005d98:	2201      	movs	r2, #1
{
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	460d      	mov	r5, r1
    fo->dirccls = fo->dirclus;
 8005d9e:	6383      	str	r3, [r0, #56]	; 0x38
    if((dir = Cache_File_Entry( fo, fHandle, TRUE)) == NULL)
 8005da0:	f7ff fc1c 	bl	80055dc <Cache_File_Entry>
 8005da4:	b320      	cbz	r0, 8005df0 <FindEmptyEntries+0x5c>
                dir = Cache_File_Entry( fo, fHandle, FALSE);
 8005da6:	2200      	movs	r2, #0
 8005da8:	4629      	mov	r1, r5
 8005daa:	4620      	mov	r0, r4
            bHandle = *fHandle;
 8005dac:	882e      	ldrh	r6, [r5, #0]
                dir = Cache_File_Entry( fo, fHandle, FALSE);
 8005dae:	f7ff fc15 	bl	80055dc <Cache_File_Entry>
                if(dir != NULL) // Last entry of the cluster
 8005db2:	b100      	cbz	r0, 8005db6 <FindEmptyEntries+0x22>
                    a = dir->DIR_Name[0];
 8005db4:	7807      	ldrb	r7, [r0, #0]
                (*fHandle)++;
 8005db6:	882b      	ldrh	r3, [r5, #0]
            }while((a == DIR_DEL || a == DIR_EMPTY) && (dir != (DIRENTRY)NULL) &&  (++amountfound < 1));
 8005db8:	2fe5      	cmp	r7, #229	; 0xe5
                (*fHandle)++;
 8005dba:	f103 0301 	add.w	r3, r3, #1
 8005dbe:	802b      	strh	r3, [r5, #0]
            }while((a == DIR_DEL || a == DIR_EMPTY) && (dir != (DIRENTRY)NULL) &&  (++amountfound < 1));
 8005dc0:	d117      	bne.n	8005df2 <FindEmptyEntries+0x5e>
 8005dc2:	b980      	cbnz	r0, 8005de6 <FindEmptyEntries+0x52>
                if(b == FatRootDirClusterValue)
 8005dc4:	4a0e      	ldr	r2, [pc, #56]	; (8005e00 <FindEmptyEntries+0x6c>)
                b = fo->dirccls; // write it back
 8005dc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                if(b == FatRootDirClusterValue)
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d104      	bne.n	8005dd8 <FindEmptyEntries+0x44>
                    if (fo->dsk->type != FAT32)
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005dd4:	2a03      	cmp	r2, #3
 8005dd6:	d111      	bne.n	8005dfc <FindEmptyEntries+0x68>
                        fo->ccls = b;
 8005dd8:	60a3      	str	r3, [r4, #8]
                        if(FILEallocate_new_cluster(fo, 1) == CE_DISK_FULL)
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f7ff ffa9 	bl	8005d34 <FILEallocate_new_cluster>
 8005de2:	2815      	cmp	r0, #21
 8005de4:	d00a      	beq.n	8005dfc <FindEmptyEntries+0x68>
                            status = FOUND;     // a new cluster will surely hold a new file name
 8005de6:	2000      	movs	r0, #0
        return(TRUE);
 8005de8:	fab0 f080 	clz	r0, r0
        *fHandle = bHandle;
 8005dec:	802e      	strh	r6, [r5, #0]
        return(TRUE);
 8005dee:	0940      	lsrs	r0, r0, #5
}
 8005df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }while((a == DIR_DEL || a == DIR_EMPTY) && (dir != (DIRENTRY)NULL) &&  (++amountfound < 1));
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	d0e5      	beq.n	8005dc2 <FindEmptyEntries+0x2e>
            if(dir == NULL) // Last entry of the cluster
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d1d5      	bne.n	8005da6 <FindEmptyEntries+0x12>
 8005dfa:	e7e3      	b.n	8005dc4 <FindEmptyEntries+0x30>
                        status = NO_MORE;
 8005dfc:	2002      	movs	r0, #2
 8005dfe:	e7f3      	b.n	8005de8 <FindEmptyEntries+0x54>
 8005e00:	20000770 	.word	0x20000770

08005e04 <FSfwrite>:
{
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!(stream->flags.write))
 8005e08:	f893 8018 	ldrb.w	r8, [r3, #24]
{
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	4681      	mov	r9, r0
 8005e10:	461c      	mov	r4, r3
    if(!(stream->flags.write))
 8005e12:	f018 0001 	ands.w	r0, r8, #1
{
 8005e16:	9101      	str	r1, [sp, #4]
    if(!(stream->flags.write))
 8005e18:	d105      	bne.n	8005e26 <FSfwrite+0x22>
        FSerrno = CE_READONLY;
 8005e1a:	221d      	movs	r2, #29
 8005e1c:	4b6a      	ldr	r3, [pc, #424]	; (8005fc8 <FSfwrite+0x1c4>)
 8005e1e:	701a      	strb	r2, [r3, #0]
} // fwrite
 8005e20:	b005      	add	sp, #20
 8005e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (count == 0)
 8005e26:	9d01      	ldr	r5, [sp, #4]
 8005e28:	4355      	muls	r5, r2
 8005e2a:	d005      	beq.n	8005e38 <FSfwrite+0x34>
    if (MDD_WriteProtectState())
 8005e2c:	f001 f96c 	bl	8007108 <MDD_SDSPI_WriteProtectState>
 8005e30:	b120      	cbz	r0, 8005e3c <FSfwrite+0x38>
        FSerrno = CE_WRITE_PROTECTED;
 8005e32:	2218      	movs	r2, #24
                FSerrno = CE_WRITE_ERROR;
 8005e34:	4b64      	ldr	r3, [pc, #400]	; (8005fc8 <FSfwrite+0x1c4>)
 8005e36:	701a      	strb	r2, [r3, #0]
                return 0;
 8005e38:	2000      	movs	r0, #0
 8005e3a:	e7f1      	b.n	8005e20 <FSfwrite+0x1c>
    gBufferZeroed = FALSE;
 8005e3c:	4f63      	ldr	r7, [pc, #396]	; (8005fcc <FSfwrite+0x1c8>)
    seek = stream->seek;
 8005e3e:	6923      	ldr	r3, [r4, #16]
    gBufferZeroed = FALSE;
 8005e40:	7038      	strb	r0, [r7, #0]
 8005e42:	46bb      	mov	fp, r7
    dsk = stream->dsk;
 8005e44:	6826      	ldr	r6, [r4, #0]
    l = Cluster2Sector(dsk,stream->ccls);
 8005e46:	68a1      	ldr	r1, [r4, #8]
 8005e48:	4630      	mov	r0, r6
    seek = stream->seek;
 8005e4a:	9300      	str	r3, [sp, #0]
    l = Cluster2Sector(dsk,stream->ccls);
 8005e4c:	f7ff f8ea 	bl	8005024 <Cluster2Sector>
    if (gBufferOwner != stream)
 8005e50:	4a5f      	ldr	r2, [pc, #380]	; (8005fd0 <FSfwrite+0x1cc>)
    l += (WORD)stream->sec;      // add the sector number to it
 8005e52:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    if (gBufferOwner != stream)
 8005e56:	6811      	ldr	r1, [r2, #0]
    pos = stream->pos;
 8005e58:	f8b4 a00e 	ldrh.w	sl, [r4, #14]
    l += (WORD)stream->sec;      // add the sector number to it
 8005e5c:	4480      	add	r8, r0
    if (gBufferOwner != stream)
 8005e5e:	428c      	cmp	r4, r1
 8005e60:	9202      	str	r2, [sp, #8]
 8005e62:	d009      	beq.n	8005e78 <FSfwrite+0x74>
        if (gNeedDataWrite)
 8005e64:	4a5b      	ldr	r2, [pc, #364]	; (8005fd4 <FSfwrite+0x1d0>)
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	b122      	cbz	r2, 8005e74 <FSfwrite+0x70>
            if (flushData())
 8005e6a:	f7ff f917 	bl	800509c <flushData>
 8005e6e:	b108      	cbz	r0, 8005e74 <FSfwrite+0x70>
                FSerrno = CE_WRITE_ERROR;
 8005e70:	2209      	movs	r2, #9
 8005e72:	e7df      	b.n	8005e34 <FSfwrite+0x30>
        gBufferOwner = stream;
 8005e74:	9b02      	ldr	r3, [sp, #8]
 8005e76:	601c      	str	r4, [r3, #0]
    if (gLastDataSectorRead != l)
 8005e78:	4f57      	ldr	r7, [pc, #348]	; (8005fd8 <FSfwrite+0x1d4>)
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4590      	cmp	r8, r2
 8005e7e:	d028      	beq.n	8005ed2 <FSfwrite+0xce>
        if (gNeedDataWrite)
 8005e80:	4a54      	ldr	r2, [pc, #336]	; (8005fd4 <FSfwrite+0x1d0>)
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	b11a      	cbz	r2, 8005e8e <FSfwrite+0x8a>
            if (flushData())
 8005e86:	f7ff f909 	bl	800509c <flushData>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d1f0      	bne.n	8005e70 <FSfwrite+0x6c>
        gBufferZeroed = FALSE;
 8005e8e:	2200      	movs	r2, #0
        if(!MDD_SectorRead( l, dsk->buffer) )
 8005e90:	4640      	mov	r0, r8
        gBufferZeroed = FALSE;
 8005e92:	f88b 2000 	strb.w	r2, [fp]
        if(!MDD_SectorRead( l, dsk->buffer) )
 8005e96:	6831      	ldr	r1, [r6, #0]
        gBufferZeroed = FALSE;
 8005e98:	9203      	str	r2, [sp, #12]
        if(!MDD_SectorRead( l, dsk->buffer) )
 8005e9a:	f001 f883 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 8005e9e:	9a03      	ldr	r2, [sp, #12]
 8005ea0:	b9a8      	cbnz	r0, 8005ece <FSfwrite+0xca>
            FSerrno = CE_BADCACHEREAD;
 8005ea2:	211b      	movs	r1, #27
 8005ea4:	4a48      	ldr	r2, [pc, #288]	; (8005fc8 <FSfwrite+0x1c4>)
            error = CE_BAD_SECTOR_READ;
 8005ea6:	2008      	movs	r0, #8
            FSerrno = CE_BADCACHEREAD;
 8005ea8:	7011      	strb	r1, [r2, #0]
        gLastDataSectorRead = l;
 8005eaa:	f8c7 8000 	str.w	r8, [r7]
    filesize = stream->size;
 8005eae:	f8d4 b014 	ldr.w	fp, [r4, #20]
    WORD        writeCount = 0;
 8005eb2:	f04f 0800 	mov.w	r8, #0
    while(error == CE_GOOD && count > 0)
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d058      	beq.n	8005f6c <FSfwrite+0x168>
    stream->seek = seek;
 8005eba:	9b00      	ldr	r3, [sp, #0]
    stream->pos = pos;
 8005ebc:	f8a4 a00e 	strh.w	sl, [r4, #14]
    stream->seek = seek;
 8005ec0:	6123      	str	r3, [r4, #16]
    return(writeCount / size);
 8005ec2:	9b01      	ldr	r3, [sp, #4]
    stream->size = filesize;
 8005ec4:	f8c4 b014 	str.w	fp, [r4, #20]
    return(writeCount / size);
 8005ec8:	fbb8 f0f3 	udiv	r0, r8, r3
 8005ecc:	e7a8      	b.n	8005e20 <FSfwrite+0x1c>
    CETYPE      error = CE_GOOD;
 8005ece:	4610      	mov	r0, r2
 8005ed0:	e7eb      	b.n	8005eaa <FSfwrite+0xa6>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e7eb      	b.n	8005eae <FSfwrite+0xaa>
                    error = FILEget_next_cluster( stream, 1);
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff fb4b 	bl	8005574 <FILEget_next_cluster>
            BYTE needRead = TRUE;
 8005ede:	f04f 0a01 	mov.w	sl, #1
 8005ee2:	e06c      	b.n	8005fbe <FSfwrite+0x1ba>
            if(error == CE_GOOD)
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d13e      	bne.n	8005f66 <FSfwrite+0x162>
                l = Cluster2Sector(dsk,stream->ccls);
 8005ee8:	68a1      	ldr	r1, [r4, #8]
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff f89a 	bl	8005024 <Cluster2Sector>
                l += (WORD)stream->sec;      // add the sector number to it
 8005ef0:	89a2      	ldrh	r2, [r4, #12]
                gBufferOwner = stream;
 8005ef2:	9b02      	ldr	r3, [sp, #8]
                l += (WORD)stream->sec;      // add the sector number to it
 8005ef4:	4402      	add	r2, r0
                gBufferOwner = stream;
 8005ef6:	601c      	str	r4, [r3, #0]
                if (needRead)
 8005ef8:	f1ba 0f00 	cmp.w	sl, #0
 8005efc:	d031      	beq.n	8005f62 <FSfwrite+0x15e>
                    if( !MDD_SectorRead( l, dsk->buffer) )
 8005efe:	4610      	mov	r0, r2
 8005f00:	6831      	ldr	r1, [r6, #0]
 8005f02:	9203      	str	r2, [sp, #12]
 8005f04:	f001 f84e 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 8005f08:	9a03      	ldr	r2, [sp, #12]
 8005f0a:	b948      	cbnz	r0, 8005f20 <FSfwrite+0x11c>
                        FSerrno = CE_BADCACHEREAD;
 8005f0c:	4b2e      	ldr	r3, [pc, #184]	; (8005fc8 <FSfwrite+0x1c4>)
 8005f0e:	221b      	movs	r2, #27
 8005f10:	701a      	strb	r2, [r3, #0]
                        gLastDataSectorRead = 0xFFFFFFFF;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	603b      	str	r3, [r7, #0]
                        return 0;
 8005f18:	e782      	b.n	8005e20 <FSfwrite+0x1c>
            BYTE needRead = TRUE;
 8005f1a:	f04f 0a01 	mov.w	sl, #1
 8005f1e:	e7e3      	b.n	8005ee8 <FSfwrite+0xe4>
            pos = 0;
 8005f20:	f04f 0a00 	mov.w	sl, #0
                        gLastDataSectorRead = l;
 8005f24:	603a      	str	r2, [r7, #0]
            RAMwrite(dsk->buffer, pos++, *(char *)src);
 8005f26:	6832      	ldr	r2, [r6, #0]
 8005f28:	f899 1000 	ldrb.w	r1, [r9]
 8005f2c:	f802 100a 	strb.w	r1, [r2, sl]
            if(stream->flags.FileWriteEOF)
 8005f30:	7e22      	ldrb	r2, [r4, #24]
 8005f32:	0753      	lsls	r3, r2, #29
 8005f34:	d501      	bpl.n	8005f3a <FSfwrite+0x136>
                filesize++;
 8005f36:	f10b 0b01 	add.w	fp, fp, #1
            RAMwrite(dsk->buffer, pos++, *(char *)src);
 8005f3a:	f10a 0301 	add.w	r3, sl, #1
            writeCount++;
 8005f3e:	f108 0801 	add.w	r8, r8, #1
            gNeedDataWrite = TRUE;
 8005f42:	f04f 0201 	mov.w	r2, #1
            src = src + 1; // compiler bug
 8005f46:	f109 0901 	add.w	r9, r9, #1
            RAMwrite(dsk->buffer, pos++, *(char *)src);
 8005f4a:	fa1f fa83 	uxth.w	sl, r3
            seek++;
 8005f4e:	9b00      	ldr	r3, [sp, #0]
            count--;
 8005f50:	3d01      	subs	r5, #1
            writeCount++;
 8005f52:	fa1f f888 	uxth.w	r8, r8
            seek++;
 8005f56:	3301      	adds	r3, #1
            gNeedDataWrite = TRUE;
 8005f58:	2000      	movs	r0, #0
            seek++;
 8005f5a:	9300      	str	r3, [sp, #0]
            gNeedDataWrite = TRUE;
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <FSfwrite+0x1d0>)
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	e7a9      	b.n	8005eb6 <FSfwrite+0xb2>
                    gLastDataSectorRead = l;
 8005f62:	603a      	str	r2, [r7, #0]
 8005f64:	e7df      	b.n	8005f26 <FSfwrite+0x122>
            pos = 0;
 8005f66:	f04f 0a00 	mov.w	sl, #0
 8005f6a:	e7a4      	b.n	8005eb6 <FSfwrite+0xb2>
    while(error == CE_GOOD && count > 0)
 8005f6c:	2d00      	cmp	r5, #0
 8005f6e:	d0a4      	beq.n	8005eba <FSfwrite+0xb6>
        if( seek == filesize )
 8005f70:	9b00      	ldr	r3, [sp, #0]
 8005f72:	455b      	cmp	r3, fp
            stream->flags.FileWriteEOF = TRUE;
 8005f74:	bf02      	ittt	eq
 8005f76:	7e22      	ldrbeq	r2, [r4, #24]
 8005f78:	f042 0204 	orreq.w	r2, r2, #4
 8005f7c:	7622      	strbeq	r2, [r4, #24]
        if (pos == dsk->sectorSize)
 8005f7e:	f8d6 201a 	ldr.w	r2, [r6, #26]
 8005f82:	4592      	cmp	sl, r2
 8005f84:	d1cf      	bne.n	8005f26 <FSfwrite+0x122>
            if (gNeedDataWrite)
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <FSfwrite+0x1d0>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b123      	cbz	r3, 8005f96 <FSfwrite+0x192>
                if (flushData())
 8005f8c:	f7ff f886 	bl	800509c <flushData>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f47f af6d 	bne.w	8005e70 <FSfwrite+0x6c>
            stream->sec++;
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	81a3      	strh	r3, [r4, #12]
            if(stream->sec == dsk->SecPerClus)
 8005f9e:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d1b9      	bne.n	8005f1a <FSfwrite+0x116>
                stream->sec = 0;
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	81a3      	strh	r3, [r4, #12]
                if(stream->flags.FileWriteEOF)
 8005fac:	7e23      	ldrb	r3, [r4, #24]
 8005fae:	075a      	lsls	r2, r3, #29
 8005fb0:	d591      	bpl.n	8005ed6 <FSfwrite+0xd2>
                    needRead = FALSE;
 8005fb2:	f04f 0a00 	mov.w	sl, #0
                    error = FILEallocate_new_cluster(stream, 0);    // add new cluster to the file
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff febb 	bl	8005d34 <FILEallocate_new_cluster>
            if(error == CE_DISK_FULL)
 8005fbe:	2815      	cmp	r0, #21
 8005fc0:	d190      	bne.n	8005ee4 <FSfwrite+0xe0>
                FSerrno = CE_DISK_FULL;
 8005fc2:	4b01      	ldr	r3, [pc, #4]	; (8005fc8 <FSfwrite+0x1c4>)
 8005fc4:	7018      	strb	r0, [r3, #0]
 8005fc6:	e737      	b.n	8005e38 <FSfwrite+0x34>
 8005fc8:	200007ea 	.word	0x200007ea
 8005fcc:	2000020c 	.word	0x2000020c
 8005fd0:	20000208 	.word	0x20000208
 8005fd4:	2000020d 	.word	0x2000020d
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <FSfseek>:
    switch(whence)
 8005fdc:	2a01      	cmp	r2, #1
{
 8005fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	460d      	mov	r5, r1
    dsk = stream->dsk;
 8005fe4:	6806      	ldr	r6, [r0, #0]
    switch(whence)
 8005fe6:	d00d      	beq.n	8006004 <FSfseek+0x28>
 8005fe8:	2a02      	cmp	r2, #2
 8005fea:	d00e      	beq.n	800600a <FSfseek+0x2e>
    if (gNeedDataWrite)
 8005fec:	4b35      	ldr	r3, [pc, #212]	; (80060c4 <FSfseek+0xe8>)
 8005fee:	4f36      	ldr	r7, [pc, #216]	; (80060c8 <FSfseek+0xec>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b16b      	cbz	r3, 8006010 <FSfseek+0x34>
        if (flushData())
 8005ff4:	f7ff f852 	bl	800509c <flushData>
 8005ff8:	b150      	cbz	r0, 8006010 <FSfseek+0x34>
            FSerrno = CE_WRITE_ERROR;
 8005ffa:	2309      	movs	r3, #9
            FSerrno = CE_BADCACHEREAD;
 8005ffc:	703b      	strb	r3, [r7, #0]
            return (-1);   // Bad read
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            offset2 += stream->seek;
 8006004:	6903      	ldr	r3, [r0, #16]
 8006006:	441d      	add	r5, r3
            break;
 8006008:	e7f0      	b.n	8005fec <FSfseek+0x10>
            offset2 = stream->size - offset2;
 800600a:	6943      	ldr	r3, [r0, #20]
 800600c:	1a5d      	subs	r5, r3, r1
            break;
 800600e:	e7ed      	b.n	8005fec <FSfseek+0x10>
    stream->ccls = temp;
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	60a3      	str	r3, [r4, #8]
    if (offset2 > temp)
 8006014:	6963      	ldr	r3, [r4, #20]
 8006016:	42ab      	cmp	r3, r5
 8006018:	d201      	bcs.n	800601e <FSfseek+0x42>
        FSerrno = CE_INVALID_ARGUMENT;
 800601a:	231f      	movs	r3, #31
 800601c:	e7ee      	b.n	8005ffc <FSfseek+0x20>
        stream->flags.FileWriteEOF = FALSE;
 800601e:	7e23      	ldrb	r3, [r4, #24]
        stream->seek = offset2;
 8006020:	6125      	str	r5, [r4, #16]
        stream->flags.FileWriteEOF = FALSE;
 8006022:	f36f 0382 	bfc	r3, #2, #1
 8006026:	7623      	strb	r3, [r4, #24]
        numsector = offset2 / dsk->sectorSize;
 8006028:	f8d6 101a 	ldr.w	r1, [r6, #26]
 800602c:	fbb5 f2f1 	udiv	r2, r5, r1
        stream->pos = offset2;
 8006030:	fb01 5112 	mls	r1, r1, r2, r5
 8006034:	81e1      	strh	r1, [r4, #14]
        temp = numsector / dsk->SecPerClus;
 8006036:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800603a:	fbb2 f5f3 	udiv	r5, r2, r3
        stream->sec = numsector;
 800603e:	fb03 2315 	mls	r3, r3, r5, r2
 8006042:	81a3      	strh	r3, [r4, #12]
        if (temp > 0)
 8006044:	b335      	cbz	r5, 8006094 <FSfseek+0xb8>
            test = FILEget_next_cluster(stream, temp);
 8006046:	4629      	mov	r1, r5
 8006048:	4620      	mov	r0, r4
 800604a:	f7ff fa93 	bl	8005574 <FILEget_next_cluster>
            if (test != CE_GOOD)
 800604e:	b308      	cbz	r0, 8006094 <FSfseek+0xb8>
                if (test == CE_FAT_EOF)
 8006050:	283c      	cmp	r0, #60	; 0x3c
 8006052:	d110      	bne.n	8006076 <FSfseek+0x9a>
                    if (stream->flags.write)
 8006054:	7e23      	ldrb	r3, [r4, #24]
 8006056:	f013 0f01 	tst.w	r3, #1
 800605a:	6863      	ldr	r3, [r4, #4]
                        stream->ccls = stream->cluster;
 800605c:	60a3      	str	r3, [r4, #8]
                    if (stream->flags.write)
 800605e:	d00c      	beq.n	800607a <FSfseek+0x9e>
                        if (temp != 1)
 8006060:	2d01      	cmp	r5, #1
 8006062:	d003      	beq.n	800606c <FSfseek+0x90>
                        test = FILEget_next_cluster(stream, temp - 1);
 8006064:	1e69      	subs	r1, r5, #1
 8006066:	4620      	mov	r0, r4
 8006068:	f7ff fa84 	bl	8005574 <FILEget_next_cluster>
                        if (FILEallocate_new_cluster(stream, 0) != CE_GOOD)
 800606c:	2100      	movs	r1, #0
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff fe60 	bl	8005d34 <FILEallocate_new_cluster>
 8006074:	b170      	cbz	r0, 8006094 <FSfseek+0xb8>
                            FSerrno = CE_COULD_NOT_GET_CLUSTER;
 8006076:	230f      	movs	r3, #15
 8006078:	e7c0      	b.n	8005ffc <FSfseek+0x20>
                        test = FILEget_next_cluster(stream, temp - 1);
 800607a:	1e69      	subs	r1, r5, #1
 800607c:	4620      	mov	r0, r4
 800607e:	f7ff fa79 	bl	8005574 <FILEget_next_cluster>
                        if (test != CE_GOOD)
 8006082:	2800      	cmp	r0, #0
 8006084:	d1f7      	bne.n	8006076 <FSfseek+0x9a>
                        stream->pos = dsk->sectorSize;
 8006086:	f8d6 301a 	ldr.w	r3, [r6, #26]
 800608a:	81e3      	strh	r3, [r4, #14]
                        stream->sec = dsk->SecPerClus - 1;
 800608c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8006090:	3b01      	subs	r3, #1
 8006092:	81a3      	strh	r3, [r4, #12]
        temp = Cluster2Sector(dsk,stream->ccls);
 8006094:	68a1      	ldr	r1, [r4, #8]
 8006096:	4630      	mov	r0, r6
 8006098:	f7fe ffc4 	bl	8005024 <Cluster2Sector>
        numsector = stream->sec;
 800609c:	89a5      	ldrh	r5, [r4, #12]
        gBufferOwner = NULL;
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <FSfseek+0xf0>)
 80060a0:	2400      	movs	r4, #0
        temp += numsector;
 80060a2:	4405      	add	r5, r0
        gBufferOwner = NULL;
 80060a4:	601c      	str	r4, [r3, #0]
        gBufferZeroed = FALSE;
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <FSfseek+0xf4>)
        if( !MDD_SectorRead(temp, dsk->buffer) )
 80060a8:	4628      	mov	r0, r5
        gBufferZeroed = FALSE;
 80060aa:	701c      	strb	r4, [r3, #0]
        if( !MDD_SectorRead(temp, dsk->buffer) )
 80060ac:	6831      	ldr	r1, [r6, #0]
 80060ae:	f000 ff79 	bl	8006fa4 <MDD_SDSPI_SectorRead>
 80060b2:	b908      	cbnz	r0, 80060b8 <FSfseek+0xdc>
            FSerrno = CE_BADCACHEREAD;
 80060b4:	231b      	movs	r3, #27
 80060b6:	e7a1      	b.n	8005ffc <FSfseek+0x20>
        gLastDataSectorRead = temp;
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <FSfseek+0xf8>)
    return (0);
 80060ba:	4620      	mov	r0, r4
    FSerrno = CE_GOOD;
 80060bc:	703c      	strb	r4, [r7, #0]
        gLastDataSectorRead = temp;
 80060be:	601d      	str	r5, [r3, #0]
}
 80060c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000020d 	.word	0x2000020d
 80060c8:	200007ea 	.word	0x200007ea
 80060cc:	20000208 	.word	0x20000208
 80060d0:	2000020c 	.word	0x2000020c
 80060d4:	2000000c 	.word	0x2000000c

080060d8 <FILECreateHeadCluster>:
{
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	460d      	mov	r5, r1
    disk = fo->dsk;
 80060dc:	6804      	ldr	r4, [r0, #0]
    *cluster = FATfindEmptyCluster(fo);
 80060de:	f7ff fd0f 	bl	8005b00 <FATfindEmptyCluster>
 80060e2:	4601      	mov	r1, r0
 80060e4:	6028      	str	r0, [r5, #0]
    if(*cluster == 0)  // "0" is just an indication as Disk full in the fn "FATfindEmptyCluster()"
 80060e6:	b1e8      	cbz	r0, 8006124 <FILECreateHeadCluster+0x4c>
        if(disk->type == FAT12)
 80060e8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10b      	bne.n	8006108 <FILECreateHeadCluster+0x30>
            if(WriteFAT( disk, *cluster, LAST_CLUSTER_FAT12, FALSE) == CLUSTER_FAIL_FAT16)
 80060f0:	2300      	movs	r3, #0
 80060f2:	f640 72f8 	movw	r2, #4088	; 0xff8
 80060f6:	4620      	mov	r0, r4
 80060f8:	f7ff f8b6 	bl	8005268 <WriteFAT>
 80060fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006100:	4298      	cmp	r0, r3
 8006102:	d111      	bne.n	8006128 <FILECreateHeadCluster+0x50>
        error = CE_DISK_FULL;
 8006104:	2009      	movs	r0, #9
 8006106:	bd38      	pop	{r3, r4, r5, pc}
        else if(disk->type == FAT16)
 8006108:	2b02      	cmp	r3, #2
            if(WriteFAT( disk, *cluster, LAST_CLUSTER_FAT16, FALSE) == CLUSTER_FAIL_FAT16)
 800610a:	f04f 0300 	mov.w	r3, #0
        else if(disk->type == FAT16)
 800610e:	d102      	bne.n	8006116 <FILECreateHeadCluster+0x3e>
            if(WriteFAT( disk, *cluster, LAST_CLUSTER_FAT16, FALSE) == CLUSTER_FAIL_FAT16)
 8006110:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8006114:	e7ef      	b.n	80060f6 <FILECreateHeadCluster+0x1e>
            if(WriteFAT( disk, *cluster, LAST_CLUSTER_FAT32, FALSE) == CLUSTER_FAIL_FAT32)
 8006116:	4a07      	ldr	r2, [pc, #28]	; (8006134 <FILECreateHeadCluster+0x5c>)
 8006118:	4620      	mov	r0, r4
 800611a:	f7ff f8a5 	bl	8005268 <WriteFAT>
 800611e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006122:	e7ed      	b.n	8006100 <FILECreateHeadCluster+0x28>
        error = CE_DISK_FULL;
 8006124:	2015      	movs	r0, #21
    return(error);
 8006126:	bd38      	pop	{r3, r4, r5, pc}
            error = EraseCluster(disk,*cluster);
 8006128:	6829      	ldr	r1, [r5, #0]
 800612a:	4620      	mov	r0, r4
} // allocate head cluster
 800612c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            error = EraseCluster(disk,*cluster);
 8006130:	f7fe bfce 	b.w	80050d0 <EraseCluster>
 8006134:	0ffffff8 	.word	0x0ffffff8

08006138 <CreateFirstCluster>:
    fHandle = fo->entry;
 8006138:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
{
 800613a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if((error = FILECreateHeadCluster(fo,&cluster)) == CE_GOOD)
 800613c:	a901      	add	r1, sp, #4
{
 800613e:	4605      	mov	r5, r0
    fHandle = fo->entry;
 8006140:	f8ad 3002 	strh.w	r3, [sp, #2]
    if((error = FILECreateHeadCluster(fo,&cluster)) == CE_GOOD)
 8006144:	f7ff ffc8 	bl	80060d8 <FILECreateHeadCluster>
 8006148:	4604      	mov	r4, r0
 800614a:	b988      	cbnz	r0, 8006170 <CreateFirstCluster+0x38>
        dir = LoadDirAttrib(fo, &fHandle);
 800614c:	f10d 0102 	add.w	r1, sp, #2
 8006150:	4628      	mov	r0, r5
 8006152:	f7ff fcb5 	bl	8005ac0 <LoadDirAttrib>
        dir->DIR_FstClusLO = (cluster & 0x0000FFFF);
 8006156:	9b01      	ldr	r3, [sp, #4]
        if(Write_File_Entry(fo, &fHandle) != TRUE)
 8006158:	f10d 0102 	add.w	r1, sp, #2
        dir->DIR_FstClusLO = (cluster & 0x0000FFFF);
 800615c:	8343      	strh	r3, [r0, #26]
       TempMsbCluster = TempMsbCluster >> 16;      // Get the date into Lsb place.
 800615e:	f3c3 430b 	ubfx	r3, r3, #16, #12
       dir->DIR_FstClusHI = TempMsbCluster;
 8006162:	8283      	strh	r3, [r0, #20]
        if(Write_File_Entry(fo, &fHandle) != TRUE)
 8006164:	4628      	mov	r0, r5
 8006166:	f7fe ff6d 	bl	8005044 <Write_File_Entry>
 800616a:	2801      	cmp	r0, #1
            error = CE_WRITE_ERROR;
 800616c:	bf18      	it	ne
 800616e:	2409      	movne	r4, #9
}// End of CreateFirstCluster
 8006170:	4620      	mov	r0, r4
 8006172:	b003      	add	sp, #12
 8006174:	bd30      	pop	{r4, r5, pc}
	...

08006178 <CreateFileEntry>:
{
 8006178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800617c:	4606      	mov	r6, r0
 800617e:	460f      	mov	r7, r1
    FSerrno = CE_GOOD;
 8006180:	4d11      	ldr	r5, [pc, #68]	; (80061c8 <CreateFileEntry+0x50>)
 8006182:	2100      	movs	r1, #0
{
 8006184:	4690      	mov	r8, r2
 8006186:	3020      	adds	r0, #32
        name[index] = fo->name[index];
 8006188:	ac01      	add	r4, sp, #4
    FSerrno = CE_GOOD;
 800618a:	7029      	strb	r1, [r5, #0]
        name[index] = fo->name[index];
 800618c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006190:	550b      	strb	r3, [r1, r4]
 8006192:	3101      	adds	r1, #1
    for (index = 0; index < FILE_NAME_SIZE; index ++)
 8006194:	290b      	cmp	r1, #11
 8006196:	d1f9      	bne.n	800618c <CreateFileEntry+0x14>
    *fHandle = 0;
 8006198:	2300      	movs	r3, #0
    if(FindEmptyEntries(fo, fHandle))
 800619a:	4639      	mov	r1, r7
 800619c:	4630      	mov	r0, r6
    *fHandle = 0;
 800619e:	803b      	strh	r3, [r7, #0]
    if(FindEmptyEntries(fo, fHandle))
 80061a0:	f7ff fdf8 	bl	8005d94 <FindEmptyEntries>
 80061a4:	b168      	cbz	r0, 80061c2 <CreateFileEntry+0x4a>
        if((error = PopulateEntries(fo, name ,fHandle, mode)) == CE_GOOD)
 80061a6:	4643      	mov	r3, r8
 80061a8:	463a      	mov	r2, r7
 80061aa:	4621      	mov	r1, r4
 80061ac:	4630      	mov	r0, r6
 80061ae:	f7ff fab5 	bl	800571c <PopulateEntries>
 80061b2:	b910      	cbnz	r0, 80061ba <CreateFileEntry+0x42>
            error = CreateFirstCluster(fo);
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7ff ffbf 	bl	8006138 <CreateFirstCluster>
    FSerrno = error;
 80061ba:	7028      	strb	r0, [r5, #0]
}
 80061bc:	b004      	add	sp, #16
 80061be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        error = CE_DIR_FULL;
 80061c2:	2014      	movs	r0, #20
 80061c4:	e7f9      	b.n	80061ba <CreateFileEntry+0x42>
 80061c6:	bf00      	nop
 80061c8:	200007ea 	.word	0x200007ea

080061cc <FSfopen>:
        if( gFileSlotOpen[fIndex] )   //this slot is available
 80061cc:	4ba4      	ldr	r3, [pc, #656]	; (8006460 <FSfopen+0x294>)
{
 80061ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( gFileSlotOpen[fIndex] )   //this slot is available
 80061d2:	781a      	ldrb	r2, [r3, #0]
{
 80061d4:	4689      	mov	r9, r1
 80061d6:	4698      	mov	r8, r3
        if( gFileSlotOpen[fIndex] )   //this slot is available
 80061d8:	b9fa      	cbnz	r2, 800621a <FSfopen+0x4e>
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	b9fb      	cbnz	r3, 800621e <FSfopen+0x52>
 80061de:	f898 5002 	ldrb.w	r5, [r8, #2]
 80061e2:	b1f5      	cbz	r5, 8006222 <FSfopen+0x56>
    for(fIndex = 0; fIndex < FS_MAX_FILES_OPEN; fIndex++ )
 80061e4:	2602      	movs	r6, #2
 80061e6:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
            gFileSlotOpen[fIndex] = FALSE;
 80061ea:	f04f 0a00 	mov.w	sl, #0
            filePtr = &gFileArray[fIndex];
 80061ee:	4f9d      	ldr	r7, [pc, #628]	; (8006464 <FSfopen+0x298>)
 80061f0:	fb0b fb06 	mul.w	fp, fp, r6
    if( !FormatFileName(fileName, filePtr->name, 0) )
 80061f4:	4652      	mov	r2, sl
            gFileSlotOpen[fIndex] = FALSE;
 80061f6:	f808 a006 	strb.w	sl, [r8, r6]
    if( !FormatFileName(fileName, filePtr->name, 0) )
 80061fa:	f10b 0120 	add.w	r1, fp, #32
            filePtr = &gFileArray[fIndex];
 80061fe:	eb0b 0507 	add.w	r5, fp, r7
    if( !FormatFileName(fileName, filePtr->name, 0) )
 8006202:	4439      	add	r1, r7
 8006204:	f7fe ffda 	bl	80051bc <FormatFileName>
 8006208:	b990      	cbnz	r0, 8006230 <FSfopen+0x64>
        gFileSlotOpen[fIndex] = TRUE;   //put this slot back to the pool
 800620a:	2301      	movs	r3, #1
        FSerrno = CE_INVALID_FILENAME;
 800620c:	2212      	movs	r2, #18
        gFileSlotOpen[fIndex] = TRUE;   //put this slot back to the pool
 800620e:	f808 3006 	strb.w	r3, [r8, r6]
        FSerrno = CE_INVALID_FILENAME;
 8006212:	4b95      	ldr	r3, [pc, #596]	; (8006468 <FSfopen+0x29c>)
 8006214:	701a      	strb	r2, [r3, #0]
        filePtr = NULL;
 8006216:	2500      	movs	r5, #0
 8006218:	e006      	b.n	8006228 <FSfopen+0x5c>
    for(fIndex = 0; fIndex < FS_MAX_FILES_OPEN; fIndex++ )
 800621a:	2600      	movs	r6, #0
 800621c:	e7e3      	b.n	80061e6 <FSfopen+0x1a>
 800621e:	2601      	movs	r6, #1
 8006220:	e7e1      	b.n	80061e6 <FSfopen+0x1a>
        FSerrno = CE_TOO_MANY_FILES_OPEN;
 8006222:	2220      	movs	r2, #32
 8006224:	4b90      	ldr	r3, [pc, #576]	; (8006468 <FSfopen+0x29c>)
 8006226:	701a      	strb	r2, [r3, #0]
}
 8006228:	4628      	mov	r0, r5
 800622a:	b003      	add	sp, #12
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    filePtr->dsk = &gDiskData;
 8006230:	4b8e      	ldr	r3, [pc, #568]	; (800646c <FSfopen+0x2a0>)
    FileObjectCopy(&gFileTemp, filePtr);
 8006232:	4629      	mov	r1, r5
    ModeC = mode[0];
 8006234:	f899 4000 	ldrb.w	r4, [r9]
    filePtr->dsk = &gDiskData;
 8006238:	f84b 3007 	str.w	r3, [fp, r7]
    filePtr->attributes = ATTR_ARCHIVE;
 800623c:	2320      	movs	r3, #32
    FileObjectCopy(&gFileTemp, filePtr);
 800623e:	488c      	ldr	r0, [pc, #560]	; (8006470 <FSfopen+0x2a4>)
    filePtr->attributes = ATTR_ARCHIVE;
 8006240:	862b      	strh	r3, [r5, #48]	; 0x30
    filePtr->dirclus    = cwdptr->dirclus;
 8006242:	4b8c      	ldr	r3, [pc, #560]	; (8006474 <FSfopen+0x2a8>)
    filePtr->cluster = 0;
 8006244:	f8c5 a004 	str.w	sl, [r5, #4]
    filePtr->dirclus    = cwdptr->dirclus;
 8006248:	681b      	ldr	r3, [r3, #0]
    filePtr->ccls    = 0;
 800624a:	f8c5 a008 	str.w	sl, [r5, #8]
    filePtr->dirclus    = cwdptr->dirclus;
 800624e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    filePtr->dirccls    = cwdptr->dirccls;
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    filePtr->dirclus    = cwdptr->dirclus;
 8006252:	636a      	str	r2, [r5, #52]	; 0x34
    filePtr->dirccls    = cwdptr->dirccls;
 8006254:	63ab      	str	r3, [r5, #56]	; 0x38
    filePtr->entry = 0;
 8006256:	f8a5 a02c 	strh.w	sl, [r5, #44]	; 0x2c
    FileObjectCopy(&gFileTemp, filePtr);
 800625a:	f7fe fdbd 	bl	8004dd8 <FileObjectCopy>
    if(FILEfind (filePtr, &gFileTemp, LOOK_FOR_MATCHING_ENTRY, 0) == CE_GOOD)
 800625e:	4653      	mov	r3, sl
 8006260:	2201      	movs	r2, #1
 8006262:	4983      	ldr	r1, [pc, #524]	; (8006470 <FSfopen+0x2a4>)
 8006264:	4628      	mov	r0, r5
 8006266:	f7ff faf1 	bl	800584c <FILEfind>
 800626a:	2800      	cmp	r0, #0
 800626c:	f040 80d1 	bne.w	8006412 <FSfopen+0x246>
        switch(ModeC)
 8006270:	2c57      	cmp	r4, #87	; 0x57
 8006272:	d036      	beq.n	80062e2 <FSfopen+0x116>
 8006274:	d809      	bhi.n	800628a <FSfopen+0xbe>
 8006276:	2c41      	cmp	r4, #65	; 0x41
 8006278:	d00e      	beq.n	8006298 <FSfopen+0xcc>
 800627a:	2c52      	cmp	r4, #82	; 0x52
 800627c:	f000 80ae 	beq.w	80063dc <FSfopen+0x210>
                FSerrno = CE_INVALID_ARGUMENT;
 8006280:	221f      	movs	r2, #31
 8006282:	4b79      	ldr	r3, [pc, #484]	; (8006468 <FSfopen+0x29c>)
                final = 0xFF;;  //indicate error condition
 8006284:	24ff      	movs	r4, #255	; 0xff
                FSerrno = CE_INVALID_ARGUMENT;
 8006286:	701a      	strb	r2, [r3, #0]
                break;
 8006288:	e05e      	b.n	8006348 <FSfopen+0x17c>
        switch(ModeC)
 800628a:	2c72      	cmp	r4, #114	; 0x72
 800628c:	f000 80a6 	beq.w	80063dc <FSfopen+0x210>
 8006290:	2c77      	cmp	r4, #119	; 0x77
 8006292:	d026      	beq.n	80062e2 <FSfopen+0x116>
 8006294:	2c61      	cmp	r4, #97	; 0x61
 8006296:	d1f3      	bne.n	8006280 <FSfopen+0xb4>
                if(filePtr->size != 0)
 8006298:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 800629c:	fb0a 7a06 	mla	sl, sl, r6, r7
 80062a0:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 80062a4:	f8da 2014 	ldr.w	r2, [sl, #20]
                    fHandle = filePtr->entry;
 80062a8:	f8ad 3006 	strh.w	r3, [sp, #6]
                if(filePtr->size != 0)
 80062ac:	2a00      	cmp	r2, #0
 80062ae:	d06c      	beq.n	800638a <FSfopen+0x1be>
                    final = FILEopen (filePtr, &fHandle, 'w');
 80062b0:	f10d 0106 	add.w	r1, sp, #6
 80062b4:	2277      	movs	r2, #119	; 0x77
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7ff fb96 	bl	80059e8 <FILEopen>
                    if (filePtr->attributes & ATTR_DIRECTORY)
 80062bc:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
                    final = FILEopen (filePtr, &fHandle, 'w');
 80062c0:	4604      	mov	r4, r0
                    if (filePtr->attributes & ATTR_DIRECTORY)
 80062c2:	06d9      	lsls	r1, r3, #27
 80062c4:	d4dc      	bmi.n	8006280 <FSfopen+0xb4>
                    if (final == CE_GOOD)
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d13e      	bne.n	8006348 <FSfopen+0x17c>
                        final = FSfseek (filePtr, 0, SEEK_END);
 80062ca:	4601      	mov	r1, r0
 80062cc:	2202      	movs	r2, #2
 80062ce:	4628      	mov	r0, r5
 80062d0:	f7ff fe84 	bl	8005fdc <FSfseek>
 80062d4:	b2c4      	uxtb	r4, r0
                        if (final != CE_GOOD)
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	d046      	beq.n	8006368 <FSfopen+0x19c>
                        FSerrno = CE_SEEK_ERROR;
 80062da:	221a      	movs	r2, #26
 80062dc:	4b62      	ldr	r3, [pc, #392]	; (8006468 <FSfopen+0x29c>)
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e047      	b.n	8006372 <FSfopen+0x1a6>
                fHandle = filePtr->entry;
 80062e2:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80062e6:	f10d 0b08 	add.w	fp, sp, #8
                final = FILEerase(filePtr, &fHandle, TRUE);
 80062ea:	2201      	movs	r2, #1
 80062ec:	4628      	mov	r0, r5
                fHandle = filePtr->entry;
 80062ee:	fb0a 7a06 	mla	sl, sl, r6, r7
 80062f2:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 80062f6:	f82b 3d02 	strh.w	r3, [fp, #-2]!
                final = FILEerase(filePtr, &fHandle, TRUE);
 80062fa:	4659      	mov	r1, fp
 80062fc:	f7ff fc80 	bl	8005c00 <FILEerase>
                if (final == CE_GOOD)
 8006300:	4604      	mov	r4, r0
 8006302:	bb08      	cbnz	r0, 8006348 <FSfopen+0x17c>
                    final = CreateFileEntry (filePtr, &fHandle, 0);
 8006304:	4602      	mov	r2, r0
 8006306:	4659      	mov	r1, fp
 8006308:	4628      	mov	r0, r5
 800630a:	f7ff ff35 	bl	8006178 <CreateFileEntry>
                    if (final == CE_GOOD)
 800630e:	4604      	mov	r4, r0
 8006310:	b9d0      	cbnz	r0, 8006348 <FSfopen+0x17c>
                        final = FILEopen (filePtr, &fHandle, 'w');
 8006312:	2277      	movs	r2, #119	; 0x77
 8006314:	4659      	mov	r1, fp
 8006316:	4628      	mov	r0, r5
 8006318:	f7ff fb66 	bl	80059e8 <FILEopen>
                        if (filePtr->attributes & ATTR_DIRECTORY)
 800631c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
                        final = FILEopen (filePtr, &fHandle, 'w');
 8006320:	4604      	mov	r4, r0
                        if (filePtr->attributes & ATTR_DIRECTORY)
 8006322:	06d8      	lsls	r0, r3, #27
 8006324:	d4ac      	bmi.n	8006280 <FSfopen+0xb4>
                        if (final == CE_GOOD)
 8006326:	b97c      	cbnz	r4, 8006348 <FSfopen+0x17c>
                            final = FSfseek (filePtr, 0, SEEK_END);
 8006328:	4621      	mov	r1, r4
 800632a:	2202      	movs	r2, #2
 800632c:	4628      	mov	r0, r5
 800632e:	f7ff fe55 	bl	8005fdc <FSfseek>
                            if (mode[1] == '+')
 8006332:	f899 3001 	ldrb.w	r3, [r9, #1]
                            final = FSfseek (filePtr, 0, SEEK_END);
 8006336:	b2c4      	uxtb	r4, r0
                            if (mode[1] == '+')
 8006338:	2b2b      	cmp	r3, #43	; 0x2b
 800633a:	d105      	bne.n	8006348 <FSfopen+0x17c>
                                filePtr->flags.read = 1;
 800633c:	f89a 3018 	ldrb.w	r3, [sl, #24]
 8006340:	f043 0302 	orr.w	r3, r3, #2
                    filePtr->flags.write = 1;
 8006344:	f88a 3018 	strb.w	r3, [sl, #24]
    if(MDD_WriteProtectState())
 8006348:	f000 fede 	bl	8007108 <MDD_SDSPI_WriteProtectState>
 800634c:	b130      	cbz	r0, 800635c <FSfopen+0x190>
        filePtr->flags.write = 0;;
 800634e:	233c      	movs	r3, #60	; 0x3c
 8006350:	fb03 7706 	mla	r7, r3, r6, r7
 8006354:	7e3b      	ldrb	r3, [r7, #24]
 8006356:	f36f 0300 	bfc	r3, #0, #1
 800635a:	763b      	strb	r3, [r7, #24]
    if( final != CE_GOOD )
 800635c:	2c00      	cmp	r4, #0
 800635e:	d07b      	beq.n	8006458 <FSfopen+0x28c>
        gFileSlotOpen[fIndex] = TRUE;   //put this slot back to the pool
 8006360:	2301      	movs	r3, #1
 8006362:	f808 3006 	strb.w	r3, [r8, r6]
 8006366:	e756      	b.n	8006216 <FSfopen+0x4a>
                            ReadFAT (&gDiskData, filePtr->ccls);
 8006368:	f8da 1008 	ldr.w	r1, [sl, #8]
 800636c:	483f      	ldr	r0, [pc, #252]	; (800646c <FSfopen+0x2a0>)
 800636e:	f7ff f857 	bl	8005420 <ReadFAT>
                    if (mode[1] == '+')
 8006372:	f899 3001 	ldrb.w	r3, [r9, #1]
 8006376:	2b2b      	cmp	r3, #43	; 0x2b
 8006378:	d1e6      	bne.n	8006348 <FSfopen+0x17c>
                        filePtr->flags.read = 1;
 800637a:	233c      	movs	r3, #60	; 0x3c
 800637c:	fb03 7306 	mla	r3, r3, r6, r7
 8006380:	7e1a      	ldrb	r2, [r3, #24]
 8006382:	f042 0202 	orr.w	r2, r2, #2
 8006386:	761a      	strb	r2, [r3, #24]
 8006388:	e7de      	b.n	8006348 <FSfopen+0x17c>
                    final = FILEerase(filePtr, &fHandle, TRUE);
 800638a:	2201      	movs	r2, #1
 800638c:	f10d 0106 	add.w	r1, sp, #6
 8006390:	4628      	mov	r0, r5
 8006392:	f7ff fc35 	bl	8005c00 <FILEerase>
                    if (final == CE_GOOD)
 8006396:	4604      	mov	r4, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	d1d5      	bne.n	8006348 <FSfopen+0x17c>
                        final = CreateFileEntry (filePtr, &fHandle, 0);
 800639c:	4602      	mov	r2, r0
 800639e:	f10d 0106 	add.w	r1, sp, #6
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7ff fee8 	bl	8006178 <CreateFileEntry>
                        if (final == CE_GOOD)
 80063a8:	4604      	mov	r4, r0
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d1cc      	bne.n	8006348 <FSfopen+0x17c>
                            final = FILEopen (filePtr, &fHandle, 'w');
 80063ae:	2277      	movs	r2, #119	; 0x77
 80063b0:	f10d 0106 	add.w	r1, sp, #6
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7ff fb17 	bl	80059e8 <FILEopen>
                            if (filePtr->attributes & ATTR_DIRECTORY)
 80063ba:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
                            final = FILEopen (filePtr, &fHandle, 'w');
 80063be:	4604      	mov	r4, r0
                if (filePtr->attributes & ATTR_DIRECTORY)
 80063c0:	06db      	lsls	r3, r3, #27
 80063c2:	f53f af5d 	bmi.w	8006280 <FSfopen+0xb4>
                if (final == CE_GOOD)
 80063c6:	2c00      	cmp	r4, #0
 80063c8:	d1be      	bne.n	8006348 <FSfopen+0x17c>
                    final = FSfseek (filePtr, 0, SEEK_END);
 80063ca:	4621      	mov	r1, r4
 80063cc:	2202      	movs	r2, #2
 80063ce:	4628      	mov	r0, r5
 80063d0:	f7ff fe04 	bl	8005fdc <FSfseek>
 80063d4:	b2c4      	uxtb	r4, r0
                    if (final != CE_GOOD)
 80063d6:	2c00      	cmp	r4, #0
 80063d8:	d0cb      	beq.n	8006372 <FSfopen+0x1a6>
 80063da:	e77e      	b.n	80062da <FSfopen+0x10e>
                fHandle = filePtr->entry;
 80063dc:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80063e0:	a902      	add	r1, sp, #8
                final = FILEopen (filePtr, &fHandle, 'r');
 80063e2:	2272      	movs	r2, #114	; 0x72
 80063e4:	4628      	mov	r0, r5
                fHandle = filePtr->entry;
 80063e6:	fb0a 7a06 	mla	sl, sl, r6, r7
 80063ea:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 80063ee:	f821 3d02 	strh.w	r3, [r1, #-2]!
                final = FILEopen (filePtr, &fHandle, 'r');
 80063f2:	f7ff faf9 	bl	80059e8 <FILEopen>
                if ((mode[1] == '+') && !(filePtr->attributes & ATTR_DIRECTORY))
 80063f6:	f899 3001 	ldrb.w	r3, [r9, #1]
                final = FILEopen (filePtr, &fHandle, 'r');
 80063fa:	4604      	mov	r4, r0
                if ((mode[1] == '+') && !(filePtr->attributes & ATTR_DIRECTORY))
 80063fc:	2b2b      	cmp	r3, #43	; 0x2b
 80063fe:	d1a3      	bne.n	8006348 <FSfopen+0x17c>
 8006400:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8006404:	06da      	lsls	r2, r3, #27
 8006406:	d49f      	bmi.n	8006348 <FSfopen+0x17c>
                    filePtr->flags.write = 1;
 8006408:	f89a 3018 	ldrb.w	r3, [sl, #24]
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	e798      	b.n	8006344 <FSfopen+0x178>
        if(ModeC == 'w' || ModeC == 'W' || ModeC == 'a' || ModeC == 'A')
 8006412:	f004 04df 	and.w	r4, r4, #223	; 0xdf
        FileObjectCopy(filePtr, &gFileTemp);
 8006416:	4916      	ldr	r1, [pc, #88]	; (8006470 <FSfopen+0x2a4>)
 8006418:	4628      	mov	r0, r5
 800641a:	f7fe fcdd 	bl	8004dd8 <FileObjectCopy>
        if(ModeC == 'w' || ModeC == 'W' || ModeC == 'a' || ModeC == 'A')
 800641e:	2c57      	cmp	r4, #87	; 0x57
 8006420:	d001      	beq.n	8006426 <FSfopen+0x25a>
 8006422:	2c41      	cmp	r4, #65	; 0x41
 8006424:	d116      	bne.n	8006454 <FSfopen+0x288>
            fHandle = 0;
 8006426:	2200      	movs	r2, #0
 8006428:	f10d 0a08 	add.w	sl, sp, #8
            final = CreateFileEntry (filePtr, &fHandle, 0);
 800642c:	4628      	mov	r0, r5
            fHandle = 0;
 800642e:	f82a 2d02 	strh.w	r2, [sl, #-2]!
            final = CreateFileEntry (filePtr, &fHandle, 0);
 8006432:	4651      	mov	r1, sl
 8006434:	f7ff fea0 	bl	8006178 <CreateFileEntry>
            if (final == CE_GOOD)
 8006438:	4604      	mov	r4, r0
 800643a:	2800      	cmp	r0, #0
 800643c:	d184      	bne.n	8006348 <FSfopen+0x17c>
                final = FILEopen (filePtr, &fHandle, 'w');
 800643e:	2277      	movs	r2, #119	; 0x77
 8006440:	4651      	mov	r1, sl
 8006442:	4628      	mov	r0, r5
 8006444:	f7ff fad0 	bl	80059e8 <FILEopen>
                if (filePtr->attributes & ATTR_DIRECTORY)
 8006448:	233c      	movs	r3, #60	; 0x3c
                final = FILEopen (filePtr, &fHandle, 'w');
 800644a:	4604      	mov	r4, r0
                if (filePtr->attributes & ATTR_DIRECTORY)
 800644c:	fb03 7306 	mla	r3, r3, r6, r7
 8006450:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006452:	e7b5      	b.n	80063c0 <FSfopen+0x1f4>
            final = CE_FILE_NOT_FOUND;
 8006454:	240b      	movs	r4, #11
 8006456:	e777      	b.n	8006348 <FSfopen+0x17c>
        FSerrno = CE_GOOD;
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <FSfopen+0x29c>)
 800645a:	701c      	strb	r4, [r3, #0]
 800645c:	e6e4      	b.n	8006228 <FSfopen+0x5c>
 800645e:	bf00      	nop
 8006460:	20000430 	.word	0x20000430
 8006464:	200006bc 	.word	0x200006bc
 8006468:	200007ea 	.word	0x200007ea
 800646c:	20000774 	.word	0x20000774
 8006470:	200007a4 	.word	0x200007a4
 8006474:	20000008 	.word	0x20000008

08006478 <SDCardIsDetected>:
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	SDCardIsDetected(void)
{
 8006478:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) != GPIO_PIN_RESET)
 800647a:	2104      	movs	r1, #4
 800647c:	4803      	ldr	r0, [pc, #12]	; (800648c <SDCardIsDetected+0x14>)
 800647e:	f7fa fc73 	bl	8000d68 <HAL_GPIO_ReadPin>
    {
        status = SD_NOT_PRESENT;
    }

    return status;
}  
 8006482:	fab0 f080 	clz	r0, r0
 8006486:	0940      	lsrs	r0, r0, #5
 8006488:	bd08      	pop	{r3, pc}
 800648a:	bf00      	nop
 800648c:	58021800 	.word	0x58021800

08006490 <__io_putchar>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;



int __io_putchar(int ch)
{
 8006490:	b507      	push	{r0, r1, r2, lr}
	uint8_t temp = (uint8_t)ch;
 8006492:	f88d 0007 	strb.w	r0, [sp, #7]

	while(HAL_UART_GetState(&huart3) != HAL_UART_STATE_READY);
 8006496:	4808      	ldr	r0, [pc, #32]	; (80064b8 <__io_putchar+0x28>)
 8006498:	f7fc fe8d 	bl	80031b6 <HAL_UART_GetState>
 800649c:	2820      	cmp	r0, #32
 800649e:	d1fa      	bne.n	8006496 <__io_putchar+0x6>
	HAL_UART_Transmit(&huart3, &temp, sizeof(uint8_t), 100);
 80064a0:	2364      	movs	r3, #100	; 0x64
 80064a2:	2201      	movs	r2, #1
 80064a4:	f10d 0107 	add.w	r1, sp, #7
 80064a8:	4803      	ldr	r0, [pc, #12]	; (80064b8 <__io_putchar+0x28>)
 80064aa:	f7fe f85b 	bl	8004564 <HAL_UART_Transmit>

	return 0;
}
 80064ae:	2000      	movs	r0, #0
 80064b0:	b003      	add	sp, #12
 80064b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80064b6:	bf00      	nop
 80064b8:	20000874 	.word	0x20000874

080064bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064bc:	b530      	push	{r4, r5, lr}
 80064be:	b0cd      	sub	sp, #308	; 0x134
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064c0:	224c      	movs	r2, #76	; 0x4c
 80064c2:	2100      	movs	r1, #0
 80064c4:	a80a      	add	r0, sp, #40	; 0x28
 80064c6:	f000 fe95 	bl	80071f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064ca:	2220      	movs	r2, #32
 80064cc:	2100      	movs	r1, #0
 80064ce:	a802      	add	r0, sp, #8
 80064d0:	f000 fe90 	bl	80071f4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80064d4:	22bc      	movs	r2, #188	; 0xbc
 80064d6:	2100      	movs	r1, #0
 80064d8:	a81d      	add	r0, sp, #116	; 0x74
 80064da:	f000 fe8b 	bl	80071f4 <memset>

	/** Supply configuration update enable
	*/
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80064de:	2002      	movs	r0, #2
 80064e0:	f7fa fd32 	bl	8000f48 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80064e4:	2300      	movs	r3, #0
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	4b33      	ldr	r3, [pc, #204]	; (80065b8 <SystemClock_Config+0xfc>)
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80064f0:	619a      	str	r2, [r3, #24]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	4a30      	ldr	r2, [pc, #192]	; (80065bc <SystemClock_Config+0x100>)
 80064fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80064fe:	f041 0101 	orr.w	r1, r1, #1
 8006502:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006504:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006506:	f002 0201 	and.w	r2, r2, #1
 800650a:	9201      	str	r2, [sp, #4]
 800650c:	9a01      	ldr	r2, [sp, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	0492      	lsls	r2, r2, #18
 8006512:	d5fc      	bpl.n	800650e <SystemClock_Config+0x52>
	/** Macro to configure the PLL clock source
	*/
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006514:	4a2a      	ldr	r2, [pc, #168]	; (80065c0 <SystemClock_Config+0x104>)
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006516:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006518:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLQ = 20;
	RCC_OscInitStruct.PLL.PLLR = 2;
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800651a:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800651c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006528:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800652c:	950a      	str	r5, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800652e:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 120;
 8006530:	2378      	movs	r3, #120	; 0x78
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006532:	9413      	str	r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 120;
 8006534:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 20;
 8006536:	2314      	movs	r3, #20
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006538:	9414      	str	r4, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = 20;
 800653a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800653c:	230c      	movs	r3, #12
	RCC_OscInitStruct.PLL.PLLM = 1;
 800653e:	9515      	str	r5, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006540:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006542:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLP = 2;
 8006544:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8006546:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006548:	931b      	str	r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800654a:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800654c:	f7fa fd34 	bl	8000fb8 <HAL_RCC_OscConfig>
 8006550:	b100      	cbz	r0, 8006554 <SystemClock_Config+0x98>
 8006552:	e7fe      	b.n	8006552 <SystemClock_Config+0x96>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006554:	233f      	movs	r3, #63	; 0x3f
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006556:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800655a:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800655c:	2104      	movs	r1, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800655e:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006560:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006562:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006564:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006566:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006568:	2308      	movs	r3, #8
 800656a:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800656c:	2340      	movs	r3, #64	; 0x40
 800656e:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006570:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006572:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006574:	f7fb f8ba 	bl	80016ec <HAL_RCC_ClockConfig>
 8006578:	b100      	cbz	r0, 800657c <SystemClock_Config+0xc0>
 800657a:	e7fe      	b.n	800657a <SystemClock_Config+0xbe>
	{
		Error_Handler();
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI5
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <SystemClock_Config+0x108>)
	PeriphClkInitStruct.PLL2.PLL2N = 50;
	PeriphClkInitStruct.PLL2.PLL2P = 2;
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
	PeriphClkInitStruct.PLL2.PLL2R = 2;
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800657e:	9024      	str	r0, [sp, #144]	; 0x90
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SPI5
 8006580:	931d      	str	r3, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLL2.PLL2N = 50;
 8006582:	2332      	movs	r3, #50	; 0x32
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006584:	9025      	str	r0, [sp, #148]	; 0x94
	PeriphClkInitStruct.PLL2.PLL2N = 50;
 8006586:	931f      	str	r3, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8006588:	2304      	movs	r3, #4
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800658a:	903a      	str	r0, [sp, #232]	; 0xe8
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800658c:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800658e:	9321      	str	r3, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8006590:	23c0      	movs	r3, #192	; 0xc0
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 8006592:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8006594:	9323      	str	r3, [sp, #140]	; 0x8c
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8006596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 800659a:	9420      	str	r4, [sp, #128]	; 0x80
	PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800659c:	9335      	str	r3, [sp, #212]	; 0xd4
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800659e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80065a2:	9422      	str	r4, [sp, #136]	; 0x88
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80065a4:	933e      	str	r3, [sp, #248]	; 0xf8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065a6:	f7fb fc2f 	bl	8001e08 <HAL_RCCEx_PeriphCLKConfig>
 80065aa:	b100      	cbz	r0, 80065ae <SystemClock_Config+0xf2>
 80065ac:	e7fe      	b.n	80065ac <SystemClock_Config+0xf0>
	{
		Error_Handler();
	}
	/** Enable USB Voltage detector
	*/
	HAL_PWREx_EnableUSBVoltageDetector();
 80065ae:	f7fa fcfb 	bl	8000fa8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80065b2:	b04d      	add	sp, #308	; 0x134
 80065b4:	bd30      	pop	{r4, r5, pc}
 80065b6:	bf00      	nop
 80065b8:	58024800 	.word	0x58024800
 80065bc:	58000400 	.word	0x58000400
 80065c0:	58024400 	.word	0x58024400
 80065c4:	00042002 	.word	0x00042002

080065c8 <main>:
{
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	b092      	sub	sp, #72	; 0x48
	char buffer[20] = "Deived William filho do Deus!!!";
 80065ce:	4ba6      	ldr	r3, [pc, #664]	; (8006868 <main+0x2a0>)
 80065d0:	aa08      	add	r2, sp, #32
 80065d2:	f103 0510 	add.w	r5, r3, #16
 80065d6:	4617      	mov	r7, r2
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80065e0:	4614      	mov	r4, r2
 80065e2:	42ab      	cmp	r3, r5
 80065e4:	c403      	stmia	r4!, {r0, r1}
 80065e6:	4622      	mov	r2, r4
 80065e8:	d1f6      	bne.n	80065d8 <main+0x10>
 80065ea:	6818      	ldr	r0, [r3, #0]
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	2500      	movs	r5, #0
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SD_DETECT_Pin */
	GPIO_InitStruct.Pin = SD_DETECT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065ee:	2601      	movs	r6, #1

	/*Configure GPIO pin : SD_SELECT_Pin */
	GPIO_InitStruct.Pin = SD_SELECT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065f0:	f04f 0802 	mov.w	r8, #2
	char buffer[20] = "Deived William filho do Deus!!!";
 80065f4:	6020      	str	r0, [r4, #0]
	HAL_Init();
 80065f6:	f7fa f879 	bl	80006ec <HAL_Init>
	huart3.Instance = USART3;
 80065fa:	4c9c      	ldr	r4, [pc, #624]	; (800686c <main+0x2a4>)
	SystemClock_Config();
 80065fc:	f7ff ff5e 	bl	80064bc <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006600:	2214      	movs	r2, #20
 8006602:	2100      	movs	r1, #0
 8006604:	a80d      	add	r0, sp, #52	; 0x34
 8006606:	f000 fdf5 	bl	80071f4 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800660a:	4b99      	ldr	r3, [pc, #612]	; (8006870 <main+0x2a8>)
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 800660c:	4899      	ldr	r0, [pc, #612]	; (8006874 <main+0x2ac>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800660e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006612:	f042 0204 	orr.w	r2, r2, #4
 8006616:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800661a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800661e:	f002 0204 	and.w	r2, r2, #4
 8006622:	9201      	str	r2, [sp, #4]
 8006624:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8006626:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800662a:	f042 0220 	orr.w	r2, r2, #32
 800662e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006632:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006636:	f002 0220 	and.w	r2, r2, #32
 800663a:	9202      	str	r2, [sp, #8]
 800663c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800663e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006642:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006646:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800664a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800664e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006652:	9203      	str	r2, [sp, #12]
 8006654:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006656:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800665a:	f042 0202 	orr.w	r2, r2, #2
 800665e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006662:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006666:	f002 0202 	and.w	r2, r2, #2
 800666a:	9204      	str	r2, [sp, #16]
 800666c:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800666e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006672:	f042 0208 	orr.w	r2, r2, #8
 8006676:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800667a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800667e:	f002 0208 	and.w	r2, r2, #8
 8006682:	9205      	str	r2, [sp, #20]
 8006684:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8006686:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800668a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800668e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006692:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006696:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800669a:	9206      	str	r2, [sp, #24]
 800669c:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800669e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 80066aa:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80066ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 80066b0:	4611      	mov	r1, r2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 80066ba:	f7fa fb67 	bl	8000d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80066be:	2200      	movs	r2, #0
 80066c0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80066c4:	486c      	ldr	r0, [pc, #432]	; (8006878 <main+0x2b0>)
 80066c6:	f7fa fb61 	bl	8000d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80066ca:	2200      	movs	r2, #0
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	486b      	ldr	r0, [pc, #428]	; (800687c <main+0x2b4>)
 80066d0:	f7fa fb5c 	bl	8000d8c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80066d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80066d8:	a90d      	add	r1, sp, #52	; 0x34
 80066da:	4866      	ldr	r0, [pc, #408]	; (8006874 <main+0x2ac>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80066dc:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066de:	4b68      	ldr	r3, [pc, #416]	; (8006880 <main+0x2b8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e0:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066e2:	930e      	str	r3, [sp, #56]	; 0x38
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80066e4:	f7fa f8d6 	bl	8000894 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80066e8:	2304      	movs	r3, #4
	HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80066ea:	a90d      	add	r1, sp, #52	; 0x34
 80066ec:	4863      	ldr	r0, [pc, #396]	; (800687c <main+0x2b4>)
	GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80066ee:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80066f0:	4b64      	ldr	r3, [pc, #400]	; (8006884 <main+0x2bc>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066f2:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80066f4:	930e      	str	r3, [sp, #56]	; 0x38
	HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80066f6:	f7fa f8cd 	bl	8000894 <HAL_GPIO_Init>
	HAL_GPIO_Init(SD_SELECT_GPIO_Port, &GPIO_InitStruct);
 80066fa:	a90d      	add	r1, sp, #52	; 0x34
 80066fc:	485d      	ldr	r0, [pc, #372]	; (8006874 <main+0x2ac>)
	GPIO_InitStruct.Pin = SD_SELECT_Pin;
 80066fe:	960d      	str	r6, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006700:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006702:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006704:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	HAL_GPIO_Init(SD_SELECT_GPIO_Port, &GPIO_InitStruct);
 8006708:	f7fa f8c4 	bl	8000894 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800670c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006710:	a90d      	add	r1, sp, #52	; 0x34
 8006712:	4859      	ldr	r0, [pc, #356]	; (8006878 <main+0x2b0>)
	GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8006714:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006716:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006718:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800671a:	9510      	str	r5, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800671c:	f7fa f8ba 	bl	8000894 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006720:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006722:	a90d      	add	r1, sp, #52	; 0x34
 8006724:	4855      	ldr	r0, [pc, #340]	; (800687c <main+0x2b4>)
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006726:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006728:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672a:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800672c:	9510      	str	r5, [sp, #64]	; 0x40
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800672e:	f7fa f8b1 	bl	8000894 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006732:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006734:	a90d      	add	r1, sp, #52	; 0x34
 8006736:	4851      	ldr	r0, [pc, #324]	; (800687c <main+0x2b4>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006738:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800673a:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	950f      	str	r5, [sp, #60]	; 0x3c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800673e:	f7fa f8a9 	bl	8000894 <HAL_GPIO_Init>
	huart3.Init.BaudRate = 115200;
 8006742:	4b51      	ldr	r3, [pc, #324]	; (8006888 <main+0x2c0>)
 8006744:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8006748:	4620      	mov	r0, r4
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800674a:	60a5      	str	r5, [r4, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800674c:	60e5      	str	r5, [r4, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800674e:	6125      	str	r5, [r4, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006750:	61a5      	str	r5, [r4, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006752:	61e5      	str	r5, [r4, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006754:	6225      	str	r5, [r4, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006756:	6265      	str	r5, [r4, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006758:	62a5      	str	r5, [r4, #40]	; 0x28
	huart3.Init.BaudRate = 115200;
 800675a:	e884 4008 	stmia.w	r4, {r3, lr}
	huart3.Init.Mode = UART_MODE_TX_RX;
 800675e:	230c      	movs	r3, #12
 8006760:	6163      	str	r3, [r4, #20]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8006762:	f7fd ff8d 	bl	8004680 <HAL_UART_Init>
 8006766:	4601      	mov	r1, r0
 8006768:	b100      	cbz	r0, 800676c <main+0x1a4>
 800676a:	e7fe      	b.n	800676a <main+0x1a2>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800676c:	4620      	mov	r0, r4
 800676e:	f7fe f8a1 	bl	80048b4 <HAL_UARTEx_SetTxFifoThreshold>
 8006772:	4601      	mov	r1, r0
 8006774:	b100      	cbz	r0, 8006778 <main+0x1b0>
 8006776:	e7fe      	b.n	8006776 <main+0x1ae>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006778:	4620      	mov	r0, r4
 800677a:	f7fe f8f7 	bl	800496c <HAL_UARTEx_SetRxFifoThreshold>
 800677e:	b100      	cbz	r0, 8006782 <main+0x1ba>
 8006780:	e7fe      	b.n	8006780 <main+0x1b8>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006782:	4620      	mov	r0, r4
 8006784:	f7fe f850 	bl	8004828 <HAL_UARTEx_DisableFifoMode>
 8006788:	b100      	cbz	r0, 800678c <main+0x1c4>
 800678a:	e7fe      	b.n	800678a <main+0x1c2>
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800678c:	4b3f      	ldr	r3, [pc, #252]	; (800688c <main+0x2c4>)
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800678e:	2409      	movs	r4, #9
 8006790:	4a3f      	ldr	r2, [pc, #252]	; (8006890 <main+0x2c8>)
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006792:	6118      	str	r0, [r3, #16]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006794:	6218      	str	r0, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006796:	6258      	str	r0, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006798:	6318      	str	r0, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800679a:	4618      	mov	r0, r3
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800679c:	f8c3 800c 	str.w	r8, [r3, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80067a0:	f8c3 8018 	str.w	r8, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80067a4:	61de      	str	r6, [r3, #28]
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80067a6:	629e      	str	r6, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80067a8:	62de      	str	r6, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80067aa:	e883 0014 	stmia.w	r3, {r2, r4}
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80067ae:	f7fa fb19 	bl	8000de4 <HAL_PCD_Init>
 80067b2:	b100      	cbz	r0, 80067b6 <main+0x1ee>
 80067b4:	e7fe      	b.n	80067b4 <main+0x1ec>
	hspi5.Instance = SPI5;
 80067b6:	4b37      	ldr	r3, [pc, #220]	; (8006894 <main+0x2cc>)
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80067b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80067bc:	4936      	ldr	r1, [pc, #216]	; (8006898 <main+0x2d0>)
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80067be:	6098      	str	r0, [r3, #8]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80067c0:	6118      	str	r0, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067c2:	6158      	str	r0, [r3, #20]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067c4:	6218      	str	r0, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80067c6:	6258      	str	r0, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c8:	6298      	str	r0, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 0x0;
 80067ca:	62d8      	str	r0, [r3, #44]	; 0x2c
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80067cc:	6358      	str	r0, [r3, #52]	; 0x34
	hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80067ce:	6398      	str	r0, [r3, #56]	; 0x38
	hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80067d0:	63d8      	str	r0, [r3, #60]	; 0x3c
	hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80067d2:	6418      	str	r0, [r3, #64]	; 0x40
	hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80067d4:	6458      	str	r0, [r3, #68]	; 0x44
	hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80067d6:	6498      	str	r0, [r3, #72]	; 0x48
	hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80067d8:	64d8      	str	r0, [r3, #76]	; 0x4c
	hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80067da:	6518      	str	r0, [r3, #80]	; 0x50
	hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80067dc:	6598      	str	r0, [r3, #88]	; 0x58
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 80067de:	4618      	mov	r0, r3
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80067e0:	e883 0006 	stmia.w	r3, {r1, r2}
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80067e4:	2207      	movs	r2, #7
 80067e6:	60da      	str	r2, [r3, #12]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80067e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80067ec:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80067ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f2:	61da      	str	r2, [r3, #28]
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80067f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 80067fa:	f7fc f9f5 	bl	8002be8 <HAL_SPI_Init>
 80067fe:	b100      	cbz	r0, 8006802 <main+0x23a>
 8006800:	e7fe      	b.n	8006800 <main+0x238>
	if(FSInit() != FALSE)
 8006802:	f7fe fbc5 	bl	8004f90 <FSInit>
 8006806:	b110      	cbz	r0, 800680e <main+0x246>
		printf("File system initialized\n");
 8006808:	4824      	ldr	r0, [pc, #144]	; (800689c <main+0x2d4>)
 800680a:	f000 fd6f 	bl	80072ec <puts>
	file = FSfopen("deived.txt", "w");
 800680e:	4924      	ldr	r1, [pc, #144]	; (80068a0 <main+0x2d8>)
 8006810:	4824      	ldr	r0, [pc, #144]	; (80068a4 <main+0x2dc>)
 8006812:	f7ff fcdb 	bl	80061cc <FSfopen>
	if(file == NULL)
 8006816:	4604      	mov	r4, r0
 8006818:	b910      	cbnz	r0, 8006820 <main+0x258>
		printf("not opened\n");
 800681a:	4823      	ldr	r0, [pc, #140]	; (80068a8 <main+0x2e0>)
 800681c:	f000 fd66 	bl	80072ec <puts>
	FSfwrite(buffer, sizeof(char), 20, file);
 8006820:	4623      	mov	r3, r4
 8006822:	2214      	movs	r2, #20
 8006824:	2101      	movs	r1, #1
 8006826:	4638      	mov	r0, r7
 8006828:	f7ff faec 	bl	8005e04 <FSfwrite>
	printf(buffer);
 800682c:	4638      	mov	r0, r7
 800682e:	f000 fce9 	bl	8007204 <iprintf>
	if(!FSfclose(file))
 8006832:	4620      	mov	r0, r4
 8006834:	f7ff fa22 	bl	8005c7c <FSfclose>
 8006838:	b910      	cbnz	r0, 8006840 <main+0x278>
		printf("file closed sucess\n");
 800683a:	481c      	ldr	r0, [pc, #112]	; (80068ac <main+0x2e4>)
 800683c:	f000 fd56 	bl	80072ec <puts>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006840:	4c0d      	ldr	r4, [pc, #52]	; (8006878 <main+0x2b0>)
		if(SDCardIsDetected())
 8006842:	f7ff fe19 	bl	8006478 <SDCardIsDetected>
 8006846:	4602      	mov	r2, r0
 8006848:	b100      	cbz	r0, 800684c <main+0x284>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800684a:	2201      	movs	r2, #1
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800684c:	4620      	mov	r0, r4
 800684e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006852:	f7fa fa9b 	bl	8000d8c <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006856:	4620      	mov	r0, r4
 8006858:	2180      	movs	r1, #128	; 0x80
 800685a:	f7fa fab1 	bl	8000dc0 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800685e:	2064      	movs	r0, #100	; 0x64
 8006860:	f7f9 ff84 	bl	800076c <HAL_Delay>
		if(SDCardIsDetected())
 8006864:	e7ed      	b.n	8006842 <main+0x27a>
 8006866:	bf00      	nop
 8006868:	08008148 	.word	0x08008148
 800686c:	20000874 	.word	0x20000874
 8006870:	58024400 	.word	0x58024400
 8006874:	58020800 	.word	0x58020800
 8006878:	58020400 	.word	0x58020400
 800687c:	58021800 	.word	0x58021800
 8006880:	11110000 	.word	0x11110000
 8006884:	11210000 	.word	0x11210000
 8006888:	40004800 	.word	0x40004800
 800688c:	20000900 	.word	0x20000900
 8006890:	40080000 	.word	0x40080000
 8006894:	200007ec 	.word	0x200007ec
 8006898:	40015000 	.word	0x40015000
 800689c:	080083fc 	.word	0x080083fc
 80068a0:	08008414 	.word	0x08008414
 80068a4:	08008416 	.word	0x08008416
 80068a8:	08008421 	.word	0x08008421
 80068ac:	0800842c 	.word	0x0800842c

080068b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068b0:	e7fe      	b.n	80068b0 <Error_Handler>
	...

080068b4 <DEBUG_Message>:
	while(1);
}

void DEBUG_Message(const char* msg, const char* function, const char* file, int line)
{
 80068b4:	b507      	push	{r0, r1, r2, lr}
	printf("Debug: %s, Function %s, File: %s, Line %i\n", msg, function ,file, line);
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	460a      	mov	r2, r1
 80068bc:	4601      	mov	r1, r0
 80068be:	4803      	ldr	r0, [pc, #12]	; (80068cc <DEBUG_Message+0x18>)
 80068c0:	f000 fca0 	bl	8007204 <iprintf>
}
 80068c4:	b003      	add	sp, #12
 80068c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80068ca:	bf00      	nop
 80068cc:	080083a4 	.word	0x080083a4

080068d0 <assert_failed>:
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
	printf("Wrong parameters value: file %s on line %u\r\n", file, line);
 80068d0:	460a      	mov	r2, r1
 80068d2:	4601      	mov	r1, r0
 80068d4:	4801      	ldr	r0, [pc, #4]	; (80068dc <assert_failed+0xc>)
 80068d6:	f000 bc95 	b.w	8007204 <iprintf>
 80068da:	bf00      	nop
 80068dc:	080083cf 	.word	0x080083cf

080068e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <HAL_MspInit+0x20>)
{
 80068e2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068e4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80068e8:	f042 0202 	orr.w	r2, r2, #2
 80068ec:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80068f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068fc:	b002      	add	sp, #8
 80068fe:	4770      	bx	lr
 8006900:	58024400 	.word	0x58024400

08006904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006904:	b510      	push	{r4, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800690a:	2214      	movs	r2, #20
 800690c:	2100      	movs	r1, #0
 800690e:	a803      	add	r0, sp, #12
 8006910:	f000 fc70 	bl	80071f4 <memset>
  if(hspi->Instance==SPI5)
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <HAL_SPI_MspInit+0x68>)
 8006918:	429a      	cmp	r2, r3
 800691a:	d124      	bne.n	8006966 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800691c:	4b14      	ldr	r3, [pc, #80]	; (8006970 <HAL_SPI_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800691e:	a903      	add	r1, sp, #12
 8006920:	4814      	ldr	r0, [pc, #80]	; (8006974 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006922:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006926:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800692a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800692e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006932:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006936:	9201      	str	r2, [sp, #4]
 8006938:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800693a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800693e:	f042 0220 	orr.w	r2, r2, #32
 8006942:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006952:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006956:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006958:	2302      	movs	r3, #2
 800695a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800695c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800695e:	2305      	movs	r3, #5
 8006960:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006962:	f7f9 ff97 	bl	8000894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006966:	b008      	add	sp, #32
 8006968:	bd10      	pop	{r4, pc}
 800696a:	bf00      	nop
 800696c:	40015000 	.word	0x40015000
 8006970:	58024400 	.word	0x58024400
 8006974:	58021400 	.word	0x58021400

08006978 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI5)
 8006978:	6802      	ldr	r2, [r0, #0]
 800697a:	4b08      	ldr	r3, [pc, #32]	; (800699c <HAL_SPI_MspDeInit+0x24>)
 800697c:	429a      	cmp	r2, r3
 800697e:	d10b      	bne.n	8006998 <HAL_SPI_MspDeInit+0x20>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <HAL_SPI_MspDeInit+0x28>)
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8006982:	f44f 7160 	mov.w	r1, #896	; 0x380
 8006986:	4807      	ldr	r0, [pc, #28]	; (80069a4 <HAL_SPI_MspDeInit+0x2c>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006988:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 800698c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006990:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8006994:	f7fa b90a 	b.w	8000bac <HAL_GPIO_DeInit>
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40015000 	.word	0x40015000
 80069a0:	58024400 	.word	0x58024400
 80069a4:	58021400 	.word	0x58021400

080069a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80069a8:	b510      	push	{r4, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ae:	2214      	movs	r2, #20
 80069b0:	2100      	movs	r1, #0
 80069b2:	a803      	add	r0, sp, #12
 80069b4:	f000 fc1e 	bl	80071f4 <memset>
  if(huart->Instance==USART3)
 80069b8:	6822      	ldr	r2, [r4, #0]
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <HAL_UART_MspInit+0x64>)
 80069bc:	429a      	cmp	r2, r3
 80069be:	d123      	bne.n	8006a08 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80069c0:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069c2:	a903      	add	r1, sp, #12
 80069c4:	4813      	ldr	r0, [pc, #76]	; (8006a14 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80069c6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80069ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80069ce:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80069d2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80069d6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80069da:	9201      	str	r2, [sp, #4]
 80069dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80069e2:	f042 0208 	orr.w	r2, r2, #8
 80069e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80069ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80069f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069fc:	2302      	movs	r3, #2
 80069fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a00:	2307      	movs	r3, #7
 8006a02:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a04:	f7f9 ff46 	bl	8000894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006a08:	b008      	add	sp, #32
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	40004800 	.word	0x40004800
 8006a10:	58024400 	.word	0x58024400
 8006a14:	58020c00 	.word	0x58020c00

08006a18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006a18:	b510      	push	{r4, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a1e:	2214      	movs	r2, #20
 8006a20:	2100      	movs	r1, #0
 8006a22:	a803      	add	r0, sp, #12
 8006a24:	f000 fbe6 	bl	80071f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <HAL_PCD_MspInit+0x78>)
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d12d      	bne.n	8006a8c <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a30:	4c18      	ldr	r4, [pc, #96]	; (8006a94 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a32:	a903      	add	r1, sp, #12
 8006a34:	4818      	ldr	r0, [pc, #96]	; (8006a98 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006a42:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006a4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006a52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a54:	2302      	movs	r3, #2
 8006a56:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006a58:	230a      	movs	r3, #10
 8006a5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a5c:	f7f9 ff1a 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006a60:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006a64:	a903      	add	r1, sp, #12
 8006a66:	480c      	ldr	r0, [pc, #48]	; (8006a98 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006a68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a6e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006a70:	f7f9 ff10 	bl	8000894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a74:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8006a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a7c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006a80:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8006a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a88:	9302      	str	r3, [sp, #8]
 8006a8a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006a8c:	b008      	add	sp, #32
 8006a8e:	bd10      	pop	{r4, pc}
 8006a90:	40080000 	.word	0x40080000
 8006a94:	58024400 	.word	0x58024400
 8006a98:	58020000 	.word	0x58020000

08006a9c <NMI_Handler>:
 8006a9c:	4770      	bx	lr

08006a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a9e:	e7fe      	b.n	8006a9e <HardFault_Handler>

08006aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006aa0:	e7fe      	b.n	8006aa0 <MemManage_Handler>

08006aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006aa2:	e7fe      	b.n	8006aa2 <BusFault_Handler>

08006aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006aa4:	e7fe      	b.n	8006aa4 <UsageFault_Handler>

08006aa6 <SVC_Handler>:
 8006aa6:	4770      	bx	lr

08006aa8 <DebugMon_Handler>:
 8006aa8:	4770      	bx	lr

08006aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006aaa:	4770      	bx	lr

08006aac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006aac:	f7f9 be4c 	b.w	8000748 <HAL_IncTick>

08006ab0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	460e      	mov	r6, r1
 8006ab4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	1ba3      	subs	r3, r4, r6
 8006aba:	429d      	cmp	r5, r3
 8006abc:	dc01      	bgt.n	8006ac2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8006abe:	4628      	mov	r0, r5
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8006ac2:	f3af 8000 	nop.w
 8006ac6:	f804 0b01 	strb.w	r0, [r4], #1
 8006aca:	e7f5      	b.n	8006ab8 <_read+0x8>

08006acc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	460e      	mov	r6, r1
 8006ad0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	1ba3      	subs	r3, r4, r6
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	dc01      	bgt.n	8006ade <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8006ada:	4628      	mov	r0, r5
 8006adc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8006ade:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006ae2:	f7ff fcd5 	bl	8006490 <__io_putchar>
 8006ae6:	e7f5      	b.n	8006ad4 <_write+0x8>

08006ae8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8006ae8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <_sbrk+0x2c>)
{
 8006aec:	4602      	mov	r2, r0
	if (heap_end == 0)
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	b909      	cbnz	r1, 8006af6 <_sbrk+0xe>
		heap_end = &end;
 8006af2:	4909      	ldr	r1, [pc, #36]	; (8006b18 <_sbrk+0x30>)
 8006af4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8006af6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006af8:	4669      	mov	r1, sp
 8006afa:	4402      	add	r2, r0
 8006afc:	428a      	cmp	r2, r1
 8006afe:	d906      	bls.n	8006b0e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006b00:	f000 fb2e 	bl	8007160 <__errno>
 8006b04:	230c      	movs	r3, #12
 8006b06:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8006b0e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8006b10:	bd08      	pop	{r3, pc}
 8006b12:	bf00      	nop
 8006b14:	20000210 	.word	0x20000210
 8006b18:	20000d10 	.word	0x20000d10

08006b1c <_close>:

int _close(int file)
{
	return -1;
}
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	4770      	bx	lr

08006b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006b26:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006b28:	604b      	str	r3, [r1, #4]
}
 8006b2a:	4770      	bx	lr

08006b2c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	4770      	bx	lr

08006b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006b30:	2000      	movs	r0, #0
 8006b32:	4770      	bx	lr

08006b34 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b34:	4918      	ldr	r1, [pc, #96]	; (8006b98 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006b36:	4819      	ldr	r0, [pc, #100]	; (8006b9c <SystemInit+0x68>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b38:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8006b40:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8006b46:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <SystemInit+0x6c>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006b50:	2200      	movs	r2, #0
 8006b52:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	4020      	ands	r0, r4
 8006b58:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006b5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006b5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006b5e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8006b60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006b66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006b6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8006b76:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006b78:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <SystemInit+0x70>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	041b      	lsls	r3, r3, #16
 8006b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b86:	d202      	bcs.n	8006b8e <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <SystemInit+0x74>)
 8006b8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b92:	608b      	str	r3, [r1, #8]
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	bf00      	nop
 8006b98:	e000ed00 	.word	0xe000ed00
 8006b9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	5c001000 	.word	0x5c001000
 8006ba8:	51008108 	.word	0x51008108

08006bac <SD_Select>:
}


static void SD_Select(void)
{
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_RESET);
 8006bac:	2200      	movs	r2, #0
 8006bae:	2101      	movs	r1, #1
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <SD_Select+0xc>)
 8006bb2:	f7fa b8eb 	b.w	8000d8c <HAL_GPIO_WritePin>
 8006bb6:	bf00      	nop
 8006bb8:	58020800 	.word	0x58020800

08006bbc <SD_DeSelect>:
}

static void SD_DeSelect(void)
{
	HAL_GPIO_WritePin(SD_SELECT_GPIO_Port, SD_SELECT_Pin, GPIO_PIN_SET);
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	4802      	ldr	r0, [pc, #8]	; (8006bc8 <SD_DeSelect+0xc>)
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	f7fa b8e3 	b.w	8000d8c <HAL_GPIO_WritePin>
 8006bc6:	bf00      	nop
 8006bc8:	58020800 	.word	0x58020800

08006bcc <SPI_WriteByte>:
{
 8006bcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006bce:	f88d 000f 	strb.w	r0, [sp, #15]
	while(HAL_SPI_GetState(&hspi5) != HAL_SPI_STATE_READY);
 8006bd2:	480a      	ldr	r0, [pc, #40]	; (8006bfc <SPI_WriteByte+0x30>)
 8006bd4:	f7fc faec 	bl	80031b0 <HAL_SPI_GetState>
 8006bd8:	2801      	cmp	r0, #1
 8006bda:	4603      	mov	r3, r0
 8006bdc:	d1f9      	bne.n	8006bd2 <SPI_WriteByte+0x6>
	HAL_SPI_TransmitReceive(&hspi5, &byte, &receive, 1, 1000);
 8006bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be2:	f10d 010f 	add.w	r1, sp, #15
 8006be6:	4805      	ldr	r0, [pc, #20]	; (8006bfc <SPI_WriteByte+0x30>)
 8006be8:	9200      	str	r2, [sp, #0]
 8006bea:	f10d 0217 	add.w	r2, sp, #23
 8006bee:	f7fc f94b 	bl	8002e88 <HAL_SPI_TransmitReceive>
}
 8006bf2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006bf6:	b007      	add	sp, #28
 8006bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bfc:	200007ec 	.word	0x200007ec

08006c00 <SetCommand>:
{
 8006c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c04:	9f07      	ldr	r7, [sp, #28]
    (*((unsigned long long*)command_array)) |= ((unsigned long long)argument) << 8;
 8006c06:	2600      	movs	r6, #0
    (*((unsigned long long*)command_array)) |= ((unsigned long long)command) << 40;
 8006c08:	ea4f 2903 	mov.w	r9, r3, lsl #8
    (*((unsigned long long*)command_array)) |= ((unsigned long long)argument) << 8;
 8006c0c:	0e3d      	lsrs	r5, r7, #24
 8006c0e:	023c      	lsls	r4, r7, #8
    (*((unsigned long long*)command_array)) |= ((unsigned char)crc7) << 1;
 8006c10:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8006c14:	007f      	lsls	r7, r7, #1
    (*((unsigned long long*)command_array)) |= ((unsigned char)end_bit) & 0x0000000000000001;
 8006c16:	433c      	orrs	r4, r7
 8006c18:	ea45 75e7 	orr.w	r5, r5, r7, asr #31
 8006c1c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8006c20:	ea45 0509 	orr.w	r5, r5, r9
    (*((unsigned long long*)command_array)) |= ((unsigned long long)host_bit) << 46;
 8006c24:	ea4f 3982 	mov.w	r9, r2, lsl #14
    (*((unsigned long long*)command_array)) |= ((unsigned char)end_bit) & 0x0000000000000001;
 8006c28:	f007 0701 	and.w	r7, r7, #1
 8006c2c:	ea45 0509 	orr.w	r5, r5, r9
 8006c30:	433c      	orrs	r4, r7
 8006c32:	4334      	orrs	r4, r6
 8006c34:	e9d0 2300 	ldrd	r2, r3, [r0]
 8006c38:	4334      	orrs	r4, r6
 8006c3a:	431d      	orrs	r5, r3
    (*((unsigned long long*)command_array)) |= (((unsigned long long)start_bit) << 47);
 8006c3c:	03cb      	lsls	r3, r1, #15
    (*((unsigned long long*)command_array)) |= ((unsigned char)end_bit) & 0x0000000000000001;
 8006c3e:	4314      	orrs	r4, r2
 8006c40:	431d      	orrs	r5, r3
 8006c42:	4334      	orrs	r4, r6
 8006c44:	e9c0 4500 	strd	r4, r5, [r0]
 8006c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006c4c <SendMMCCmd>:

	return TRUE;
}

static MMC_RESPONSE SendMMCCmd(SdCMD cmd, DWORD address)
{
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE cmd_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	MMC_RESPONSE response;
	int i;
	int timeout = 0x8;

	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 8006c50:	4d41      	ldr	r5, [pc, #260]	; (8006d58 <SendMMCCmd+0x10c>)
 8006c52:	008e      	lsls	r6, r1, #2
 8006c54:	f04f 0e01 	mov.w	lr, #1
{
 8006c58:	b087      	sub	sp, #28
	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 8006c5a:	eb05 0a06 	add.w	sl, r5, r6
 8006c5e:	f815 3021 	ldrb.w	r3, [r5, r1, lsl #2]
{
 8006c62:	4607      	mov	r7, r0
	BYTE cmd_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8006c64:	2000      	movs	r0, #0
	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 8006c66:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8006c6a:	f8cd e008 	str.w	lr, [sp, #8]
 8006c6e:	fa21 f10e 	lsr.w	r1, r1, lr
	BYTE cmd_array[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8006c72:	9004      	str	r0, [sp, #16]
 8006c74:	9005      	str	r0, [sp, #20]
	SetCommand(cmd_array, 0, 1, cmdTable[cmd].CmdCode, address, cmdTable[cmd].sdCRC >> 1, 1);
 8006c76:	9101      	str	r1, [sp, #4]
 8006c78:	4601      	mov	r1, r0
 8006c7a:	9200      	str	r2, [sp, #0]
 8006c7c:	a804      	add	r0, sp, #16
 8006c7e:	4672      	mov	r2, lr
 8006c80:	f7ff ffbe 	bl	8006c00 <SetCommand>
//	if(SD_ReadyWait() != 0xFF)
//	{
//		response.r1._byte = 0xFF;
//		return response;
//	}
	SD_Select();
 8006c84:	f7ff ff92 	bl	8006bac <SD_Select>
	(void)SPI_WriteByte(cmd_array[5]);
 8006c88:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8006c8c:	f7ff ff9e 	bl	8006bcc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[4]);
 8006c90:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8006c94:	f7ff ff9a 	bl	8006bcc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[3]);
 8006c98:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8006c9c:	f7ff ff96 	bl	8006bcc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[2]);
 8006ca0:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8006ca4:	f7ff ff92 	bl	8006bcc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[1]);
 8006ca8:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8006cac:	f7ff ff8e 	bl	8006bcc <SPI_WriteByte>
	(void)SPI_WriteByte(cmd_array[0]);
 8006cb0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8006cb4:	f7ff ff8a 	bl	8006bcc <SPI_WriteByte>

	if(cmdTable[cmd].responsetype == R1 || cmdTable[cmd].responsetype == R1b  || cmdTable[cmd].responsetype == R7)
 8006cb8:	f89a a002 	ldrb.w	sl, [sl, #2]
 8006cbc:	f1ba 0f01 	cmp.w	sl, #1
 8006cc0:	d902      	bls.n	8006cc8 <SendMMCCmd+0x7c>
 8006cc2:	f1ba 0f04 	cmp.w	sl, #4
 8006cc6:	d125      	bne.n	8006d14 <SendMMCCmd+0xc8>
 8006cc8:	f04f 0b08 	mov.w	fp, #8
	{
		do
		{
			response.r1._byte = SPI_ReadByte();
 8006ccc:	20ff      	movs	r0, #255	; 0xff
 8006cce:	f7ff ff7d 	bl	8006bcc <SPI_WriteByte>
			timeout--;
		}while(response.r1._byte == MMC_FLOATING_BUS && timeout != 0);
 8006cd2:	28ff      	cmp	r0, #255	; 0xff
			response.r1._byte = SPI_ReadByte();
 8006cd4:	4680      	mov	r8, r0
		}while(response.r1._byte == MMC_FLOATING_BUS && timeout != 0);
 8006cd6:	d102      	bne.n	8006cde <SendMMCCmd+0x92>
 8006cd8:	f1bb 0b01 	subs.w	fp, fp, #1
 8006cdc:	d1f6      	bne.n	8006ccc <SendMMCCmd+0x80>
	{
		(void)SPI_WriteByte(0xFF);
		response.r2._byte1 = SPI_ReadByte();
		response.r2._byte0 = SPI_ReadByte();
	}
	if(cmdTable[cmd].responsetype == R1b)
 8006cde:	f1ba 0f01 	cmp.w	sl, #1
 8006ce2:	d036      	beq.n	8006d52 <SendMMCCmd+0x106>
				timeout--;
			}while((response.r1._byte != 0x00) && (timeout != 0));
		}
	}

	if(cmdTable[cmd].responsetype == R7)
 8006ce4:	f1ba 0f04 	cmp.w	sl, #4
 8006ce8:	d122      	bne.n	8006d30 <SendMMCCmd+0xe4>
	{
		response.r7.bytewise._returnVal = ((DWORD)SPI_ReadByte()) << 24;
 8006cea:	20ff      	movs	r0, #255	; 0xff
 8006cec:	f7ff ff6e 	bl	8006bcc <SPI_WriteByte>
 8006cf0:	4604      	mov	r4, r0
		response.r7.bytewise._returnVal += ((DWORD)SPI_ReadByte()) << 16;
 8006cf2:	20ff      	movs	r0, #255	; 0xff
 8006cf4:	f7ff ff6a 	bl	8006bcc <SPI_WriteByte>
 8006cf8:	0400      	lsls	r0, r0, #16
 8006cfa:	eb00 6404 	add.w	r4, r0, r4, lsl #24
		response.r7.bytewise._returnVal += ((DWORD)SPI_ReadByte()) << 8;
 8006cfe:	20ff      	movs	r0, #255	; 0xff
 8006d00:	f7ff ff64 	bl	8006bcc <SPI_WriteByte>
 8006d04:	4682      	mov	sl, r0
		response.r7.bytewise._returnVal += ((DWORD)SPI_ReadByte());
 8006d06:	20ff      	movs	r0, #255	; 0xff
 8006d08:	f7ff ff60 	bl	8006bcc <SPI_WriteByte>
 8006d0c:	4404      	add	r4, r0
 8006d0e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8006d12:	e00d      	b.n	8006d30 <SendMMCCmd+0xe4>
	else if(cmdTable[cmd].responsetype == R2)
 8006d14:	f1ba 0f02 	cmp.w	sl, #2
 8006d18:	d10a      	bne.n	8006d30 <SendMMCCmd+0xe4>
		(void)SPI_WriteByte(0xFF);
 8006d1a:	20ff      	movs	r0, #255	; 0xff
 8006d1c:	f7ff ff56 	bl	8006bcc <SPI_WriteByte>
		response.r2._byte1 = SPI_ReadByte();
 8006d20:	20ff      	movs	r0, #255	; 0xff
 8006d22:	f7ff ff53 	bl	8006bcc <SPI_WriteByte>
 8006d26:	4681      	mov	r9, r0
		response.r2._byte0 = SPI_ReadByte();
 8006d28:	20ff      	movs	r0, #255	; 0xff
 8006d2a:	f7ff ff4f 	bl	8006bcc <SPI_WriteByte>
 8006d2e:	4680      	mov	r8, r0
	}

	(void)SPI_WriteByte(0xFF);
	if(!(cmdTable[cmd].moredataexpected))
 8006d30:	4435      	add	r5, r6
	(void)SPI_WriteByte(0xFF);
 8006d32:	20ff      	movs	r0, #255	; 0xff
 8006d34:	f7ff ff4a 	bl	8006bcc <SPI_WriteByte>
	if(!(cmdTable[cmd].moredataexpected))
 8006d38:	78eb      	ldrb	r3, [r5, #3]
 8006d3a:	b90b      	cbnz	r3, 8006d40 <SendMMCCmd+0xf4>
		SD_DeSelect();
 8006d3c:	f7ff ff3e 	bl	8006bbc <SD_DeSelect>

	return response;
}
 8006d40:	4638      	mov	r0, r7
	return response;
 8006d42:	f887 8000 	strb.w	r8, [r7]
 8006d46:	f887 9001 	strb.w	r9, [r7, #1]
 8006d4a:	607c      	str	r4, [r7, #4]
}
 8006d4c:	b007      	add	sp, #28
 8006d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d52:	f04f 0800 	mov.w	r8, #0
 8006d56:	e7eb      	b.n	8006d30 <SendMMCCmd+0xe4>
 8006d58:	080084f2 	.word	0x080084f2

08006d5c <MX_SPI5_FreqSwitch>:
{
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	4604      	mov	r4, r0
	if(HAL_SPI_DeInit(&hspi5) != HAL_OK)
 8006d60:	480c      	ldr	r0, [pc, #48]	; (8006d94 <MX_SPI5_FreqSwitch+0x38>)
 8006d62:	f7fc f857 	bl	8002e14 <HAL_SPI_DeInit>
 8006d66:	b108      	cbz	r0, 8006d6c <MX_SPI5_FreqSwitch+0x10>
		Error_Handler();
 8006d68:	f7ff fda2 	bl	80068b0 <Error_Handler>
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <MX_SPI5_FreqSwitch+0x38>)
	if(freq)
 8006d6e:	b16c      	cbz	r4, 8006d8c <MX_SPI5_FreqSwitch+0x30>
		hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 8006d74:	4807      	ldr	r0, [pc, #28]	; (8006d94 <MX_SPI5_FreqSwitch+0x38>)
		hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006d76:	61da      	str	r2, [r3, #28]
	if(HAL_SPI_Init(&hspi5) != HAL_OK)
 8006d78:	f7fb ff36 	bl	8002be8 <HAL_SPI_Init>
 8006d7c:	b148      	cbz	r0, 8006d92 <MX_SPI5_FreqSwitch+0x36>
		printf("SPI init error\n");
 8006d7e:	4806      	ldr	r0, [pc, #24]	; (8006d98 <MX_SPI5_FreqSwitch+0x3c>)
 8006d80:	f000 fab4 	bl	80072ec <puts>
}
 8006d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 8006d88:	f7ff bd92 	b.w	80068b0 <Error_Handler>
		hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006d8c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8006d90:	e7f0      	b.n	8006d74 <MX_SPI5_FreqSwitch+0x18>
 8006d92:	bd10      	pop	{r4, pc}
 8006d94:	200007ec 	.word	0x200007ec
 8006d98:	080084ce 	.word	0x080084ce

08006d9c <MDD_SDSPI_MediaInitialize>:



MEDIA_INFORMATION* MDD_SDSPI_MediaInitialize(void)
{
 8006d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BYTE CSDResponse[20];
	DWORD c_size;
	BYTE c_size_mult;
	BYTE block_len;

	MDD_SDSPI_finalLBA = 0;
 8006d9e:	2000      	movs	r0, #0
 8006da0:	4c7a      	ldr	r4, [pc, #488]	; (8006f8c <MDD_SDSPI_MediaInitialize+0x1f0>)
    MX_SPI5_FreqSwitch(LOW_SPEED);

	SD_DeSelect();
 8006da2:	250a      	movs	r5, #10
{
 8006da4:	b089      	sub	sp, #36	; 0x24
	MDD_SDSPI_finalLBA = 0;
 8006da6:	6020      	str	r0, [r4, #0]
    MX_SPI5_FreqSwitch(LOW_SPEED);
 8006da8:	f7ff ffd8 	bl	8006d5c <MX_SPI5_FreqSwitch>
	SD_DeSelect();
 8006dac:	f7ff ff06 	bl	8006bbc <SD_DeSelect>

	for(i = 0; i < 10; i++)
	{
		(void)SPI_WriteByte(0xFF);
 8006db0:	20ff      	movs	r0, #255	; 0xff
 8006db2:	f7ff ff0b 	bl	8006bcc <SPI_WriteByte>
	for(i = 0; i < 10; i++)
 8006db6:	3d01      	subs	r5, #1
 8006db8:	d1fa      	bne.n	8006db0 <MDD_SDSPI_MediaInitialize+0x14>
	}
	SD_Select();
 8006dba:	f7ff fef7 	bl	8006bac <SD_Select>

	response = SendMMCCmd(GO_IDLE_STATE, 0);
 8006dbe:	462a      	mov	r2, r5
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	a801      	add	r0, sp, #4
 8006dc4:	f7ff ff42 	bl	8006c4c <SendMMCCmd>
 8006dc8:	f89d 3004 	ldrb.w	r3, [sp, #4]

	if((response.r1._byte == MMC_BAD_RESPONSE) || ((response.r1._byte & 0xF7) != 0x01) )
 8006dcc:	2bff      	cmp	r3, #255	; 0xff
 8006dce:	d003      	beq.n	8006dd8 <MDD_SDSPI_MediaInitialize+0x3c>
 8006dd0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d007      	beq.n	8006de8 <MDD_SDSPI_MediaInitialize+0x4c>
	{
#ifdef SD_CARD_DEBUG
		DEBUG_Message("Sd not Initialized",__FUNCTION__ ,__FILE__, __LINE__);
#endif
		SD_DeSelect();
 8006dd8:	f7ff fef0 	bl	8006bbc <SD_DeSelect>
		mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 8006ddc:	2202      	movs	r2, #2
 8006dde:	4b6c      	ldr	r3, [pc, #432]	; (8006f90 <MDD_SDSPI_MediaInitialize+0x1f4>)
 8006de0:	701a      	strb	r2, [r3, #0]


	//MX_SPI5_FreqSwitch(MAX_FREQ);

    return &mediaInformation;
}
 8006de2:	486b      	ldr	r0, [pc, #428]	; (8006f90 <MDD_SDSPI_MediaInitialize+0x1f4>)
 8006de4:	b009      	add	sp, #36	; 0x24
 8006de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	response = SendMMCCmd(SEND_IF_COND, 0x1AA);
 8006de8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006dec:	2102      	movs	r1, #2
 8006dee:	a801      	add	r0, sp, #4
 8006df0:	f7ff ff2c 	bl	8006c4c <SendMMCCmd>
	if(((response.r7.bytewise._returnVal & 0xFFF) == 0x1AA) && (!response.r7.bitwise.bits.ILLEGAL_CMD))
 8006df4:	9b02      	ldr	r3, [sp, #8]
 8006df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfa:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 8006dfe:	f040 8086 	bne.w	8006f0e <MDD_SDSPI_MediaInitialize+0x172>
 8006e02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006e06:	075b      	lsls	r3, r3, #29
 8006e08:	f100 8081 	bmi.w	8006f0e <MDD_SDSPI_MediaInitialize+0x172>
 8006e0c:	f640 75ff 	movw	r5, #4095	; 0xfff
			response = SendMMCCmd(SEND_OP_COND, 0x40000000);
 8006e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e14:	2101      	movs	r1, #1
 8006e16:	a801      	add	r0, sp, #4
			timeout--;
 8006e18:	3d01      	subs	r5, #1
			response = SendMMCCmd(SEND_OP_COND, 0x40000000);
 8006e1a:	f7ff ff17 	bl	8006c4c <SendMMCCmd>
		while(response.r1._byte  != 0x00 && timeout != 0);
 8006e1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
			timeout--;
 8006e22:	b2ad      	uxth	r5, r5
		while(response.r1._byte  != 0x00 && timeout != 0);
 8006e24:	b10b      	cbz	r3, 8006e2a <MDD_SDSPI_MediaInitialize+0x8e>
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	d1f2      	bne.n	8006e10 <MDD_SDSPI_MediaInitialize+0x74>
		response = SendMMCCmd(READ_OCR, 0x0);
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2110      	movs	r1, #16
 8006e2e:	a801      	add	r0, sp, #4
 8006e30:	f7ff ff0c 	bl	8006c4c <SendMMCCmd>
		if(((response.r7.bytewise._returnVal & 0xC0000000) == 0xC0000000) && (response.r7.bytewise._byte == 0))
 8006e34:	9b02      	ldr	r3, [sp, #8]
 8006e36:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e3a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006e3e:	4b55      	ldr	r3, [pc, #340]	; (8006f94 <MDD_SDSPI_MediaInitialize+0x1f8>)
 8006e40:	d163      	bne.n	8006f0a <MDD_SDSPI_MediaInitialize+0x16e>
 8006e42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	d15f      	bne.n	8006f0a <MDD_SDSPI_MediaInitialize+0x16e>
			gSDMode = SD_MODE_HC;
 8006e4a:	2201      	movs	r2, #1
			gSDMode = SD_MODE_NORMAL;
 8006e4c:	701a      	strb	r2, [r3, #0]
	if(timeout == 0)
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	d06f      	beq.n	8006f32 <MDD_SDSPI_MediaInitialize+0x196>
		HAL_Delay(2);
 8006e52:	2002      	movs	r0, #2
		SD_DeSelect();
 8006e54:	f640 76ff 	movw	r6, #4095	; 0xfff
		HAL_Delay(2);
 8006e58:	f7f9 fc88 	bl	800076c <HAL_Delay>
		MX_SPI5_FreqSwitch(MAX_SPEED);
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	f7ff ff7d 	bl	8006d5c <MX_SPI5_FreqSwitch>
		SD_DeSelect();
 8006e62:	f7ff feab 	bl	8006bbc <SD_DeSelect>
			response = SendMMCCmd(SEND_CSD, 0x00);
 8006e66:	2200      	movs	r2, #0
 8006e68:	2103      	movs	r1, #3
 8006e6a:	a801      	add	r0, sp, #4
 8006e6c:	f7ff feee 	bl	8006c4c <SendMMCCmd>
		}while((response.r1._byte != 0x00) && (timeout != 0));
 8006e70:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8006e74:	2d00      	cmp	r5, #0
 8006e76:	d067      	beq.n	8006f48 <MDD_SDSPI_MediaInitialize+0x1ac>
 8006e78:	1e75      	subs	r5, r6, #1
 8006e7a:	b2ae      	uxth	r6, r5
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	d1f2      	bne.n	8006e66 <MDD_SDSPI_MediaInitialize+0xca>
 8006e80:	4635      	mov	r5, r6
			printf("[%i]\n", CSDResponse[index]);
 8006e82:	4f45      	ldr	r7, [pc, #276]	; (8006f98 <MDD_SDSPI_MediaInitialize+0x1fc>)
			CSDResponse[index] = SPI_ReadByte();
 8006e84:	20ff      	movs	r0, #255	; 0xff
 8006e86:	f7ff fea1 	bl	8006bcc <SPI_WriteByte>
 8006e8a:	ab08      	add	r3, sp, #32
 8006e8c:	4601      	mov	r1, r0
 8006e8e:	442b      	add	r3, r5
			index++;
 8006e90:	3501      	adds	r5, #1
			CSDResponse[index] = SPI_ReadByte();
 8006e92:	f803 0c14 	strb.w	r0, [r3, #-20]
			printf("[%i]\n", CSDResponse[index]);
 8006e96:	4638      	mov	r0, r7
 8006e98:	f000 f9b4 	bl	8007204 <iprintf>
			if((i == 0) && (CSDResponse[0] == DATA_START_TOKEN))
 8006e9c:	b926      	cbnz	r6, 8006ea8 <MDD_SDSPI_MediaInitialize+0x10c>
 8006e9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
				index = 0;
 8006ea2:	2bfe      	cmp	r3, #254	; 0xfe
 8006ea4:	bf08      	it	eq
 8006ea6:	2500      	moveq	r5, #0
		for(i = 0; i < 20; i++)
 8006ea8:	3601      	adds	r6, #1
 8006eaa:	2e14      	cmp	r6, #20
 8006eac:	d1ea      	bne.n	8006e84 <MDD_SDSPI_MediaInitialize+0xe8>
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 8006eae:	4b38      	ldr	r3, [pc, #224]	; (8006f90 <MDD_SDSPI_MediaInitialize+0x1f4>)
		gMediaSectorSize = 512u;
 8006eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eb4:	4d39      	ldr	r5, [pc, #228]	; (8006f9c <MDD_SDSPI_MediaInitialize+0x200>)
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 8006eb6:	785a      	ldrb	r2, [r3, #1]
		mediaInformation.sectorSize = gMediaSectorSize;
 8006eb8:	8059      	strh	r1, [r3, #2]
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 8006eba:	f042 0201 	orr.w	r2, r2, #1
		gMediaSectorSize = 512u;
 8006ebe:	8029      	strh	r1, [r5, #0]
 8006ec0:	f89d 1015 	ldrb.w	r1, [sp, #21]
		mediaInformation.validityFlags.bits.sectorSize = TRUE;
 8006ec4:	705a      	strb	r2, [r3, #1]
		if(CSDResponse[0] & 0xC0)	//Check CSD_STRUCTURE field for v2+ struct device
 8006ec6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006eca:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8006ece:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8006ed2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006ed6:	d039      	beq.n	8006f4c <MDD_SDSPI_MediaInitialize+0x1b0>
			c_size = (((DWORD)CSDResponse[7] & 0x3F) << 16) | ((WORD)CSDResponse[8] << 8) | CSDResponse[9];
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006ee2:	430b      	orrs	r3, r1
			MDD_SDSPI_finalLBA = ((DWORD)(c_size + 1) * (WORD)(1024u)) - 1; //-1 on end is correction factor, since LBA = 0 is valid.
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006eea:	6023      	str	r3, [r4, #0]
		printf("%i\n", MDD_SDSPI_finalLBA);
 8006eec:	6821      	ldr	r1, [r4, #0]
 8006eee:	482c      	ldr	r0, [pc, #176]	; (8006fa0 <MDD_SDSPI_MediaInitialize+0x204>)
 8006ef0:	f000 f988 	bl	8007204 <iprintf>
		response = SendMMCCmd(CRC_ON_OFF, 0x0);
 8006ef4:	a801      	add	r0, sp, #4
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2111      	movs	r1, #17
 8006efa:	f7ff fea7 	bl	8006c4c <SendMMCCmd>
		response = SendMMCCmd(SET_BLOCKLEN, gMediaSectorSize);
 8006efe:	882a      	ldrh	r2, [r5, #0]
 8006f00:	2107      	movs	r1, #7
 8006f02:	a801      	add	r0, sp, #4
 8006f04:	f7ff fea2 	bl	8006c4c <SendMMCCmd>
 8006f08:	e018      	b.n	8006f3c <MDD_SDSPI_MediaInitialize+0x1a0>
			gSDMode = SD_MODE_NORMAL;
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	e79e      	b.n	8006e4c <MDD_SDSPI_MediaInitialize+0xb0>
		gSDMode = SD_MODE_NORMAL;
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <MDD_SDSPI_MediaInitialize+0x1f8>)
		timeout = 0xFFF;
 8006f12:	f640 75ff 	movw	r5, #4095	; 0xfff
		gSDMode = SD_MODE_NORMAL;
 8006f16:	701a      	strb	r2, [r3, #0]
			response = SendMMCCmd(SEND_OP_COND, 0x0);
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	a801      	add	r0, sp, #4
			timeout--;
 8006f1e:	3d01      	subs	r5, #1
			response = SendMMCCmd(SEND_OP_COND, 0x0);
 8006f20:	f7ff fe94 	bl	8006c4c <SendMMCCmd>
		}while(response.r1._byte != 0x00 && timeout != 0);
 8006f24:	f89d 3004 	ldrb.w	r3, [sp, #4]
			timeout--;
 8006f28:	b2ad      	uxth	r5, r5
		}while(response.r1._byte != 0x00 && timeout != 0);
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d08f      	beq.n	8006e4e <MDD_SDSPI_MediaInitialize+0xb2>
 8006f2e:	2d00      	cmp	r5, #0
 8006f30:	d1f2      	bne.n	8006f18 <MDD_SDSPI_MediaInitialize+0x17c>
		mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 8006f32:	2202      	movs	r2, #2
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <MDD_SDSPI_MediaInitialize+0x1f4>)
 8006f36:	701a      	strb	r2, [r3, #0]
		SD_DeSelect();
 8006f38:	f7ff fe40 	bl	8006bbc <SD_DeSelect>
	SPI_WriteByte(0xFF);
 8006f3c:	20ff      	movs	r0, #255	; 0xff
 8006f3e:	f7ff fe45 	bl	8006bcc <SPI_WriteByte>
	SD_DeSelect();
 8006f42:	f7ff fe3b 	bl	8006bbc <SD_DeSelect>
    return &mediaInformation;
 8006f46:	e74c      	b.n	8006de2 <MDD_SDSPI_MediaInitialize+0x46>
 8006f48:	462e      	mov	r6, r5
 8006f4a:	e79a      	b.n	8006e82 <MDD_SDSPI_MediaInitialize+0xe6>
			c_size = ((DWORD)CSDResponse[6] << 16) | ((WORD)CSDResponse[7] << 8) | CSDResponse[8];	//Get the bytes in the correct positions
 8006f4c:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8006f50:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006f54:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			block_len = CSDResponse[5] & 0x0F;
 8006f58:	f89d 2011 	ldrb.w	r2, [sp, #17]
			block_len = 1 << (block_len - 9); //-9 because we report the size in sectors of 512 bytes each
 8006f5c:	f002 020f 	and.w	r2, r2, #15
			c_size = c_size >> 6;	//Shift value down, so the 12-bit C_SIZE is properly right justified in the DWORD.
 8006f60:	f3c3 138b 	ubfx	r3, r3, #6, #12
			block_len = 1 << (block_len - 9); //-9 because we report the size in sectors of 512 bytes each
 8006f64:	f1a2 0009 	sub.w	r0, r2, #9
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4082      	lsls	r2, r0
			MDD_SDSPI_finalLBA = ((DWORD)(c_size + 1) * (WORD)((WORD)1 << (c_size_mult + 2)) * block_len) - 1;	//-1 on end is correction factor, since LBA = 0 is valid.
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	fb03 2202 	mla	r2, r3, r2, r2
			c_size_mult = ((WORD)((CSDResponse[9] & 0x03) << 1)) | ((WORD)((CSDResponse[10] & 0x80) >> 7));
 8006f72:	004b      	lsls	r3, r1, #1
 8006f74:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8006f78:	f003 0306 	and.w	r3, r3, #6
			MDD_SDSPI_finalLBA = ((DWORD)(c_size + 1) * (WORD)((WORD)1 << (c_size_mult + 2)) * block_len) - 1;	//-1 on end is correction factor, since LBA = 0 is valid.
 8006f7c:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8006f80:	3302      	adds	r3, #2
 8006f82:	409a      	lsls	r2, r3
 8006f84:	3a01      	subs	r2, #1
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	e7b0      	b.n	8006eec <MDD_SDSPI_MediaInitialize+0x150>
 8006f8a:	bf00      	nop
 8006f8c:	20000214 	.word	0x20000214
 8006f90:	2000021c 	.word	0x2000021c
 8006f94:	2000021a 	.word	0x2000021a
 8006f98:	0800844f 	.word	0x0800844f
 8006f9c:	20000218 	.word	0x20000218
 8006fa0:	080084bb 	.word	0x080084bb

08006fa4 <MDD_SDSPI_SectorRead>:
	MMC_RESPONSE response;
	BYTE data_token;
	BYTE crc_byte0, crc_byte1;
	DWORD new_addr;

	if(gSDMode == SD_MODE_NORMAL)
 8006fa4:	4b2d      	ldr	r3, [pc, #180]	; (800705c <MDD_SDSPI_SectorRead+0xb8>)
{
 8006fa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(gSDMode == SD_MODE_NORMAL)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
{
 8006faa:	4604      	mov	r4, r0
 8006fac:	460d      	mov	r5, r1
	if(gSDMode == SD_MODE_NORMAL)
 8006fae:	b903      	cbnz	r3, 8006fb2 <MDD_SDSPI_SectorRead+0xe>
	{
		new_addr = sector_addr << 9;
 8006fb0:	0244      	lsls	r4, r0, #9
	else
	{
		new_addr = sector_addr;
	}

	SD_Select();
 8006fb2:	f7ff fdfb 	bl	8006bac <SD_Select>

	response = SendMMCCmd(READ_SINGLE_BLOCK, new_addr);
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	2108      	movs	r1, #8
 8006fba:	4668      	mov	r0, sp
 8006fbc:	f7ff fe46 	bl	8006c4c <SendMMCCmd>
	if(response.r1._byte != 0x00)
 8006fc0:	f89d 3000 	ldrb.w	r3, [sp]
 8006fc4:	b16b      	cbz	r3, 8006fe2 <MDD_SDSPI_SectorRead+0x3e>
	{
		response = SendMMCCmd(READ_SINGLE_BLOCK, new_addr);
 8006fc6:	2108      	movs	r1, #8
 8006fc8:	4622      	mov	r2, r4
 8006fca:	4668      	mov	r0, sp
 8006fcc:	f7ff fe3e 	bl	8006c4c <SendMMCCmd>
 8006fd0:	f89d 1000 	ldrb.w	r1, [sp]

		if(response.r1._byte != 0x00)
 8006fd4:	b129      	cbz	r1, 8006fe2 <MDD_SDSPI_SectorRead+0x3e>
		{
#ifdef SD_CARD_DEBUG_READ_FUNC
			printf("Error command READ_SINGLE_BLOCK 0x%08x\n", response.r1._byte);
 8006fd6:	4822      	ldr	r0, [pc, #136]	; (8007060 <MDD_SDSPI_SectorRead+0xbc>)
 8006fd8:	f000 f914 	bl	8007204 <iprintf>
	if((index == 0) || (data_token != DATA_START_TOKEN))
	{
#ifdef SD_CARD_DEBUG_READ_FUNC
		DEBUG_Message("Return Error", __FUNCTION__, __FILE__, __LINE__);
#endif
		return ERROR;
 8006fdc:	2000      	movs	r0, #0

	SPI_WriteByte(0xFF);
	SD_DeSelect();

    return SUCCESS;
}
 8006fde:	b003      	add	sp, #12
 8006fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
 8006fe2:	f240 24ff 	movw	r4, #767	; 0x2ff
		data_token = SPI_ReadByte();
 8006fe6:	20ff      	movs	r0, #255	; 0xff
		index--;
 8006fe8:	3c01      	subs	r4, #1
		data_token = SPI_ReadByte();
 8006fea:	f7ff fdef 	bl	8006bcc <SPI_WriteByte>
	}while((data_token == MMC_FLOATING_BUS) && (index != 0));
 8006fee:	28ff      	cmp	r0, #255	; 0xff
		index--;
 8006ff0:	b2a4      	uxth	r4, r4
	}while((data_token == MMC_FLOATING_BUS) && (index != 0));
 8006ff2:	d109      	bne.n	8007008 <MDD_SDSPI_SectorRead+0x64>
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	d1f6      	bne.n	8006fe6 <MDD_SDSPI_SectorRead+0x42>
		DEBUG_Message("Return Error", __FUNCTION__, __FILE__, __LINE__);
 8006ff8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ffc:	4a19      	ldr	r2, [pc, #100]	; (8007064 <MDD_SDSPI_SectorRead+0xc0>)
 8006ffe:	491a      	ldr	r1, [pc, #104]	; (8007068 <MDD_SDSPI_SectorRead+0xc4>)
 8007000:	481a      	ldr	r0, [pc, #104]	; (800706c <MDD_SDSPI_SectorRead+0xc8>)
 8007002:	f7ff fc57 	bl	80068b4 <DEBUG_Message>
 8007006:	e7e9      	b.n	8006fdc <MDD_SDSPI_SectorRead+0x38>
	if((index == 0) || (data_token != DATA_START_TOKEN))
 8007008:	2c00      	cmp	r4, #0
 800700a:	d0f5      	beq.n	8006ff8 <MDD_SDSPI_SectorRead+0x54>
 800700c:	28fe      	cmp	r0, #254	; 0xfe
 800700e:	d1f3      	bne.n	8006ff8 <MDD_SDSPI_SectorRead+0x54>
		if(buffer != NULL)
 8007010:	b1b5      	cbz	r5, 8007040 <MDD_SDSPI_SectorRead+0x9c>
 8007012:	2300      	movs	r3, #0
			for(index = 0; index < gMediaSectorSize; index++)
 8007014:	4e16      	ldr	r6, [pc, #88]	; (8007070 <MDD_SDSPI_SectorRead+0xcc>)
 8007016:	8831      	ldrh	r1, [r6, #0]
 8007018:	b29a      	uxth	r2, r3
 800701a:	1c5f      	adds	r7, r3, #1
 800701c:	4291      	cmp	r1, r2
 800701e:	d816      	bhi.n	800704e <MDD_SDSPI_SectorRead+0xaa>
			crc_byte1 = SPI_ReadByte();
 8007020:	20ff      	movs	r0, #255	; 0xff
 8007022:	f7ff fdd3 	bl	8006bcc <SPI_WriteByte>
 8007026:	4605      	mov	r5, r0
			crc_byte0 = SPI_ReadByte();
 8007028:	20ff      	movs	r0, #255	; 0xff
 800702a:	f7ff fdcf 	bl	8006bcc <SPI_WriteByte>
 800702e:	4604      	mov	r4, r0
			printf("CRC_byte1 = %i\n", crc_byte1);
 8007030:	4629      	mov	r1, r5
 8007032:	4810      	ldr	r0, [pc, #64]	; (8007074 <MDD_SDSPI_SectorRead+0xd0>)
 8007034:	f000 f8e6 	bl	8007204 <iprintf>
			printf("CRC_byte0 = %i\n", crc_byte0);
 8007038:	4621      	mov	r1, r4
 800703a:	480f      	ldr	r0, [pc, #60]	; (8007078 <MDD_SDSPI_SectorRead+0xd4>)
 800703c:	f000 f8e2 	bl	8007204 <iprintf>
	SPI_WriteByte(0xFF);
 8007040:	20ff      	movs	r0, #255	; 0xff
 8007042:	f7ff fdc3 	bl	8006bcc <SPI_WriteByte>
	SD_DeSelect();
 8007046:	f7ff fdb9 	bl	8006bbc <SD_DeSelect>
    return SUCCESS;
 800704a:	2001      	movs	r0, #1
 800704c:	e7c7      	b.n	8006fde <MDD_SDSPI_SectorRead+0x3a>
				buffer[index] = SPI_ReadByte();
 800704e:	b29c      	uxth	r4, r3
 8007050:	20ff      	movs	r0, #255	; 0xff
 8007052:	f7ff fdbb 	bl	8006bcc <SPI_WriteByte>
 8007056:	463b      	mov	r3, r7
 8007058:	5528      	strb	r0, [r5, r4]
 800705a:	e7dc      	b.n	8007016 <MDD_SDSPI_SectorRead+0x72>
 800705c:	2000021a 	.word	0x2000021a
 8007060:	08008455 	.word	0x08008455
 8007064:	0800847d 	.word	0x0800847d
 8007068:	080084dd 	.word	0x080084dd
 800706c:	08008492 	.word	0x08008492
 8007070:	20000218 	.word	0x20000218
 8007074:	0800849f 	.word	0x0800849f
 8007078:	080084af 	.word	0x080084af

0800707c <MDD_SDSPI_SectorWrite>:
	//BYTE data_token;
	BYTE crc_byte0, crc_byte1;
	DWORD new_addr;
	BYTE data_response = 0;

	if(gSDMode == SD_MODE_NORMAL)
 800707c:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <MDD_SDSPI_SectorWrite+0x80>)
{
 800707e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(gSDMode == SD_MODE_NORMAL)
 8007080:	781b      	ldrb	r3, [r3, #0]
{
 8007082:	4604      	mov	r4, r0
 8007084:	460d      	mov	r5, r1
	if(gSDMode == SD_MODE_NORMAL)
 8007086:	b903      	cbnz	r3, 800708a <MDD_SDSPI_SectorWrite+0xe>
	{
		new_addr = sector_addr << 9;
 8007088:	0244      	lsls	r4, r0, #9
	else
	{
		new_addr = sector_addr;
	}

	SD_Select();
 800708a:	f7ff fd8f 	bl	8006bac <SD_Select>


	printf("Write on block\n");
 800708e:	481c      	ldr	r0, [pc, #112]	; (8007100 <MDD_SDSPI_SectorWrite+0x84>)
 8007090:	f000 f92c 	bl	80072ec <puts>
	response = SendMMCCmd(WRITE_SINGLE_BLOCK, new_addr);
 8007094:	4622      	mov	r2, r4
 8007096:	210a      	movs	r1, #10
 8007098:	4668      	mov	r0, sp
 800709a:	f7ff fdd7 	bl	8006c4c <SendMMCCmd>

	if(response.r1._byte != 0x00)
 800709e:	f89d 4000 	ldrb.w	r4, [sp]
 80070a2:	b114      	cbz	r4, 80070aa <MDD_SDSPI_SectorWrite+0x2e>
	{
		return ERROR;
 80070a4:	2000      	movs	r0, #0
	SPI_WriteByte(0xFF);
	SD_DeSelect();


    return SUCCESS;
}
 80070a6:	b002      	add	sp, #8
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
	SPI_WriteByte(DATA_START_TOKEN);
 80070aa:	20fe      	movs	r0, #254	; 0xfe
 80070ac:	f7ff fd8e 	bl	8006bcc <SPI_WriteByte>
	for(index = 0; index < gMediaSectorSize; index++)
 80070b0:	4623      	mov	r3, r4
 80070b2:	4c14      	ldr	r4, [pc, #80]	; (8007104 <MDD_SDSPI_SectorWrite+0x88>)
 80070b4:	8821      	ldrh	r1, [r4, #0]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	1c5e      	adds	r6, r3, #1
 80070ba:	4291      	cmp	r1, r2
 80070bc:	d818      	bhi.n	80070f0 <MDD_SDSPI_SectorWrite+0x74>
	crc_byte1 = SPI_ReadByte();
 80070be:	20ff      	movs	r0, #255	; 0xff
 80070c0:	f7ff fd84 	bl	8006bcc <SPI_WriteByte>
	crc_byte0 = SPI_ReadByte();
 80070c4:	20ff      	movs	r0, #255	; 0xff
 80070c6:	f7ff fd81 	bl	8006bcc <SPI_WriteByte>
	data_response = SPI_ReadByte();
 80070ca:	20ff      	movs	r0, #255	; 0xff
 80070cc:	f7ff fd7e 	bl	8006bcc <SPI_WriteByte>
	if((data_response & 0x0F) != DATA_ACCEPTED)
 80070d0:	f000 000f 	and.w	r0, r0, #15
 80070d4:	2805      	cmp	r0, #5
 80070d6:	d1e5      	bne.n	80070a4 <MDD_SDSPI_SectorWrite+0x28>
	while(SPI_ReadByte() == 0x00);
 80070d8:	20ff      	movs	r0, #255	; 0xff
 80070da:	f7ff fd77 	bl	8006bcc <SPI_WriteByte>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d0fa      	beq.n	80070d8 <MDD_SDSPI_SectorWrite+0x5c>
	SPI_WriteByte(0xFF);
 80070e2:	20ff      	movs	r0, #255	; 0xff
 80070e4:	f7ff fd72 	bl	8006bcc <SPI_WriteByte>
	SD_DeSelect();
 80070e8:	f7ff fd68 	bl	8006bbc <SD_DeSelect>
    return SUCCESS;
 80070ec:	2001      	movs	r0, #1
 80070ee:	e7da      	b.n	80070a6 <MDD_SDSPI_SectorWrite+0x2a>
		SPI_WriteByte(buffer[index]);
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	5ce8      	ldrb	r0, [r5, r3]
 80070f4:	f7ff fd6a 	bl	8006bcc <SPI_WriteByte>
 80070f8:	4633      	mov	r3, r6
 80070fa:	e7db      	b.n	80070b4 <MDD_SDSPI_SectorWrite+0x38>
 80070fc:	2000021a 	.word	0x2000021a
 8007100:	080084bf 	.word	0x080084bf
 8007104:	20000218 	.word	0x20000218

08007108 <MDD_SDSPI_WriteProtectState>:
  ***************************************************************************************/

BYTE MDD_SDSPI_WriteProtectState(void)
{
    return 0;
}
 8007108:	2000      	movs	r0, #0
 800710a:	4770      	bx	lr

0800710c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800710c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007144 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007110:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007112:	e003      	b.n	800711c <LoopCopyDataInit>

08007114 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007116:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007118:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800711a:	3104      	adds	r1, #4

0800711c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800711c:	480b      	ldr	r0, [pc, #44]	; (800714c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800711e:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007120:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007122:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007124:	d3f6      	bcc.n	8007114 <CopyDataInit>
  ldr  r2, =_sbss
 8007126:	4a0b      	ldr	r2, [pc, #44]	; (8007154 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007128:	e002      	b.n	8007130 <LoopFillZerobss>

0800712a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800712a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800712c:	f842 3b04 	str.w	r3, [r2], #4

08007130 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007132:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007134:	d3f9      	bcc.n	800712a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007136:	f7ff fcfd 	bl	8006b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800713a:	f000 f817 	bl	800716c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800713e:	f7ff fa43 	bl	80065c8 <main>
  bx  lr    
 8007142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007144:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007148:	080086f0 	.word	0x080086f0
  ldr  r0, =_sdata
 800714c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007150:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8007154:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8007158:	20000d10 	.word	0x20000d10

0800715c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800715c:	e7fe      	b.n	800715c <ADC3_IRQHandler>
	...

08007160 <__errno>:
 8007160:	4b01      	ldr	r3, [pc, #4]	; (8007168 <__errno+0x8>)
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	2000001c 	.word	0x2000001c

0800716c <__libc_init_array>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4e0d      	ldr	r6, [pc, #52]	; (80071a4 <__libc_init_array+0x38>)
 8007170:	4c0d      	ldr	r4, [pc, #52]	; (80071a8 <__libc_init_array+0x3c>)
 8007172:	1ba4      	subs	r4, r4, r6
 8007174:	10a4      	asrs	r4, r4, #2
 8007176:	2500      	movs	r5, #0
 8007178:	42a5      	cmp	r5, r4
 800717a:	d109      	bne.n	8007190 <__libc_init_array+0x24>
 800717c:	4e0b      	ldr	r6, [pc, #44]	; (80071ac <__libc_init_array+0x40>)
 800717e:	4c0c      	ldr	r4, [pc, #48]	; (80071b0 <__libc_init_array+0x44>)
 8007180:	f000 ffd6 	bl	8008130 <_init>
 8007184:	1ba4      	subs	r4, r4, r6
 8007186:	10a4      	asrs	r4, r4, #2
 8007188:	2500      	movs	r5, #0
 800718a:	42a5      	cmp	r5, r4
 800718c:	d105      	bne.n	800719a <__libc_init_array+0x2e>
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007194:	4798      	blx	r3
 8007196:	3501      	adds	r5, #1
 8007198:	e7ee      	b.n	8007178 <__libc_init_array+0xc>
 800719a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800719e:	4798      	blx	r3
 80071a0:	3501      	adds	r5, #1
 80071a2:	e7f2      	b.n	800718a <__libc_init_array+0x1e>
 80071a4:	080086e8 	.word	0x080086e8
 80071a8:	080086e8 	.word	0x080086e8
 80071ac:	080086e8 	.word	0x080086e8
 80071b0:	080086ec 	.word	0x080086ec

080071b4 <__locale_ctype_ptr>:
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <__locale_ctype_ptr+0x14>)
 80071b6:	4a05      	ldr	r2, [pc, #20]	; (80071cc <__locale_ctype_ptr+0x18>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf08      	it	eq
 80071c0:	4613      	moveq	r3, r2
 80071c2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80071c6:	4770      	bx	lr
 80071c8:	2000001c 	.word	0x2000001c
 80071cc:	20000080 	.word	0x20000080

080071d0 <__ascii_mbtowc>:
 80071d0:	b082      	sub	sp, #8
 80071d2:	b901      	cbnz	r1, 80071d6 <__ascii_mbtowc+0x6>
 80071d4:	a901      	add	r1, sp, #4
 80071d6:	b142      	cbz	r2, 80071ea <__ascii_mbtowc+0x1a>
 80071d8:	b14b      	cbz	r3, 80071ee <__ascii_mbtowc+0x1e>
 80071da:	7813      	ldrb	r3, [r2, #0]
 80071dc:	600b      	str	r3, [r1, #0]
 80071de:	7812      	ldrb	r2, [r2, #0]
 80071e0:	1c10      	adds	r0, r2, #0
 80071e2:	bf18      	it	ne
 80071e4:	2001      	movne	r0, #1
 80071e6:	b002      	add	sp, #8
 80071e8:	4770      	bx	lr
 80071ea:	4610      	mov	r0, r2
 80071ec:	e7fb      	b.n	80071e6 <__ascii_mbtowc+0x16>
 80071ee:	f06f 0001 	mvn.w	r0, #1
 80071f2:	e7f8      	b.n	80071e6 <__ascii_mbtowc+0x16>

080071f4 <memset>:
 80071f4:	4402      	add	r2, r0
 80071f6:	4603      	mov	r3, r0
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d100      	bne.n	80071fe <memset+0xa>
 80071fc:	4770      	bx	lr
 80071fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007202:	e7f9      	b.n	80071f8 <memset+0x4>

08007204 <iprintf>:
 8007204:	b40f      	push	{r0, r1, r2, r3}
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <iprintf+0x2c>)
 8007208:	b513      	push	{r0, r1, r4, lr}
 800720a:	681c      	ldr	r4, [r3, #0]
 800720c:	b124      	cbz	r4, 8007218 <iprintf+0x14>
 800720e:	69a3      	ldr	r3, [r4, #24]
 8007210:	b913      	cbnz	r3, 8007218 <iprintf+0x14>
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fa5e 	bl	80076d4 <__sinit>
 8007218:	ab05      	add	r3, sp, #20
 800721a:	9a04      	ldr	r2, [sp, #16]
 800721c:	68a1      	ldr	r1, [r4, #8]
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fc1b 	bl	8007a5c <_vfiprintf_r>
 8007226:	b002      	add	sp, #8
 8007228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800722c:	b004      	add	sp, #16
 800722e:	4770      	bx	lr
 8007230:	2000001c 	.word	0x2000001c

08007234 <_puts_r>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	460e      	mov	r6, r1
 8007238:	4605      	mov	r5, r0
 800723a:	b118      	cbz	r0, 8007244 <_puts_r+0x10>
 800723c:	6983      	ldr	r3, [r0, #24]
 800723e:	b90b      	cbnz	r3, 8007244 <_puts_r+0x10>
 8007240:	f000 fa48 	bl	80076d4 <__sinit>
 8007244:	69ab      	ldr	r3, [r5, #24]
 8007246:	68ac      	ldr	r4, [r5, #8]
 8007248:	b913      	cbnz	r3, 8007250 <_puts_r+0x1c>
 800724a:	4628      	mov	r0, r5
 800724c:	f000 fa42 	bl	80076d4 <__sinit>
 8007250:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <_puts_r+0xac>)
 8007252:	429c      	cmp	r4, r3
 8007254:	d117      	bne.n	8007286 <_puts_r+0x52>
 8007256:	686c      	ldr	r4, [r5, #4]
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	071b      	lsls	r3, r3, #28
 800725c:	d51d      	bpl.n	800729a <_puts_r+0x66>
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	b1db      	cbz	r3, 800729a <_puts_r+0x66>
 8007262:	3e01      	subs	r6, #1
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800726a:	3b01      	subs	r3, #1
 800726c:	60a3      	str	r3, [r4, #8]
 800726e:	b9e9      	cbnz	r1, 80072ac <_puts_r+0x78>
 8007270:	2b00      	cmp	r3, #0
 8007272:	da2e      	bge.n	80072d2 <_puts_r+0x9e>
 8007274:	4622      	mov	r2, r4
 8007276:	210a      	movs	r1, #10
 8007278:	4628      	mov	r0, r5
 800727a:	f000 f86b 	bl	8007354 <__swbuf_r>
 800727e:	3001      	adds	r0, #1
 8007280:	d011      	beq.n	80072a6 <_puts_r+0x72>
 8007282:	200a      	movs	r0, #10
 8007284:	bd70      	pop	{r4, r5, r6, pc}
 8007286:	4b17      	ldr	r3, [pc, #92]	; (80072e4 <_puts_r+0xb0>)
 8007288:	429c      	cmp	r4, r3
 800728a:	d101      	bne.n	8007290 <_puts_r+0x5c>
 800728c:	68ac      	ldr	r4, [r5, #8]
 800728e:	e7e3      	b.n	8007258 <_puts_r+0x24>
 8007290:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <_puts_r+0xb4>)
 8007292:	429c      	cmp	r4, r3
 8007294:	bf08      	it	eq
 8007296:	68ec      	ldreq	r4, [r5, #12]
 8007298:	e7de      	b.n	8007258 <_puts_r+0x24>
 800729a:	4621      	mov	r1, r4
 800729c:	4628      	mov	r0, r5
 800729e:	f000 f8b9 	bl	8007414 <__swsetup_r>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d0dd      	beq.n	8007262 <_puts_r+0x2e>
 80072a6:	f04f 30ff 	mov.w	r0, #4294967295
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	da04      	bge.n	80072ba <_puts_r+0x86>
 80072b0:	69a2      	ldr	r2, [r4, #24]
 80072b2:	4293      	cmp	r3, r2
 80072b4:	db06      	blt.n	80072c4 <_puts_r+0x90>
 80072b6:	290a      	cmp	r1, #10
 80072b8:	d004      	beq.n	80072c4 <_puts_r+0x90>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	6022      	str	r2, [r4, #0]
 80072c0:	7019      	strb	r1, [r3, #0]
 80072c2:	e7cf      	b.n	8007264 <_puts_r+0x30>
 80072c4:	4622      	mov	r2, r4
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 f844 	bl	8007354 <__swbuf_r>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d1c9      	bne.n	8007264 <_puts_r+0x30>
 80072d0:	e7e9      	b.n	80072a6 <_puts_r+0x72>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	200a      	movs	r0, #10
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	6022      	str	r2, [r4, #0]
 80072da:	7018      	strb	r0, [r3, #0]
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	bf00      	nop
 80072e0:	0800866c 	.word	0x0800866c
 80072e4:	0800868c 	.word	0x0800868c
 80072e8:	0800864c 	.word	0x0800864c

080072ec <puts>:
 80072ec:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <puts+0xc>)
 80072ee:	4601      	mov	r1, r0
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	f7ff bf9f 	b.w	8007234 <_puts_r>
 80072f6:	bf00      	nop
 80072f8:	2000001c 	.word	0x2000001c

080072fc <strchr>:
 80072fc:	b2c9      	uxtb	r1, r1
 80072fe:	4603      	mov	r3, r0
 8007300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007304:	b11a      	cbz	r2, 800730e <strchr+0x12>
 8007306:	4291      	cmp	r1, r2
 8007308:	d1f9      	bne.n	80072fe <strchr+0x2>
 800730a:	4618      	mov	r0, r3
 800730c:	4770      	bx	lr
 800730e:	2900      	cmp	r1, #0
 8007310:	bf0c      	ite	eq
 8007312:	4618      	moveq	r0, r3
 8007314:	2000      	movne	r0, #0
 8007316:	4770      	bx	lr

08007318 <strcpy>:
 8007318:	4603      	mov	r3, r0
 800731a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731e:	f803 2b01 	strb.w	r2, [r3], #1
 8007322:	2a00      	cmp	r2, #0
 8007324:	d1f9      	bne.n	800731a <strcpy+0x2>
 8007326:	4770      	bx	lr

08007328 <strncpy>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4604      	mov	r4, r0
 800732c:	b902      	cbnz	r2, 8007330 <strncpy+0x8>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	4623      	mov	r3, r4
 8007332:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007336:	f803 5b01 	strb.w	r5, [r3], #1
 800733a:	1e56      	subs	r6, r2, #1
 800733c:	b91d      	cbnz	r5, 8007346 <strncpy+0x1e>
 800733e:	4414      	add	r4, r2
 8007340:	42a3      	cmp	r3, r4
 8007342:	d103      	bne.n	800734c <strncpy+0x24>
 8007344:	bd70      	pop	{r4, r5, r6, pc}
 8007346:	461c      	mov	r4, r3
 8007348:	4632      	mov	r2, r6
 800734a:	e7ef      	b.n	800732c <strncpy+0x4>
 800734c:	f803 5b01 	strb.w	r5, [r3], #1
 8007350:	e7f6      	b.n	8007340 <strncpy+0x18>
	...

08007354 <__swbuf_r>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	460e      	mov	r6, r1
 8007358:	4614      	mov	r4, r2
 800735a:	4605      	mov	r5, r0
 800735c:	b118      	cbz	r0, 8007366 <__swbuf_r+0x12>
 800735e:	6983      	ldr	r3, [r0, #24]
 8007360:	b90b      	cbnz	r3, 8007366 <__swbuf_r+0x12>
 8007362:	f000 f9b7 	bl	80076d4 <__sinit>
 8007366:	4b21      	ldr	r3, [pc, #132]	; (80073ec <__swbuf_r+0x98>)
 8007368:	429c      	cmp	r4, r3
 800736a:	d12a      	bne.n	80073c2 <__swbuf_r+0x6e>
 800736c:	686c      	ldr	r4, [r5, #4]
 800736e:	69a3      	ldr	r3, [r4, #24]
 8007370:	60a3      	str	r3, [r4, #8]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	071a      	lsls	r2, r3, #28
 8007376:	d52e      	bpl.n	80073d6 <__swbuf_r+0x82>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	b363      	cbz	r3, 80073d6 <__swbuf_r+0x82>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	6820      	ldr	r0, [r4, #0]
 8007380:	1ac0      	subs	r0, r0, r3
 8007382:	6963      	ldr	r3, [r4, #20]
 8007384:	b2f6      	uxtb	r6, r6
 8007386:	4298      	cmp	r0, r3
 8007388:	4637      	mov	r7, r6
 800738a:	db04      	blt.n	8007396 <__swbuf_r+0x42>
 800738c:	4621      	mov	r1, r4
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f936 	bl	8007600 <_fflush_r>
 8007394:	bb28      	cbnz	r0, 80073e2 <__swbuf_r+0x8e>
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	3b01      	subs	r3, #1
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	6022      	str	r2, [r4, #0]
 80073a2:	701e      	strb	r6, [r3, #0]
 80073a4:	6963      	ldr	r3, [r4, #20]
 80073a6:	3001      	adds	r0, #1
 80073a8:	4298      	cmp	r0, r3
 80073aa:	d004      	beq.n	80073b6 <__swbuf_r+0x62>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	07db      	lsls	r3, r3, #31
 80073b0:	d519      	bpl.n	80073e6 <__swbuf_r+0x92>
 80073b2:	2e0a      	cmp	r6, #10
 80073b4:	d117      	bne.n	80073e6 <__swbuf_r+0x92>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 f921 	bl	8007600 <_fflush_r>
 80073be:	b190      	cbz	r0, 80073e6 <__swbuf_r+0x92>
 80073c0:	e00f      	b.n	80073e2 <__swbuf_r+0x8e>
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <__swbuf_r+0x9c>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	d101      	bne.n	80073cc <__swbuf_r+0x78>
 80073c8:	68ac      	ldr	r4, [r5, #8]
 80073ca:	e7d0      	b.n	800736e <__swbuf_r+0x1a>
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <__swbuf_r+0xa0>)
 80073ce:	429c      	cmp	r4, r3
 80073d0:	bf08      	it	eq
 80073d2:	68ec      	ldreq	r4, [r5, #12]
 80073d4:	e7cb      	b.n	800736e <__swbuf_r+0x1a>
 80073d6:	4621      	mov	r1, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	f000 f81b 	bl	8007414 <__swsetup_r>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d0cc      	beq.n	800737c <__swbuf_r+0x28>
 80073e2:	f04f 37ff 	mov.w	r7, #4294967295
 80073e6:	4638      	mov	r0, r7
 80073e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	0800866c 	.word	0x0800866c
 80073f0:	0800868c 	.word	0x0800868c
 80073f4:	0800864c 	.word	0x0800864c

080073f8 <__ascii_wctomb>:
 80073f8:	b149      	cbz	r1, 800740e <__ascii_wctomb+0x16>
 80073fa:	2aff      	cmp	r2, #255	; 0xff
 80073fc:	bf85      	ittet	hi
 80073fe:	238a      	movhi	r3, #138	; 0x8a
 8007400:	6003      	strhi	r3, [r0, #0]
 8007402:	700a      	strbls	r2, [r1, #0]
 8007404:	f04f 30ff 	movhi.w	r0, #4294967295
 8007408:	bf98      	it	ls
 800740a:	2001      	movls	r0, #1
 800740c:	4770      	bx	lr
 800740e:	4608      	mov	r0, r1
 8007410:	4770      	bx	lr
	...

08007414 <__swsetup_r>:
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <__swsetup_r+0xcc>)
 8007416:	b570      	push	{r4, r5, r6, lr}
 8007418:	681d      	ldr	r5, [r3, #0]
 800741a:	4606      	mov	r6, r0
 800741c:	460c      	mov	r4, r1
 800741e:	b125      	cbz	r5, 800742a <__swsetup_r+0x16>
 8007420:	69ab      	ldr	r3, [r5, #24]
 8007422:	b913      	cbnz	r3, 800742a <__swsetup_r+0x16>
 8007424:	4628      	mov	r0, r5
 8007426:	f000 f955 	bl	80076d4 <__sinit>
 800742a:	4b2e      	ldr	r3, [pc, #184]	; (80074e4 <__swsetup_r+0xd0>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d10f      	bne.n	8007450 <__swsetup_r+0x3c>
 8007430:	686c      	ldr	r4, [r5, #4]
 8007432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007436:	b29a      	uxth	r2, r3
 8007438:	0715      	lsls	r5, r2, #28
 800743a:	d42c      	bmi.n	8007496 <__swsetup_r+0x82>
 800743c:	06d0      	lsls	r0, r2, #27
 800743e:	d411      	bmi.n	8007464 <__swsetup_r+0x50>
 8007440:	2209      	movs	r2, #9
 8007442:	6032      	str	r2, [r6, #0]
 8007444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <__swsetup_r+0xd4>)
 8007452:	429c      	cmp	r4, r3
 8007454:	d101      	bne.n	800745a <__swsetup_r+0x46>
 8007456:	68ac      	ldr	r4, [r5, #8]
 8007458:	e7eb      	b.n	8007432 <__swsetup_r+0x1e>
 800745a:	4b24      	ldr	r3, [pc, #144]	; (80074ec <__swsetup_r+0xd8>)
 800745c:	429c      	cmp	r4, r3
 800745e:	bf08      	it	eq
 8007460:	68ec      	ldreq	r4, [r5, #12]
 8007462:	e7e6      	b.n	8007432 <__swsetup_r+0x1e>
 8007464:	0751      	lsls	r1, r2, #29
 8007466:	d512      	bpl.n	800748e <__swsetup_r+0x7a>
 8007468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800746a:	b141      	cbz	r1, 800747e <__swsetup_r+0x6a>
 800746c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007470:	4299      	cmp	r1, r3
 8007472:	d002      	beq.n	800747a <__swsetup_r+0x66>
 8007474:	4630      	mov	r0, r6
 8007476:	f000 fa1b 	bl	80078b0 <_free_r>
 800747a:	2300      	movs	r3, #0
 800747c:	6363      	str	r3, [r4, #52]	; 0x34
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	2300      	movs	r3, #0
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f043 0308 	orr.w	r3, r3, #8
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	b94b      	cbnz	r3, 80074ae <__swsetup_r+0x9a>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a4:	d003      	beq.n	80074ae <__swsetup_r+0x9a>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4630      	mov	r0, r6
 80074aa:	f000 f9c1 	bl	8007830 <__smakebuf_r>
 80074ae:	89a2      	ldrh	r2, [r4, #12]
 80074b0:	f012 0301 	ands.w	r3, r2, #1
 80074b4:	d00c      	beq.n	80074d0 <__swsetup_r+0xbc>
 80074b6:	2300      	movs	r3, #0
 80074b8:	60a3      	str	r3, [r4, #8]
 80074ba:	6963      	ldr	r3, [r4, #20]
 80074bc:	425b      	negs	r3, r3
 80074be:	61a3      	str	r3, [r4, #24]
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	b953      	cbnz	r3, 80074da <__swsetup_r+0xc6>
 80074c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80074cc:	d1ba      	bne.n	8007444 <__swsetup_r+0x30>
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	0792      	lsls	r2, r2, #30
 80074d2:	bf58      	it	pl
 80074d4:	6963      	ldrpl	r3, [r4, #20]
 80074d6:	60a3      	str	r3, [r4, #8]
 80074d8:	e7f2      	b.n	80074c0 <__swsetup_r+0xac>
 80074da:	2000      	movs	r0, #0
 80074dc:	e7f7      	b.n	80074ce <__swsetup_r+0xba>
 80074de:	bf00      	nop
 80074e0:	2000001c 	.word	0x2000001c
 80074e4:	0800866c 	.word	0x0800866c
 80074e8:	0800868c 	.word	0x0800868c
 80074ec:	0800864c 	.word	0x0800864c

080074f0 <__sflush_r>:
 80074f0:	898a      	ldrh	r2, [r1, #12]
 80074f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f6:	4605      	mov	r5, r0
 80074f8:	0710      	lsls	r0, r2, #28
 80074fa:	460c      	mov	r4, r1
 80074fc:	d45a      	bmi.n	80075b4 <__sflush_r+0xc4>
 80074fe:	684b      	ldr	r3, [r1, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc05      	bgt.n	8007510 <__sflush_r+0x20>
 8007504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	dc02      	bgt.n	8007510 <__sflush_r+0x20>
 800750a:	2000      	movs	r0, #0
 800750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007512:	2e00      	cmp	r6, #0
 8007514:	d0f9      	beq.n	800750a <__sflush_r+0x1a>
 8007516:	2300      	movs	r3, #0
 8007518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800751c:	682f      	ldr	r7, [r5, #0]
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	d033      	beq.n	800758a <__sflush_r+0x9a>
 8007522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007524:	89a3      	ldrh	r3, [r4, #12]
 8007526:	075a      	lsls	r2, r3, #29
 8007528:	d505      	bpl.n	8007536 <__sflush_r+0x46>
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	1ac0      	subs	r0, r0, r3
 800752e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007530:	b10b      	cbz	r3, 8007536 <__sflush_r+0x46>
 8007532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007534:	1ac0      	subs	r0, r0, r3
 8007536:	2300      	movs	r3, #0
 8007538:	4602      	mov	r2, r0
 800753a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800753c:	6a21      	ldr	r1, [r4, #32]
 800753e:	4628      	mov	r0, r5
 8007540:	47b0      	blx	r6
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	d106      	bne.n	8007556 <__sflush_r+0x66>
 8007548:	6829      	ldr	r1, [r5, #0]
 800754a:	291d      	cmp	r1, #29
 800754c:	d84b      	bhi.n	80075e6 <__sflush_r+0xf6>
 800754e:	4a2b      	ldr	r2, [pc, #172]	; (80075fc <__sflush_r+0x10c>)
 8007550:	40ca      	lsrs	r2, r1
 8007552:	07d6      	lsls	r6, r2, #31
 8007554:	d547      	bpl.n	80075e6 <__sflush_r+0xf6>
 8007556:	2200      	movs	r2, #0
 8007558:	6062      	str	r2, [r4, #4]
 800755a:	04d9      	lsls	r1, r3, #19
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	6022      	str	r2, [r4, #0]
 8007560:	d504      	bpl.n	800756c <__sflush_r+0x7c>
 8007562:	1c42      	adds	r2, r0, #1
 8007564:	d101      	bne.n	800756a <__sflush_r+0x7a>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	b903      	cbnz	r3, 800756c <__sflush_r+0x7c>
 800756a:	6560      	str	r0, [r4, #84]	; 0x54
 800756c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800756e:	602f      	str	r7, [r5, #0]
 8007570:	2900      	cmp	r1, #0
 8007572:	d0ca      	beq.n	800750a <__sflush_r+0x1a>
 8007574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007578:	4299      	cmp	r1, r3
 800757a:	d002      	beq.n	8007582 <__sflush_r+0x92>
 800757c:	4628      	mov	r0, r5
 800757e:	f000 f997 	bl	80078b0 <_free_r>
 8007582:	2000      	movs	r0, #0
 8007584:	6360      	str	r0, [r4, #52]	; 0x34
 8007586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800758a:	6a21      	ldr	r1, [r4, #32]
 800758c:	2301      	movs	r3, #1
 800758e:	4628      	mov	r0, r5
 8007590:	47b0      	blx	r6
 8007592:	1c41      	adds	r1, r0, #1
 8007594:	d1c6      	bne.n	8007524 <__sflush_r+0x34>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0c3      	beq.n	8007524 <__sflush_r+0x34>
 800759c:	2b1d      	cmp	r3, #29
 800759e:	d001      	beq.n	80075a4 <__sflush_r+0xb4>
 80075a0:	2b16      	cmp	r3, #22
 80075a2:	d101      	bne.n	80075a8 <__sflush_r+0xb8>
 80075a4:	602f      	str	r7, [r5, #0]
 80075a6:	e7b0      	b.n	800750a <__sflush_r+0x1a>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	690f      	ldr	r7, [r1, #16]
 80075b6:	2f00      	cmp	r7, #0
 80075b8:	d0a7      	beq.n	800750a <__sflush_r+0x1a>
 80075ba:	0793      	lsls	r3, r2, #30
 80075bc:	680e      	ldr	r6, [r1, #0]
 80075be:	bf08      	it	eq
 80075c0:	694b      	ldreq	r3, [r1, #20]
 80075c2:	600f      	str	r7, [r1, #0]
 80075c4:	bf18      	it	ne
 80075c6:	2300      	movne	r3, #0
 80075c8:	eba6 0807 	sub.w	r8, r6, r7
 80075cc:	608b      	str	r3, [r1, #8]
 80075ce:	f1b8 0f00 	cmp.w	r8, #0
 80075d2:	dd9a      	ble.n	800750a <__sflush_r+0x1a>
 80075d4:	4643      	mov	r3, r8
 80075d6:	463a      	mov	r2, r7
 80075d8:	6a21      	ldr	r1, [r4, #32]
 80075da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075dc:	4628      	mov	r0, r5
 80075de:	47b0      	blx	r6
 80075e0:	2800      	cmp	r0, #0
 80075e2:	dc07      	bgt.n	80075f4 <__sflush_r+0x104>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	4407      	add	r7, r0
 80075f6:	eba8 0800 	sub.w	r8, r8, r0
 80075fa:	e7e8      	b.n	80075ce <__sflush_r+0xde>
 80075fc:	20400001 	.word	0x20400001

08007600 <_fflush_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	690b      	ldr	r3, [r1, #16]
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
 8007608:	b1db      	cbz	r3, 8007642 <_fflush_r+0x42>
 800760a:	b118      	cbz	r0, 8007614 <_fflush_r+0x14>
 800760c:	6983      	ldr	r3, [r0, #24]
 800760e:	b90b      	cbnz	r3, 8007614 <_fflush_r+0x14>
 8007610:	f000 f860 	bl	80076d4 <__sinit>
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <_fflush_r+0x48>)
 8007616:	429c      	cmp	r4, r3
 8007618:	d109      	bne.n	800762e <_fflush_r+0x2e>
 800761a:	686c      	ldr	r4, [r5, #4]
 800761c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007620:	b17b      	cbz	r3, 8007642 <_fflush_r+0x42>
 8007622:	4621      	mov	r1, r4
 8007624:	4628      	mov	r0, r5
 8007626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800762a:	f7ff bf61 	b.w	80074f0 <__sflush_r>
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <_fflush_r+0x4c>)
 8007630:	429c      	cmp	r4, r3
 8007632:	d101      	bne.n	8007638 <_fflush_r+0x38>
 8007634:	68ac      	ldr	r4, [r5, #8]
 8007636:	e7f1      	b.n	800761c <_fflush_r+0x1c>
 8007638:	4b05      	ldr	r3, [pc, #20]	; (8007650 <_fflush_r+0x50>)
 800763a:	429c      	cmp	r4, r3
 800763c:	bf08      	it	eq
 800763e:	68ec      	ldreq	r4, [r5, #12]
 8007640:	e7ec      	b.n	800761c <_fflush_r+0x1c>
 8007642:	2000      	movs	r0, #0
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	bf00      	nop
 8007648:	0800866c 	.word	0x0800866c
 800764c:	0800868c 	.word	0x0800868c
 8007650:	0800864c 	.word	0x0800864c

08007654 <_cleanup_r>:
 8007654:	4901      	ldr	r1, [pc, #4]	; (800765c <_cleanup_r+0x8>)
 8007656:	f000 b8a9 	b.w	80077ac <_fwalk_reent>
 800765a:	bf00      	nop
 800765c:	08007601 	.word	0x08007601

08007660 <std.isra.0>:
 8007660:	2300      	movs	r3, #0
 8007662:	b510      	push	{r4, lr}
 8007664:	4604      	mov	r4, r0
 8007666:	6003      	str	r3, [r0, #0]
 8007668:	6043      	str	r3, [r0, #4]
 800766a:	6083      	str	r3, [r0, #8]
 800766c:	8181      	strh	r1, [r0, #12]
 800766e:	6643      	str	r3, [r0, #100]	; 0x64
 8007670:	81c2      	strh	r2, [r0, #14]
 8007672:	6103      	str	r3, [r0, #16]
 8007674:	6143      	str	r3, [r0, #20]
 8007676:	6183      	str	r3, [r0, #24]
 8007678:	4619      	mov	r1, r3
 800767a:	2208      	movs	r2, #8
 800767c:	305c      	adds	r0, #92	; 0x5c
 800767e:	f7ff fdb9 	bl	80071f4 <memset>
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <std.isra.0+0x38>)
 8007684:	6263      	str	r3, [r4, #36]	; 0x24
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <std.isra.0+0x3c>)
 8007688:	62a3      	str	r3, [r4, #40]	; 0x28
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <std.isra.0+0x40>)
 800768c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <std.isra.0+0x44>)
 8007690:	6224      	str	r4, [r4, #32]
 8007692:	6323      	str	r3, [r4, #48]	; 0x30
 8007694:	bd10      	pop	{r4, pc}
 8007696:	bf00      	nop
 8007698:	08007fd5 	.word	0x08007fd5
 800769c:	08007ff7 	.word	0x08007ff7
 80076a0:	0800802f 	.word	0x0800802f
 80076a4:	08008053 	.word	0x08008053

080076a8 <__sfmoreglue>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	1e4a      	subs	r2, r1, #1
 80076ac:	2568      	movs	r5, #104	; 0x68
 80076ae:	4355      	muls	r5, r2
 80076b0:	460e      	mov	r6, r1
 80076b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076b6:	f000 f949 	bl	800794c <_malloc_r>
 80076ba:	4604      	mov	r4, r0
 80076bc:	b140      	cbz	r0, 80076d0 <__sfmoreglue+0x28>
 80076be:	2100      	movs	r1, #0
 80076c0:	e880 0042 	stmia.w	r0, {r1, r6}
 80076c4:	300c      	adds	r0, #12
 80076c6:	60a0      	str	r0, [r4, #8]
 80076c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076cc:	f7ff fd92 	bl	80071f4 <memset>
 80076d0:	4620      	mov	r0, r4
 80076d2:	bd70      	pop	{r4, r5, r6, pc}

080076d4 <__sinit>:
 80076d4:	6983      	ldr	r3, [r0, #24]
 80076d6:	b510      	push	{r4, lr}
 80076d8:	4604      	mov	r4, r0
 80076da:	bb33      	cbnz	r3, 800772a <__sinit+0x56>
 80076dc:	6483      	str	r3, [r0, #72]	; 0x48
 80076de:	64c3      	str	r3, [r0, #76]	; 0x4c
 80076e0:	6503      	str	r3, [r0, #80]	; 0x50
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <__sinit+0x58>)
 80076e4:	4a12      	ldr	r2, [pc, #72]	; (8007730 <__sinit+0x5c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6282      	str	r2, [r0, #40]	; 0x28
 80076ea:	4298      	cmp	r0, r3
 80076ec:	bf04      	itt	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	6183      	streq	r3, [r0, #24]
 80076f2:	f000 f81f 	bl	8007734 <__sfp>
 80076f6:	6060      	str	r0, [r4, #4]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 f81b 	bl	8007734 <__sfp>
 80076fe:	60a0      	str	r0, [r4, #8]
 8007700:	4620      	mov	r0, r4
 8007702:	f000 f817 	bl	8007734 <__sfp>
 8007706:	2200      	movs	r2, #0
 8007708:	60e0      	str	r0, [r4, #12]
 800770a:	2104      	movs	r1, #4
 800770c:	6860      	ldr	r0, [r4, #4]
 800770e:	f7ff ffa7 	bl	8007660 <std.isra.0>
 8007712:	2201      	movs	r2, #1
 8007714:	2109      	movs	r1, #9
 8007716:	68a0      	ldr	r0, [r4, #8]
 8007718:	f7ff ffa2 	bl	8007660 <std.isra.0>
 800771c:	2202      	movs	r2, #2
 800771e:	2112      	movs	r1, #18
 8007720:	68e0      	ldr	r0, [r4, #12]
 8007722:	f7ff ff9d 	bl	8007660 <std.isra.0>
 8007726:	2301      	movs	r3, #1
 8007728:	61a3      	str	r3, [r4, #24]
 800772a:	bd10      	pop	{r4, pc}
 800772c:	0800853c 	.word	0x0800853c
 8007730:	08007655 	.word	0x08007655

08007734 <__sfp>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <__sfp+0x74>)
 8007738:	681e      	ldr	r6, [r3, #0]
 800773a:	69b3      	ldr	r3, [r6, #24]
 800773c:	4607      	mov	r7, r0
 800773e:	b913      	cbnz	r3, 8007746 <__sfp+0x12>
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff ffc7 	bl	80076d4 <__sinit>
 8007746:	3648      	adds	r6, #72	; 0x48
 8007748:	68b4      	ldr	r4, [r6, #8]
 800774a:	6873      	ldr	r3, [r6, #4]
 800774c:	3b01      	subs	r3, #1
 800774e:	d503      	bpl.n	8007758 <__sfp+0x24>
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	b133      	cbz	r3, 8007762 <__sfp+0x2e>
 8007754:	6836      	ldr	r6, [r6, #0]
 8007756:	e7f7      	b.n	8007748 <__sfp+0x14>
 8007758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800775c:	b16d      	cbz	r5, 800777a <__sfp+0x46>
 800775e:	3468      	adds	r4, #104	; 0x68
 8007760:	e7f4      	b.n	800774c <__sfp+0x18>
 8007762:	2104      	movs	r1, #4
 8007764:	4638      	mov	r0, r7
 8007766:	f7ff ff9f 	bl	80076a8 <__sfmoreglue>
 800776a:	6030      	str	r0, [r6, #0]
 800776c:	2800      	cmp	r0, #0
 800776e:	d1f1      	bne.n	8007754 <__sfp+0x20>
 8007770:	230c      	movs	r3, #12
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4604      	mov	r4, r0
 8007776:	4620      	mov	r0, r4
 8007778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800777a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800777e:	81e3      	strh	r3, [r4, #14]
 8007780:	2301      	movs	r3, #1
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	6665      	str	r5, [r4, #100]	; 0x64
 8007786:	6025      	str	r5, [r4, #0]
 8007788:	60a5      	str	r5, [r4, #8]
 800778a:	6065      	str	r5, [r4, #4]
 800778c:	6125      	str	r5, [r4, #16]
 800778e:	6165      	str	r5, [r4, #20]
 8007790:	61a5      	str	r5, [r4, #24]
 8007792:	2208      	movs	r2, #8
 8007794:	4629      	mov	r1, r5
 8007796:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800779a:	f7ff fd2b 	bl	80071f4 <memset>
 800779e:	6365      	str	r5, [r4, #52]	; 0x34
 80077a0:	63a5      	str	r5, [r4, #56]	; 0x38
 80077a2:	64a5      	str	r5, [r4, #72]	; 0x48
 80077a4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80077a6:	e7e6      	b.n	8007776 <__sfp+0x42>
 80077a8:	0800853c 	.word	0x0800853c

080077ac <_fwalk_reent>:
 80077ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b0:	4680      	mov	r8, r0
 80077b2:	4689      	mov	r9, r1
 80077b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077b8:	2600      	movs	r6, #0
 80077ba:	b914      	cbnz	r4, 80077c2 <_fwalk_reent+0x16>
 80077bc:	4630      	mov	r0, r6
 80077be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c2:	68a5      	ldr	r5, [r4, #8]
 80077c4:	6867      	ldr	r7, [r4, #4]
 80077c6:	3f01      	subs	r7, #1
 80077c8:	d501      	bpl.n	80077ce <_fwalk_reent+0x22>
 80077ca:	6824      	ldr	r4, [r4, #0]
 80077cc:	e7f5      	b.n	80077ba <_fwalk_reent+0xe>
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d907      	bls.n	80077e4 <_fwalk_reent+0x38>
 80077d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077d8:	3301      	adds	r3, #1
 80077da:	d003      	beq.n	80077e4 <_fwalk_reent+0x38>
 80077dc:	4629      	mov	r1, r5
 80077de:	4640      	mov	r0, r8
 80077e0:	47c8      	blx	r9
 80077e2:	4306      	orrs	r6, r0
 80077e4:	3568      	adds	r5, #104	; 0x68
 80077e6:	e7ee      	b.n	80077c6 <_fwalk_reent+0x1a>

080077e8 <__swhatbuf_r>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	460e      	mov	r6, r1
 80077ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f0:	2900      	cmp	r1, #0
 80077f2:	b090      	sub	sp, #64	; 0x40
 80077f4:	4614      	mov	r4, r2
 80077f6:	461d      	mov	r5, r3
 80077f8:	da07      	bge.n	800780a <__swhatbuf_r+0x22>
 80077fa:	2300      	movs	r3, #0
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	89b3      	ldrh	r3, [r6, #12]
 8007800:	061a      	lsls	r2, r3, #24
 8007802:	d410      	bmi.n	8007826 <__swhatbuf_r+0x3e>
 8007804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007808:	e00e      	b.n	8007828 <__swhatbuf_r+0x40>
 800780a:	aa01      	add	r2, sp, #4
 800780c:	f000 fc48 	bl	80080a0 <_fstat_r>
 8007810:	2800      	cmp	r0, #0
 8007812:	dbf2      	blt.n	80077fa <__swhatbuf_r+0x12>
 8007814:	9a02      	ldr	r2, [sp, #8]
 8007816:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800781a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800781e:	425a      	negs	r2, r3
 8007820:	415a      	adcs	r2, r3
 8007822:	602a      	str	r2, [r5, #0]
 8007824:	e7ee      	b.n	8007804 <__swhatbuf_r+0x1c>
 8007826:	2340      	movs	r3, #64	; 0x40
 8007828:	2000      	movs	r0, #0
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	b010      	add	sp, #64	; 0x40
 800782e:	bd70      	pop	{r4, r5, r6, pc}

08007830 <__smakebuf_r>:
 8007830:	898b      	ldrh	r3, [r1, #12]
 8007832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007834:	079d      	lsls	r5, r3, #30
 8007836:	4606      	mov	r6, r0
 8007838:	460c      	mov	r4, r1
 800783a:	d507      	bpl.n	800784c <__smakebuf_r+0x1c>
 800783c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	6123      	str	r3, [r4, #16]
 8007844:	2301      	movs	r3, #1
 8007846:	6163      	str	r3, [r4, #20]
 8007848:	b002      	add	sp, #8
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	ab01      	add	r3, sp, #4
 800784e:	466a      	mov	r2, sp
 8007850:	f7ff ffca 	bl	80077e8 <__swhatbuf_r>
 8007854:	9900      	ldr	r1, [sp, #0]
 8007856:	4605      	mov	r5, r0
 8007858:	4630      	mov	r0, r6
 800785a:	f000 f877 	bl	800794c <_malloc_r>
 800785e:	b948      	cbnz	r0, 8007874 <__smakebuf_r+0x44>
 8007860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007864:	059a      	lsls	r2, r3, #22
 8007866:	d4ef      	bmi.n	8007848 <__smakebuf_r+0x18>
 8007868:	f023 0303 	bic.w	r3, r3, #3
 800786c:	f043 0302 	orr.w	r3, r3, #2
 8007870:	81a3      	strh	r3, [r4, #12]
 8007872:	e7e3      	b.n	800783c <__smakebuf_r+0xc>
 8007874:	4b0d      	ldr	r3, [pc, #52]	; (80078ac <__smakebuf_r+0x7c>)
 8007876:	62b3      	str	r3, [r6, #40]	; 0x28
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	6020      	str	r0, [r4, #0]
 800787c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007880:	81a3      	strh	r3, [r4, #12]
 8007882:	9b00      	ldr	r3, [sp, #0]
 8007884:	6163      	str	r3, [r4, #20]
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	6120      	str	r0, [r4, #16]
 800788a:	b15b      	cbz	r3, 80078a4 <__smakebuf_r+0x74>
 800788c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007890:	4630      	mov	r0, r6
 8007892:	f000 fc17 	bl	80080c4 <_isatty_r>
 8007896:	b128      	cbz	r0, 80078a4 <__smakebuf_r+0x74>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	431d      	orrs	r5, r3
 80078a8:	81a5      	strh	r5, [r4, #12]
 80078aa:	e7cd      	b.n	8007848 <__smakebuf_r+0x18>
 80078ac:	08007655 	.word	0x08007655

080078b0 <_free_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4605      	mov	r5, r0
 80078b4:	2900      	cmp	r1, #0
 80078b6:	d045      	beq.n	8007944 <_free_r+0x94>
 80078b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078bc:	1f0c      	subs	r4, r1, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfb8      	it	lt
 80078c2:	18e4      	addlt	r4, r4, r3
 80078c4:	f000 fc20 	bl	8008108 <__malloc_lock>
 80078c8:	4a1f      	ldr	r2, [pc, #124]	; (8007948 <_free_r+0x98>)
 80078ca:	6813      	ldr	r3, [r2, #0]
 80078cc:	4610      	mov	r0, r2
 80078ce:	b933      	cbnz	r3, 80078de <_free_r+0x2e>
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	6014      	str	r4, [r2, #0]
 80078d4:	4628      	mov	r0, r5
 80078d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078da:	f000 bc16 	b.w	800810a <__malloc_unlock>
 80078de:	42a3      	cmp	r3, r4
 80078e0:	d90c      	bls.n	80078fc <_free_r+0x4c>
 80078e2:	6821      	ldr	r1, [r4, #0]
 80078e4:	1862      	adds	r2, r4, r1
 80078e6:	4293      	cmp	r3, r2
 80078e8:	bf04      	itt	eq
 80078ea:	681a      	ldreq	r2, [r3, #0]
 80078ec:	685b      	ldreq	r3, [r3, #4]
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	bf04      	itt	eq
 80078f2:	1852      	addeq	r2, r2, r1
 80078f4:	6022      	streq	r2, [r4, #0]
 80078f6:	6004      	str	r4, [r0, #0]
 80078f8:	e7ec      	b.n	80078d4 <_free_r+0x24>
 80078fa:	4613      	mov	r3, r2
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	b10a      	cbz	r2, 8007904 <_free_r+0x54>
 8007900:	42a2      	cmp	r2, r4
 8007902:	d9fa      	bls.n	80078fa <_free_r+0x4a>
 8007904:	6819      	ldr	r1, [r3, #0]
 8007906:	1858      	adds	r0, r3, r1
 8007908:	42a0      	cmp	r0, r4
 800790a:	d10b      	bne.n	8007924 <_free_r+0x74>
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	4401      	add	r1, r0
 8007910:	1858      	adds	r0, r3, r1
 8007912:	4282      	cmp	r2, r0
 8007914:	6019      	str	r1, [r3, #0]
 8007916:	d1dd      	bne.n	80078d4 <_free_r+0x24>
 8007918:	6810      	ldr	r0, [r2, #0]
 800791a:	6852      	ldr	r2, [r2, #4]
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	4401      	add	r1, r0
 8007920:	6019      	str	r1, [r3, #0]
 8007922:	e7d7      	b.n	80078d4 <_free_r+0x24>
 8007924:	d902      	bls.n	800792c <_free_r+0x7c>
 8007926:	230c      	movs	r3, #12
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	e7d3      	b.n	80078d4 <_free_r+0x24>
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	1821      	adds	r1, r4, r0
 8007930:	428a      	cmp	r2, r1
 8007932:	bf04      	itt	eq
 8007934:	6811      	ldreq	r1, [r2, #0]
 8007936:	6852      	ldreq	r2, [r2, #4]
 8007938:	6062      	str	r2, [r4, #4]
 800793a:	bf04      	itt	eq
 800793c:	1809      	addeq	r1, r1, r0
 800793e:	6021      	streq	r1, [r4, #0]
 8007940:	605c      	str	r4, [r3, #4]
 8007942:	e7c7      	b.n	80078d4 <_free_r+0x24>
 8007944:	bd38      	pop	{r3, r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	20000224 	.word	0x20000224

0800794c <_malloc_r>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	1ccd      	adds	r5, r1, #3
 8007950:	f025 0503 	bic.w	r5, r5, #3
 8007954:	3508      	adds	r5, #8
 8007956:	2d0c      	cmp	r5, #12
 8007958:	bf38      	it	cc
 800795a:	250c      	movcc	r5, #12
 800795c:	2d00      	cmp	r5, #0
 800795e:	4606      	mov	r6, r0
 8007960:	db01      	blt.n	8007966 <_malloc_r+0x1a>
 8007962:	42a9      	cmp	r1, r5
 8007964:	d903      	bls.n	800796e <_malloc_r+0x22>
 8007966:	230c      	movs	r3, #12
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	2000      	movs	r0, #0
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	f000 fbcb 	bl	8008108 <__malloc_lock>
 8007972:	4a23      	ldr	r2, [pc, #140]	; (8007a00 <_malloc_r+0xb4>)
 8007974:	6814      	ldr	r4, [r2, #0]
 8007976:	4621      	mov	r1, r4
 8007978:	b991      	cbnz	r1, 80079a0 <_malloc_r+0x54>
 800797a:	4c22      	ldr	r4, [pc, #136]	; (8007a04 <_malloc_r+0xb8>)
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	b91b      	cbnz	r3, 8007988 <_malloc_r+0x3c>
 8007980:	4630      	mov	r0, r6
 8007982:	f000 fb17 	bl	8007fb4 <_sbrk_r>
 8007986:	6020      	str	r0, [r4, #0]
 8007988:	4629      	mov	r1, r5
 800798a:	4630      	mov	r0, r6
 800798c:	f000 fb12 	bl	8007fb4 <_sbrk_r>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d126      	bne.n	80079e2 <_malloc_r+0x96>
 8007994:	230c      	movs	r3, #12
 8007996:	6033      	str	r3, [r6, #0]
 8007998:	4630      	mov	r0, r6
 800799a:	f000 fbb6 	bl	800810a <__malloc_unlock>
 800799e:	e7e4      	b.n	800796a <_malloc_r+0x1e>
 80079a0:	680b      	ldr	r3, [r1, #0]
 80079a2:	1b5b      	subs	r3, r3, r5
 80079a4:	d41a      	bmi.n	80079dc <_malloc_r+0x90>
 80079a6:	2b0b      	cmp	r3, #11
 80079a8:	d90f      	bls.n	80079ca <_malloc_r+0x7e>
 80079aa:	600b      	str	r3, [r1, #0]
 80079ac:	50cd      	str	r5, [r1, r3]
 80079ae:	18cc      	adds	r4, r1, r3
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 fbaa 	bl	800810a <__malloc_unlock>
 80079b6:	f104 000b 	add.w	r0, r4, #11
 80079ba:	1d23      	adds	r3, r4, #4
 80079bc:	f020 0007 	bic.w	r0, r0, #7
 80079c0:	1ac3      	subs	r3, r0, r3
 80079c2:	d01b      	beq.n	80079fc <_malloc_r+0xb0>
 80079c4:	425a      	negs	r2, r3
 80079c6:	50e2      	str	r2, [r4, r3]
 80079c8:	bd70      	pop	{r4, r5, r6, pc}
 80079ca:	428c      	cmp	r4, r1
 80079cc:	bf0d      	iteet	eq
 80079ce:	6863      	ldreq	r3, [r4, #4]
 80079d0:	684b      	ldrne	r3, [r1, #4]
 80079d2:	6063      	strne	r3, [r4, #4]
 80079d4:	6013      	streq	r3, [r2, #0]
 80079d6:	bf18      	it	ne
 80079d8:	460c      	movne	r4, r1
 80079da:	e7e9      	b.n	80079b0 <_malloc_r+0x64>
 80079dc:	460c      	mov	r4, r1
 80079de:	6849      	ldr	r1, [r1, #4]
 80079e0:	e7ca      	b.n	8007978 <_malloc_r+0x2c>
 80079e2:	1cc4      	adds	r4, r0, #3
 80079e4:	f024 0403 	bic.w	r4, r4, #3
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d005      	beq.n	80079f8 <_malloc_r+0xac>
 80079ec:	1a21      	subs	r1, r4, r0
 80079ee:	4630      	mov	r0, r6
 80079f0:	f000 fae0 	bl	8007fb4 <_sbrk_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d0cd      	beq.n	8007994 <_malloc_r+0x48>
 80079f8:	6025      	str	r5, [r4, #0]
 80079fa:	e7d9      	b.n	80079b0 <_malloc_r+0x64>
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
 80079fe:	bf00      	nop
 8007a00:	20000224 	.word	0x20000224
 8007a04:	20000228 	.word	0x20000228

08007a08 <__sfputc_r>:
 8007a08:	6893      	ldr	r3, [r2, #8]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	b410      	push	{r4}
 8007a10:	6093      	str	r3, [r2, #8]
 8007a12:	da09      	bge.n	8007a28 <__sfputc_r+0x20>
 8007a14:	6994      	ldr	r4, [r2, #24]
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	db02      	blt.n	8007a20 <__sfputc_r+0x18>
 8007a1a:	b2cb      	uxtb	r3, r1
 8007a1c:	2b0a      	cmp	r3, #10
 8007a1e:	d103      	bne.n	8007a28 <__sfputc_r+0x20>
 8007a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a24:	f7ff bc96 	b.w	8007354 <__swbuf_r>
 8007a28:	6813      	ldr	r3, [r2, #0]
 8007a2a:	1c58      	adds	r0, r3, #1
 8007a2c:	6010      	str	r0, [r2, #0]
 8007a2e:	7019      	strb	r1, [r3, #0]
 8007a30:	b2c8      	uxtb	r0, r1
 8007a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <__sfputs_r>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460f      	mov	r7, r1
 8007a3e:	4614      	mov	r4, r2
 8007a40:	18d5      	adds	r5, r2, r3
 8007a42:	42ac      	cmp	r4, r5
 8007a44:	d101      	bne.n	8007a4a <__sfputs_r+0x12>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e007      	b.n	8007a5a <__sfputs_r+0x22>
 8007a4a:	463a      	mov	r2, r7
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff ffd9 	bl	8007a08 <__sfputc_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d1f3      	bne.n	8007a42 <__sfputs_r+0xa>
 8007a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a5c <_vfiprintf_r>:
 8007a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	b09d      	sub	sp, #116	; 0x74
 8007a62:	460c      	mov	r4, r1
 8007a64:	4617      	mov	r7, r2
 8007a66:	9303      	str	r3, [sp, #12]
 8007a68:	4606      	mov	r6, r0
 8007a6a:	b118      	cbz	r0, 8007a74 <_vfiprintf_r+0x18>
 8007a6c:	6983      	ldr	r3, [r0, #24]
 8007a6e:	b90b      	cbnz	r3, 8007a74 <_vfiprintf_r+0x18>
 8007a70:	f7ff fe30 	bl	80076d4 <__sinit>
 8007a74:	4b7c      	ldr	r3, [pc, #496]	; (8007c68 <_vfiprintf_r+0x20c>)
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d157      	bne.n	8007b2a <_vfiprintf_r+0xce>
 8007a7a:	6874      	ldr	r4, [r6, #4]
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	0718      	lsls	r0, r3, #28
 8007a80:	d55d      	bpl.n	8007b3e <_vfiprintf_r+0xe2>
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d05a      	beq.n	8007b3e <_vfiprintf_r+0xe2>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a92:	2330      	movs	r3, #48	; 0x30
 8007a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a98:	f04f 0b01 	mov.w	fp, #1
 8007a9c:	46b8      	mov	r8, r7
 8007a9e:	4645      	mov	r5, r8
 8007aa0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d155      	bne.n	8007b54 <_vfiprintf_r+0xf8>
 8007aa8:	ebb8 0a07 	subs.w	sl, r8, r7
 8007aac:	d00b      	beq.n	8007ac6 <_vfiprintf_r+0x6a>
 8007aae:	4653      	mov	r3, sl
 8007ab0:	463a      	mov	r2, r7
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f7ff ffbf 	bl	8007a38 <__sfputs_r>
 8007aba:	3001      	adds	r0, #1
 8007abc:	f000 80c4 	beq.w	8007c48 <_vfiprintf_r+0x1ec>
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	4453      	add	r3, sl
 8007ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac6:	f898 3000 	ldrb.w	r3, [r8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 80bc 	beq.w	8007c48 <_vfiprintf_r+0x1ec>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	9307      	str	r3, [sp, #28]
 8007ada:	9205      	str	r2, [sp, #20]
 8007adc:	9306      	str	r3, [sp, #24]
 8007ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	7829      	ldrb	r1, [r5, #0]
 8007ae8:	4860      	ldr	r0, [pc, #384]	; (8007c6c <_vfiprintf_r+0x210>)
 8007aea:	f7f8 fc01 	bl	80002f0 <memchr>
 8007aee:	f105 0801 	add.w	r8, r5, #1
 8007af2:	9b04      	ldr	r3, [sp, #16]
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d131      	bne.n	8007b5c <_vfiprintf_r+0x100>
 8007af8:	06d9      	lsls	r1, r3, #27
 8007afa:	bf44      	itt	mi
 8007afc:	2220      	movmi	r2, #32
 8007afe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b02:	071a      	lsls	r2, r3, #28
 8007b04:	bf44      	itt	mi
 8007b06:	222b      	movmi	r2, #43	; 0x2b
 8007b08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b0c:	782a      	ldrb	r2, [r5, #0]
 8007b0e:	2a2a      	cmp	r2, #42	; 0x2a
 8007b10:	d02c      	beq.n	8007b6c <_vfiprintf_r+0x110>
 8007b12:	9a07      	ldr	r2, [sp, #28]
 8007b14:	2100      	movs	r1, #0
 8007b16:	200a      	movs	r0, #10
 8007b18:	46a8      	mov	r8, r5
 8007b1a:	3501      	adds	r5, #1
 8007b1c:	f898 3000 	ldrb.w	r3, [r8]
 8007b20:	3b30      	subs	r3, #48	; 0x30
 8007b22:	2b09      	cmp	r3, #9
 8007b24:	d96d      	bls.n	8007c02 <_vfiprintf_r+0x1a6>
 8007b26:	b371      	cbz	r1, 8007b86 <_vfiprintf_r+0x12a>
 8007b28:	e026      	b.n	8007b78 <_vfiprintf_r+0x11c>
 8007b2a:	4b51      	ldr	r3, [pc, #324]	; (8007c70 <_vfiprintf_r+0x214>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d101      	bne.n	8007b34 <_vfiprintf_r+0xd8>
 8007b30:	68b4      	ldr	r4, [r6, #8]
 8007b32:	e7a3      	b.n	8007a7c <_vfiprintf_r+0x20>
 8007b34:	4b4f      	ldr	r3, [pc, #316]	; (8007c74 <_vfiprintf_r+0x218>)
 8007b36:	429c      	cmp	r4, r3
 8007b38:	bf08      	it	eq
 8007b3a:	68f4      	ldreq	r4, [r6, #12]
 8007b3c:	e79e      	b.n	8007a7c <_vfiprintf_r+0x20>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff fc67 	bl	8007414 <__swsetup_r>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d09e      	beq.n	8007a88 <_vfiprintf_r+0x2c>
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4e:	b01d      	add	sp, #116	; 0x74
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	2b25      	cmp	r3, #37	; 0x25
 8007b56:	d0a7      	beq.n	8007aa8 <_vfiprintf_r+0x4c>
 8007b58:	46a8      	mov	r8, r5
 8007b5a:	e7a0      	b.n	8007a9e <_vfiprintf_r+0x42>
 8007b5c:	4a43      	ldr	r2, [pc, #268]	; (8007c6c <_vfiprintf_r+0x210>)
 8007b5e:	1a80      	subs	r0, r0, r2
 8007b60:	fa0b f000 	lsl.w	r0, fp, r0
 8007b64:	4318      	orrs	r0, r3
 8007b66:	9004      	str	r0, [sp, #16]
 8007b68:	4645      	mov	r5, r8
 8007b6a:	e7bb      	b.n	8007ae4 <_vfiprintf_r+0x88>
 8007b6c:	9a03      	ldr	r2, [sp, #12]
 8007b6e:	1d11      	adds	r1, r2, #4
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	9103      	str	r1, [sp, #12]
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	db01      	blt.n	8007b7c <_vfiprintf_r+0x120>
 8007b78:	9207      	str	r2, [sp, #28]
 8007b7a:	e004      	b.n	8007b86 <_vfiprintf_r+0x12a>
 8007b7c:	4252      	negs	r2, r2
 8007b7e:	f043 0302 	orr.w	r3, r3, #2
 8007b82:	9207      	str	r2, [sp, #28]
 8007b84:	9304      	str	r3, [sp, #16]
 8007b86:	f898 3000 	ldrb.w	r3, [r8]
 8007b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b8c:	d110      	bne.n	8007bb0 <_vfiprintf_r+0x154>
 8007b8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007b92:	2b2a      	cmp	r3, #42	; 0x2a
 8007b94:	f108 0101 	add.w	r1, r8, #1
 8007b98:	d137      	bne.n	8007c0a <_vfiprintf_r+0x1ae>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	1d1a      	adds	r2, r3, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	9203      	str	r2, [sp, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bfb8      	it	lt
 8007ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007baa:	f108 0802 	add.w	r8, r8, #2
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	4d31      	ldr	r5, [pc, #196]	; (8007c78 <_vfiprintf_r+0x21c>)
 8007bb2:	f898 1000 	ldrb.w	r1, [r8]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f7f8 fb99 	bl	80002f0 <memchr>
 8007bbe:	b140      	cbz	r0, 8007bd2 <_vfiprintf_r+0x176>
 8007bc0:	2340      	movs	r3, #64	; 0x40
 8007bc2:	1b40      	subs	r0, r0, r5
 8007bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8007bc8:	9b04      	ldr	r3, [sp, #16]
 8007bca:	4303      	orrs	r3, r0
 8007bcc:	9304      	str	r3, [sp, #16]
 8007bce:	f108 0801 	add.w	r8, r8, #1
 8007bd2:	f898 1000 	ldrb.w	r1, [r8]
 8007bd6:	4829      	ldr	r0, [pc, #164]	; (8007c7c <_vfiprintf_r+0x220>)
 8007bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bdc:	2206      	movs	r2, #6
 8007bde:	f108 0701 	add.w	r7, r8, #1
 8007be2:	f7f8 fb85 	bl	80002f0 <memchr>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d034      	beq.n	8007c54 <_vfiprintf_r+0x1f8>
 8007bea:	4b25      	ldr	r3, [pc, #148]	; (8007c80 <_vfiprintf_r+0x224>)
 8007bec:	bb03      	cbnz	r3, 8007c30 <_vfiprintf_r+0x1d4>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	3307      	adds	r3, #7
 8007bf2:	f023 0307 	bic.w	r3, r3, #7
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	444b      	add	r3, r9
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007c00:	e74c      	b.n	8007a9c <_vfiprintf_r+0x40>
 8007c02:	fb00 3202 	mla	r2, r0, r2, r3
 8007c06:	2101      	movs	r1, #1
 8007c08:	e786      	b.n	8007b18 <_vfiprintf_r+0xbc>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	250a      	movs	r5, #10
 8007c12:	4688      	mov	r8, r1
 8007c14:	3101      	adds	r1, #1
 8007c16:	f898 2000 	ldrb.w	r2, [r8]
 8007c1a:	3a30      	subs	r2, #48	; 0x30
 8007c1c:	2a09      	cmp	r2, #9
 8007c1e:	d903      	bls.n	8007c28 <_vfiprintf_r+0x1cc>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0c5      	beq.n	8007bb0 <_vfiprintf_r+0x154>
 8007c24:	9005      	str	r0, [sp, #20]
 8007c26:	e7c3      	b.n	8007bb0 <_vfiprintf_r+0x154>
 8007c28:	fb05 2000 	mla	r0, r5, r0, r2
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e7f0      	b.n	8007c12 <_vfiprintf_r+0x1b6>
 8007c30:	ab03      	add	r3, sp, #12
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	4622      	mov	r2, r4
 8007c36:	4b13      	ldr	r3, [pc, #76]	; (8007c84 <_vfiprintf_r+0x228>)
 8007c38:	a904      	add	r1, sp, #16
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f3af 8000 	nop.w
 8007c40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c44:	4681      	mov	r9, r0
 8007c46:	d1d8      	bne.n	8007bfa <_vfiprintf_r+0x19e>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	065b      	lsls	r3, r3, #25
 8007c4c:	f53f af7d 	bmi.w	8007b4a <_vfiprintf_r+0xee>
 8007c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c52:	e77c      	b.n	8007b4e <_vfiprintf_r+0xf2>
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <_vfiprintf_r+0x228>)
 8007c5c:	a904      	add	r1, sp, #16
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f000 f888 	bl	8007d74 <_printf_i>
 8007c64:	e7ec      	b.n	8007c40 <_vfiprintf_r+0x1e4>
 8007c66:	bf00      	nop
 8007c68:	0800866c 	.word	0x0800866c
 8007c6c:	080086ac 	.word	0x080086ac
 8007c70:	0800868c 	.word	0x0800868c
 8007c74:	0800864c 	.word	0x0800864c
 8007c78:	080086b2 	.word	0x080086b2
 8007c7c:	080086b6 	.word	0x080086b6
 8007c80:	00000000 	.word	0x00000000
 8007c84:	08007a39 	.word	0x08007a39

08007c88 <_printf_common>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	4691      	mov	r9, r2
 8007c8e:	461f      	mov	r7, r3
 8007c90:	688a      	ldr	r2, [r1, #8]
 8007c92:	690b      	ldr	r3, [r1, #16]
 8007c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	bfb8      	it	lt
 8007c9c:	4613      	movlt	r3, r2
 8007c9e:	f8c9 3000 	str.w	r3, [r9]
 8007ca2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	460c      	mov	r4, r1
 8007caa:	b112      	cbz	r2, 8007cb2 <_printf_common+0x2a>
 8007cac:	3301      	adds	r3, #1
 8007cae:	f8c9 3000 	str.w	r3, [r9]
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	0699      	lsls	r1, r3, #26
 8007cb6:	bf42      	ittt	mi
 8007cb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cbc:	3302      	addmi	r3, #2
 8007cbe:	f8c9 3000 	strmi.w	r3, [r9]
 8007cc2:	6825      	ldr	r5, [r4, #0]
 8007cc4:	f015 0506 	ands.w	r5, r5, #6
 8007cc8:	d107      	bne.n	8007cda <_printf_common+0x52>
 8007cca:	f104 0a19 	add.w	sl, r4, #25
 8007cce:	68e3      	ldr	r3, [r4, #12]
 8007cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	429d      	cmp	r5, r3
 8007cd8:	db29      	blt.n	8007d2e <_printf_common+0xa6>
 8007cda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007cde:	6822      	ldr	r2, [r4, #0]
 8007ce0:	3300      	adds	r3, #0
 8007ce2:	bf18      	it	ne
 8007ce4:	2301      	movne	r3, #1
 8007ce6:	0692      	lsls	r2, r2, #26
 8007ce8:	d42e      	bmi.n	8007d48 <_printf_common+0xc0>
 8007cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cee:	4639      	mov	r1, r7
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	47c0      	blx	r8
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d021      	beq.n	8007d3c <_printf_common+0xb4>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	68e5      	ldr	r5, [r4, #12]
 8007cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8007d00:	f003 0306 	and.w	r3, r3, #6
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	bf08      	it	eq
 8007d08:	1aad      	subeq	r5, r5, r2
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	bf0c      	ite	eq
 8007d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d14:	2500      	movne	r5, #0
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bfc4      	itt	gt
 8007d1a:	1a9b      	subgt	r3, r3, r2
 8007d1c:	18ed      	addgt	r5, r5, r3
 8007d1e:	f04f 0900 	mov.w	r9, #0
 8007d22:	341a      	adds	r4, #26
 8007d24:	454d      	cmp	r5, r9
 8007d26:	d11b      	bne.n	8007d60 <_printf_common+0xd8>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4652      	mov	r2, sl
 8007d32:	4639      	mov	r1, r7
 8007d34:	4630      	mov	r0, r6
 8007d36:	47c0      	blx	r8
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d103      	bne.n	8007d44 <_printf_common+0xbc>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d44:	3501      	adds	r5, #1
 8007d46:	e7c2      	b.n	8007cce <_printf_common+0x46>
 8007d48:	18e1      	adds	r1, r4, r3
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	2030      	movs	r0, #48	; 0x30
 8007d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d52:	4422      	add	r2, r4
 8007d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	e7c4      	b.n	8007cea <_printf_common+0x62>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4622      	mov	r2, r4
 8007d64:	4639      	mov	r1, r7
 8007d66:	4630      	mov	r0, r6
 8007d68:	47c0      	blx	r8
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d0e6      	beq.n	8007d3c <_printf_common+0xb4>
 8007d6e:	f109 0901 	add.w	r9, r9, #1
 8007d72:	e7d7      	b.n	8007d24 <_printf_common+0x9c>

08007d74 <_printf_i>:
 8007d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d78:	4617      	mov	r7, r2
 8007d7a:	7e0a      	ldrb	r2, [r1, #24]
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	2a6e      	cmp	r2, #110	; 0x6e
 8007d80:	4698      	mov	r8, r3
 8007d82:	4606      	mov	r6, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d88:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007d8c:	f000 80bc 	beq.w	8007f08 <_printf_i+0x194>
 8007d90:	d81a      	bhi.n	8007dc8 <_printf_i+0x54>
 8007d92:	2a63      	cmp	r2, #99	; 0x63
 8007d94:	d02e      	beq.n	8007df4 <_printf_i+0x80>
 8007d96:	d80a      	bhi.n	8007dae <_printf_i+0x3a>
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	f000 80c8 	beq.w	8007f2e <_printf_i+0x1ba>
 8007d9e:	2a58      	cmp	r2, #88	; 0x58
 8007da0:	f000 808a 	beq.w	8007eb8 <_printf_i+0x144>
 8007da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007dac:	e02a      	b.n	8007e04 <_printf_i+0x90>
 8007dae:	2a64      	cmp	r2, #100	; 0x64
 8007db0:	d001      	beq.n	8007db6 <_printf_i+0x42>
 8007db2:	2a69      	cmp	r2, #105	; 0x69
 8007db4:	d1f6      	bne.n	8007da4 <_printf_i+0x30>
 8007db6:	6821      	ldr	r1, [r4, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007dbe:	d023      	beq.n	8007e08 <_printf_i+0x94>
 8007dc0:	1d11      	adds	r1, r2, #4
 8007dc2:	6019      	str	r1, [r3, #0]
 8007dc4:	6813      	ldr	r3, [r2, #0]
 8007dc6:	e027      	b.n	8007e18 <_printf_i+0xa4>
 8007dc8:	2a73      	cmp	r2, #115	; 0x73
 8007dca:	f000 80b4 	beq.w	8007f36 <_printf_i+0x1c2>
 8007dce:	d808      	bhi.n	8007de2 <_printf_i+0x6e>
 8007dd0:	2a6f      	cmp	r2, #111	; 0x6f
 8007dd2:	d02a      	beq.n	8007e2a <_printf_i+0xb6>
 8007dd4:	2a70      	cmp	r2, #112	; 0x70
 8007dd6:	d1e5      	bne.n	8007da4 <_printf_i+0x30>
 8007dd8:	680a      	ldr	r2, [r1, #0]
 8007dda:	f042 0220 	orr.w	r2, r2, #32
 8007dde:	600a      	str	r2, [r1, #0]
 8007de0:	e003      	b.n	8007dea <_printf_i+0x76>
 8007de2:	2a75      	cmp	r2, #117	; 0x75
 8007de4:	d021      	beq.n	8007e2a <_printf_i+0xb6>
 8007de6:	2a78      	cmp	r2, #120	; 0x78
 8007de8:	d1dc      	bne.n	8007da4 <_printf_i+0x30>
 8007dea:	2278      	movs	r2, #120	; 0x78
 8007dec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007df0:	496e      	ldr	r1, [pc, #440]	; (8007fac <_printf_i+0x238>)
 8007df2:	e064      	b.n	8007ebe <_printf_i+0x14a>
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007dfa:	1d11      	adds	r1, r2, #4
 8007dfc:	6019      	str	r1, [r3, #0]
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e04:	2301      	movs	r3, #1
 8007e06:	e0a3      	b.n	8007f50 <_printf_i+0x1dc>
 8007e08:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007e0c:	f102 0104 	add.w	r1, r2, #4
 8007e10:	6019      	str	r1, [r3, #0]
 8007e12:	d0d7      	beq.n	8007dc4 <_printf_i+0x50>
 8007e14:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da03      	bge.n	8007e24 <_printf_i+0xb0>
 8007e1c:	222d      	movs	r2, #45	; 0x2d
 8007e1e:	425b      	negs	r3, r3
 8007e20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e24:	4962      	ldr	r1, [pc, #392]	; (8007fb0 <_printf_i+0x23c>)
 8007e26:	220a      	movs	r2, #10
 8007e28:	e017      	b.n	8007e5a <_printf_i+0xe6>
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	6819      	ldr	r1, [r3, #0]
 8007e2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007e32:	d003      	beq.n	8007e3c <_printf_i+0xc8>
 8007e34:	1d08      	adds	r0, r1, #4
 8007e36:	6018      	str	r0, [r3, #0]
 8007e38:	680b      	ldr	r3, [r1, #0]
 8007e3a:	e006      	b.n	8007e4a <_printf_i+0xd6>
 8007e3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e40:	f101 0004 	add.w	r0, r1, #4
 8007e44:	6018      	str	r0, [r3, #0]
 8007e46:	d0f7      	beq.n	8007e38 <_printf_i+0xc4>
 8007e48:	880b      	ldrh	r3, [r1, #0]
 8007e4a:	4959      	ldr	r1, [pc, #356]	; (8007fb0 <_printf_i+0x23c>)
 8007e4c:	2a6f      	cmp	r2, #111	; 0x6f
 8007e4e:	bf14      	ite	ne
 8007e50:	220a      	movne	r2, #10
 8007e52:	2208      	moveq	r2, #8
 8007e54:	2000      	movs	r0, #0
 8007e56:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007e5a:	6865      	ldr	r5, [r4, #4]
 8007e5c:	60a5      	str	r5, [r4, #8]
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	f2c0 809c 	blt.w	8007f9c <_printf_i+0x228>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	f020 0004 	bic.w	r0, r0, #4
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d13f      	bne.n	8007ef0 <_printf_i+0x17c>
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	f040 8095 	bne.w	8007fa0 <_printf_i+0x22c>
 8007e76:	4675      	mov	r5, lr
 8007e78:	2a08      	cmp	r2, #8
 8007e7a:	d10b      	bne.n	8007e94 <_printf_i+0x120>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	07da      	lsls	r2, r3, #31
 8007e80:	d508      	bpl.n	8007e94 <_printf_i+0x120>
 8007e82:	6923      	ldr	r3, [r4, #16]
 8007e84:	6862      	ldr	r2, [r4, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	bfde      	ittt	le
 8007e8a:	2330      	movle	r3, #48	; 0x30
 8007e8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e94:	ebae 0305 	sub.w	r3, lr, r5
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	f8cd 8000 	str.w	r8, [sp]
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	aa03      	add	r2, sp, #12
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff feef 	bl	8007c88 <_printf_common>
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d155      	bne.n	8007f5a <_printf_i+0x1e6>
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb2:	b005      	add	sp, #20
 8007eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eb8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007ebc:	493c      	ldr	r1, [pc, #240]	; (8007fb0 <_printf_i+0x23c>)
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007ec6:	f100 0504 	add.w	r5, r0, #4
 8007eca:	601d      	str	r5, [r3, #0]
 8007ecc:	d001      	beq.n	8007ed2 <_printf_i+0x15e>
 8007ece:	6803      	ldr	r3, [r0, #0]
 8007ed0:	e002      	b.n	8007ed8 <_printf_i+0x164>
 8007ed2:	0655      	lsls	r5, r2, #25
 8007ed4:	d5fb      	bpl.n	8007ece <_printf_i+0x15a>
 8007ed6:	8803      	ldrh	r3, [r0, #0]
 8007ed8:	07d0      	lsls	r0, r2, #31
 8007eda:	bf44      	itt	mi
 8007edc:	f042 0220 	orrmi.w	r2, r2, #32
 8007ee0:	6022      	strmi	r2, [r4, #0]
 8007ee2:	b91b      	cbnz	r3, 8007eec <_printf_i+0x178>
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	f022 0220 	bic.w	r2, r2, #32
 8007eea:	6022      	str	r2, [r4, #0]
 8007eec:	2210      	movs	r2, #16
 8007eee:	e7b1      	b.n	8007e54 <_printf_i+0xe0>
 8007ef0:	4675      	mov	r5, lr
 8007ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ef6:	fb02 3310 	mls	r3, r2, r0, r3
 8007efa:	5ccb      	ldrb	r3, [r1, r3]
 8007efc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f00:	4603      	mov	r3, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d1f5      	bne.n	8007ef2 <_printf_i+0x17e>
 8007f06:	e7b7      	b.n	8007e78 <_printf_i+0x104>
 8007f08:	6808      	ldr	r0, [r1, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	6949      	ldr	r1, [r1, #20]
 8007f0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007f12:	d004      	beq.n	8007f1e <_printf_i+0x1aa>
 8007f14:	1d10      	adds	r0, r2, #4
 8007f16:	6018      	str	r0, [r3, #0]
 8007f18:	6813      	ldr	r3, [r2, #0]
 8007f1a:	6019      	str	r1, [r3, #0]
 8007f1c:	e007      	b.n	8007f2e <_printf_i+0x1ba>
 8007f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f22:	f102 0004 	add.w	r0, r2, #4
 8007f26:	6018      	str	r0, [r3, #0]
 8007f28:	6813      	ldr	r3, [r2, #0]
 8007f2a:	d0f6      	beq.n	8007f1a <_printf_i+0x1a6>
 8007f2c:	8019      	strh	r1, [r3, #0]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	4675      	mov	r5, lr
 8007f34:	e7b1      	b.n	8007e9a <_printf_i+0x126>
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	1d11      	adds	r1, r2, #4
 8007f3a:	6019      	str	r1, [r3, #0]
 8007f3c:	6815      	ldr	r5, [r2, #0]
 8007f3e:	6862      	ldr	r2, [r4, #4]
 8007f40:	2100      	movs	r1, #0
 8007f42:	4628      	mov	r0, r5
 8007f44:	f7f8 f9d4 	bl	80002f0 <memchr>
 8007f48:	b108      	cbz	r0, 8007f4e <_printf_i+0x1da>
 8007f4a:	1b40      	subs	r0, r0, r5
 8007f4c:	6060      	str	r0, [r4, #4]
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	2300      	movs	r3, #0
 8007f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f58:	e79f      	b.n	8007e9a <_printf_i+0x126>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4630      	mov	r0, r6
 8007f62:	47c0      	blx	r8
 8007f64:	3001      	adds	r0, #1
 8007f66:	d0a2      	beq.n	8007eae <_printf_i+0x13a>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	079b      	lsls	r3, r3, #30
 8007f6c:	d507      	bpl.n	8007f7e <_printf_i+0x20a>
 8007f6e:	2500      	movs	r5, #0
 8007f70:	f104 0919 	add.w	r9, r4, #25
 8007f74:	68e3      	ldr	r3, [r4, #12]
 8007f76:	9a03      	ldr	r2, [sp, #12]
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	429d      	cmp	r5, r3
 8007f7c:	db05      	blt.n	8007f8a <_printf_i+0x216>
 8007f7e:	68e0      	ldr	r0, [r4, #12]
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	4298      	cmp	r0, r3
 8007f84:	bfb8      	it	lt
 8007f86:	4618      	movlt	r0, r3
 8007f88:	e793      	b.n	8007eb2 <_printf_i+0x13e>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	464a      	mov	r2, r9
 8007f8e:	4639      	mov	r1, r7
 8007f90:	4630      	mov	r0, r6
 8007f92:	47c0      	blx	r8
 8007f94:	3001      	adds	r0, #1
 8007f96:	d08a      	beq.n	8007eae <_printf_i+0x13a>
 8007f98:	3501      	adds	r5, #1
 8007f9a:	e7eb      	b.n	8007f74 <_printf_i+0x200>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1a7      	bne.n	8007ef0 <_printf_i+0x17c>
 8007fa0:	780b      	ldrb	r3, [r1, #0]
 8007fa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007faa:	e765      	b.n	8007e78 <_printf_i+0x104>
 8007fac:	080086ce 	.word	0x080086ce
 8007fb0:	080086bd 	.word	0x080086bd

08007fb4 <_sbrk_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4c06      	ldr	r4, [pc, #24]	; (8007fd0 <_sbrk_r+0x1c>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4605      	mov	r5, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	f7fe fd92 	bl	8006ae8 <_sbrk>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_sbrk_r+0x1a>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_sbrk_r+0x1a>
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	20000d0c 	.word	0x20000d0c

08007fd4 <__sread>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	f000 f896 	bl	800810c <_read_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	bfab      	itete	ge
 8007fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fe8:	181b      	addge	r3, r3, r0
 8007fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fee:	bfac      	ite	ge
 8007ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ff2:	81a3      	strhlt	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__swrite>:
 8007ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	898b      	ldrh	r3, [r1, #12]
 8007ffe:	05db      	lsls	r3, r3, #23
 8008000:	4605      	mov	r5, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4616      	mov	r6, r2
 8008006:	d505      	bpl.n	8008014 <__swrite+0x1e>
 8008008:	2302      	movs	r3, #2
 800800a:	2200      	movs	r2, #0
 800800c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008010:	f000 f868 	bl	80080e4 <_lseek_r>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800801a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	4632      	mov	r2, r6
 8008022:	463b      	mov	r3, r7
 8008024:	4628      	mov	r0, r5
 8008026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800802a:	f000 b817 	b.w	800805c <_write_r>

0800802e <__sseek>:
 800802e:	b510      	push	{r4, lr}
 8008030:	460c      	mov	r4, r1
 8008032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008036:	f000 f855 	bl	80080e4 <_lseek_r>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	bf15      	itete	ne
 8008040:	6560      	strne	r0, [r4, #84]	; 0x54
 8008042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800804a:	81a3      	strheq	r3, [r4, #12]
 800804c:	bf18      	it	ne
 800804e:	81a3      	strhne	r3, [r4, #12]
 8008050:	bd10      	pop	{r4, pc}

08008052 <__sclose>:
 8008052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008056:	f000 b813 	b.w	8008080 <_close_r>
	...

0800805c <_write_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4c07      	ldr	r4, [pc, #28]	; (800807c <_write_r+0x20>)
 8008060:	4605      	mov	r5, r0
 8008062:	4608      	mov	r0, r1
 8008064:	4611      	mov	r1, r2
 8008066:	2200      	movs	r2, #0
 8008068:	6022      	str	r2, [r4, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	f7fe fd2e 	bl	8006acc <_write>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_write_r+0x1e>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	b103      	cbz	r3, 800807a <_write_r+0x1e>
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	20000d0c 	.word	0x20000d0c

08008080 <_close_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4c06      	ldr	r4, [pc, #24]	; (800809c <_close_r+0x1c>)
 8008084:	2300      	movs	r3, #0
 8008086:	4605      	mov	r5, r0
 8008088:	4608      	mov	r0, r1
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	f7fe fd46 	bl	8006b1c <_close>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_close_r+0x1a>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	b103      	cbz	r3, 800809a <_close_r+0x1a>
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	20000d0c 	.word	0x20000d0c

080080a0 <_fstat_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4c07      	ldr	r4, [pc, #28]	; (80080c0 <_fstat_r+0x20>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	4605      	mov	r5, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	4611      	mov	r1, r2
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	f7fe fd38 	bl	8006b22 <_fstat>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d102      	bne.n	80080bc <_fstat_r+0x1c>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	b103      	cbz	r3, 80080bc <_fstat_r+0x1c>
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	bd38      	pop	{r3, r4, r5, pc}
 80080be:	bf00      	nop
 80080c0:	20000d0c 	.word	0x20000d0c

080080c4 <_isatty_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4c06      	ldr	r4, [pc, #24]	; (80080e0 <_isatty_r+0x1c>)
 80080c8:	2300      	movs	r3, #0
 80080ca:	4605      	mov	r5, r0
 80080cc:	4608      	mov	r0, r1
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	f7fe fd2c 	bl	8006b2c <_isatty>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_isatty_r+0x1a>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	b103      	cbz	r3, 80080de <_isatty_r+0x1a>
 80080dc:	602b      	str	r3, [r5, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	20000d0c 	.word	0x20000d0c

080080e4 <_lseek_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4c07      	ldr	r4, [pc, #28]	; (8008104 <_lseek_r+0x20>)
 80080e8:	4605      	mov	r5, r0
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	6022      	str	r2, [r4, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f7fe fd1c 	bl	8006b30 <_lseek>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_lseek_r+0x1e>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_lseek_r+0x1e>
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20000d0c 	.word	0x20000d0c

08008108 <__malloc_lock>:
 8008108:	4770      	bx	lr

0800810a <__malloc_unlock>:
 800810a:	4770      	bx	lr

0800810c <_read_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4c07      	ldr	r4, [pc, #28]	; (800812c <_read_r+0x20>)
 8008110:	4605      	mov	r5, r0
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	2200      	movs	r2, #0
 8008118:	6022      	str	r2, [r4, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7fe fcc8 	bl	8006ab0 <_read>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_read_r+0x1e>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	b103      	cbz	r3, 800812a <_read_r+0x1e>
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20000d0c 	.word	0x20000d0c

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr
